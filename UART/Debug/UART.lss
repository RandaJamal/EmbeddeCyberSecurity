
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  00003f1c  00003fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008000d0  008000d0  00004020  2**0
                  ALLOC
  3 .stab         000026f4  00000000  00000000  00004020  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014c9  00000000  00000000  00006714  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a9c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b770  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b8d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bb5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c32b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
       4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
       8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
       c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
      50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000054 <__c.1988>:
      54:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000060 <__ctors_end>:
      60:	11 24       	eor	r1, r1
      62:	1f be       	out	0x3f, r1	; 63
      64:	cf e5       	ldi	r28, 0x5F	; 95
      66:	d8 e0       	ldi	r29, 0x08	; 8
      68:	de bf       	out	0x3e, r29	; 62
      6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
      6c:	10 e0       	ldi	r17, 0x00	; 0
      6e:	a0 e6       	ldi	r26, 0x60	; 96
      70:	b0 e0       	ldi	r27, 0x00	; 0
      72:	ec e1       	ldi	r30, 0x1C	; 28
      74:	ff e3       	ldi	r31, 0x3F	; 63
      76:	02 c0       	rjmp	.+4      	; 0x7c <.do_copy_data_start>

00000078 <.do_copy_data_loop>:
      78:	05 90       	lpm	r0, Z+
      7a:	0d 92       	st	X+, r0

0000007c <.do_copy_data_start>:
      7c:	a0 3d       	cpi	r26, 0xD0	; 208
      7e:	b1 07       	cpc	r27, r17
      80:	d9 f7       	brne	.-10     	; 0x78 <.do_copy_data_loop>

00000082 <__do_clear_bss>:
      82:	10 e0       	ldi	r17, 0x00	; 0
      84:	a0 ed       	ldi	r26, 0xD0	; 208
      86:	b0 e0       	ldi	r27, 0x00	; 0
      88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
      8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
      8c:	ab 3d       	cpi	r26, 0xDB	; 219
      8e:	b1 07       	cpc	r27, r17
      90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
      92:	0e 94 55 0e 	call	0x1caa	; 0x1caa <main>
      96:	0c 94 8c 1f 	jmp	0x3f18	; 0x3f18 <_exit>

0000009a <__bad_interrupt>:
      9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <__fixunssfsi>:
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	7b 01       	movw	r14, r22
      a8:	8c 01       	movw	r16, r24
      aa:	20 e0       	ldi	r18, 0x00	; 0
      ac:	30 e0       	ldi	r19, 0x00	; 0
      ae:	40 e0       	ldi	r20, 0x00	; 0
      b0:	5f e4       	ldi	r21, 0x4F	; 79
      b2:	0e 94 4f 03 	call	0x69e	; 0x69e <__gesf2>
      b6:	88 23       	and	r24, r24
      b8:	8c f0       	brlt	.+34     	; 0xdc <__fixunssfsi+0x3e>
      ba:	c8 01       	movw	r24, r16
      bc:	b7 01       	movw	r22, r14
      be:	20 e0       	ldi	r18, 0x00	; 0
      c0:	30 e0       	ldi	r19, 0x00	; 0
      c2:	40 e0       	ldi	r20, 0x00	; 0
      c4:	5f e4       	ldi	r21, 0x4F	; 79
      c6:	0e 94 c7 01 	call	0x38e	; 0x38e <__subsf3>
      ca:	0e 94 af 03 	call	0x75e	; 0x75e <__fixsfsi>
      ce:	9b 01       	movw	r18, r22
      d0:	ac 01       	movw	r20, r24
      d2:	20 50       	subi	r18, 0x00	; 0
      d4:	30 40       	sbci	r19, 0x00	; 0
      d6:	40 40       	sbci	r20, 0x00	; 0
      d8:	50 48       	sbci	r21, 0x80	; 128
      da:	06 c0       	rjmp	.+12     	; 0xe8 <__fixunssfsi+0x4a>
      dc:	c8 01       	movw	r24, r16
      de:	b7 01       	movw	r22, r14
      e0:	0e 94 af 03 	call	0x75e	; 0x75e <__fixsfsi>
      e4:	9b 01       	movw	r18, r22
      e6:	ac 01       	movw	r20, r24
      e8:	b9 01       	movw	r22, r18
      ea:	ca 01       	movw	r24, r20
      ec:	1f 91       	pop	r17
      ee:	0f 91       	pop	r16
      f0:	ff 90       	pop	r15
      f2:	ef 90       	pop	r14
      f4:	08 95       	ret

000000f6 <_fpadd_parts>:
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e1 e8       	ldi	r30, 0x81	; 129
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <__prologue_saves__>
     102:	dc 01       	movw	r26, r24
     104:	2b 01       	movw	r4, r22
     106:	fa 01       	movw	r30, r20
     108:	9c 91       	ld	r25, X
     10a:	92 30       	cpi	r25, 0x02	; 2
     10c:	08 f4       	brcc	.+2      	; 0x110 <_fpadd_parts+0x1a>
     10e:	39 c1       	rjmp	.+626    	; 0x382 <_fpadd_parts+0x28c>
     110:	eb 01       	movw	r28, r22
     112:	88 81       	ld	r24, Y
     114:	82 30       	cpi	r24, 0x02	; 2
     116:	08 f4       	brcc	.+2      	; 0x11a <_fpadd_parts+0x24>
     118:	33 c1       	rjmp	.+614    	; 0x380 <_fpadd_parts+0x28a>
     11a:	94 30       	cpi	r25, 0x04	; 4
     11c:	69 f4       	brne	.+26     	; 0x138 <_fpadd_parts+0x42>
     11e:	84 30       	cpi	r24, 0x04	; 4
     120:	09 f0       	breq	.+2      	; 0x124 <_fpadd_parts+0x2e>
     122:	2f c1       	rjmp	.+606    	; 0x382 <_fpadd_parts+0x28c>
     124:	11 96       	adiw	r26, 0x01	; 1
     126:	9c 91       	ld	r25, X
     128:	11 97       	sbiw	r26, 0x01	; 1
     12a:	89 81       	ldd	r24, Y+1	; 0x01
     12c:	98 17       	cp	r25, r24
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x3c>
     130:	28 c1       	rjmp	.+592    	; 0x382 <_fpadd_parts+0x28c>
     132:	a9 eb       	ldi	r26, 0xB9	; 185
     134:	b0 e0       	ldi	r27, 0x00	; 0
     136:	25 c1       	rjmp	.+586    	; 0x382 <_fpadd_parts+0x28c>
     138:	84 30       	cpi	r24, 0x04	; 4
     13a:	09 f4       	brne	.+2      	; 0x13e <_fpadd_parts+0x48>
     13c:	21 c1       	rjmp	.+578    	; 0x380 <_fpadd_parts+0x28a>
     13e:	82 30       	cpi	r24, 0x02	; 2
     140:	a9 f4       	brne	.+42     	; 0x16c <_fpadd_parts+0x76>
     142:	92 30       	cpi	r25, 0x02	; 2
     144:	09 f0       	breq	.+2      	; 0x148 <_fpadd_parts+0x52>
     146:	1d c1       	rjmp	.+570    	; 0x382 <_fpadd_parts+0x28c>
     148:	9a 01       	movw	r18, r20
     14a:	ad 01       	movw	r20, r26
     14c:	88 e0       	ldi	r24, 0x08	; 8
     14e:	ea 01       	movw	r28, r20
     150:	09 90       	ld	r0, Y+
     152:	ae 01       	movw	r20, r28
     154:	e9 01       	movw	r28, r18
     156:	09 92       	st	Y+, r0
     158:	9e 01       	movw	r18, r28
     15a:	81 50       	subi	r24, 0x01	; 1
     15c:	c1 f7       	brne	.-16     	; 0x14e <_fpadd_parts+0x58>
     15e:	e2 01       	movw	r28, r4
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	11 96       	adiw	r26, 0x01	; 1
     164:	9c 91       	ld	r25, X
     166:	89 23       	and	r24, r25
     168:	81 83       	std	Z+1, r24	; 0x01
     16a:	08 c1       	rjmp	.+528    	; 0x37c <_fpadd_parts+0x286>
     16c:	92 30       	cpi	r25, 0x02	; 2
     16e:	09 f4       	brne	.+2      	; 0x172 <_fpadd_parts+0x7c>
     170:	07 c1       	rjmp	.+526    	; 0x380 <_fpadd_parts+0x28a>
     172:	12 96       	adiw	r26, 0x02	; 2
     174:	2d 90       	ld	r2, X+
     176:	3c 90       	ld	r3, X
     178:	13 97       	sbiw	r26, 0x03	; 3
     17a:	eb 01       	movw	r28, r22
     17c:	8a 81       	ldd	r24, Y+2	; 0x02
     17e:	9b 81       	ldd	r25, Y+3	; 0x03
     180:	14 96       	adiw	r26, 0x04	; 4
     182:	ad 90       	ld	r10, X+
     184:	bd 90       	ld	r11, X+
     186:	cd 90       	ld	r12, X+
     188:	dc 90       	ld	r13, X
     18a:	17 97       	sbiw	r26, 0x07	; 7
     18c:	ec 80       	ldd	r14, Y+4	; 0x04
     18e:	fd 80       	ldd	r15, Y+5	; 0x05
     190:	0e 81       	ldd	r16, Y+6	; 0x06
     192:	1f 81       	ldd	r17, Y+7	; 0x07
     194:	91 01       	movw	r18, r2
     196:	28 1b       	sub	r18, r24
     198:	39 0b       	sbc	r19, r25
     19a:	b9 01       	movw	r22, r18
     19c:	37 ff       	sbrs	r19, 7
     19e:	04 c0       	rjmp	.+8      	; 0x1a8 <_fpadd_parts+0xb2>
     1a0:	66 27       	eor	r22, r22
     1a2:	77 27       	eor	r23, r23
     1a4:	62 1b       	sub	r22, r18
     1a6:	73 0b       	sbc	r23, r19
     1a8:	60 32       	cpi	r22, 0x20	; 32
     1aa:	71 05       	cpc	r23, r1
     1ac:	0c f0       	brlt	.+2      	; 0x1b0 <_fpadd_parts+0xba>
     1ae:	61 c0       	rjmp	.+194    	; 0x272 <_fpadd_parts+0x17c>
     1b0:	12 16       	cp	r1, r18
     1b2:	13 06       	cpc	r1, r19
     1b4:	6c f5       	brge	.+90     	; 0x210 <_fpadd_parts+0x11a>
     1b6:	37 01       	movw	r6, r14
     1b8:	48 01       	movw	r8, r16
     1ba:	06 2e       	mov	r0, r22
     1bc:	04 c0       	rjmp	.+8      	; 0x1c6 <_fpadd_parts+0xd0>
     1be:	96 94       	lsr	r9
     1c0:	87 94       	ror	r8
     1c2:	77 94       	ror	r7
     1c4:	67 94       	ror	r6
     1c6:	0a 94       	dec	r0
     1c8:	d2 f7       	brpl	.-12     	; 0x1be <_fpadd_parts+0xc8>
     1ca:	21 e0       	ldi	r18, 0x01	; 1
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	40 e0       	ldi	r20, 0x00	; 0
     1d0:	50 e0       	ldi	r21, 0x00	; 0
     1d2:	04 c0       	rjmp	.+8      	; 0x1dc <_fpadd_parts+0xe6>
     1d4:	22 0f       	add	r18, r18
     1d6:	33 1f       	adc	r19, r19
     1d8:	44 1f       	adc	r20, r20
     1da:	55 1f       	adc	r21, r21
     1dc:	6a 95       	dec	r22
     1de:	d2 f7       	brpl	.-12     	; 0x1d4 <_fpadd_parts+0xde>
     1e0:	21 50       	subi	r18, 0x01	; 1
     1e2:	30 40       	sbci	r19, 0x00	; 0
     1e4:	40 40       	sbci	r20, 0x00	; 0
     1e6:	50 40       	sbci	r21, 0x00	; 0
     1e8:	2e 21       	and	r18, r14
     1ea:	3f 21       	and	r19, r15
     1ec:	40 23       	and	r20, r16
     1ee:	51 23       	and	r21, r17
     1f0:	21 15       	cp	r18, r1
     1f2:	31 05       	cpc	r19, r1
     1f4:	41 05       	cpc	r20, r1
     1f6:	51 05       	cpc	r21, r1
     1f8:	21 f0       	breq	.+8      	; 0x202 <_fpadd_parts+0x10c>
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	40 e0       	ldi	r20, 0x00	; 0
     200:	50 e0       	ldi	r21, 0x00	; 0
     202:	79 01       	movw	r14, r18
     204:	8a 01       	movw	r16, r20
     206:	e6 28       	or	r14, r6
     208:	f7 28       	or	r15, r7
     20a:	08 29       	or	r16, r8
     20c:	19 29       	or	r17, r9
     20e:	3c c0       	rjmp	.+120    	; 0x288 <_fpadd_parts+0x192>
     210:	23 2b       	or	r18, r19
     212:	d1 f1       	breq	.+116    	; 0x288 <_fpadd_parts+0x192>
     214:	26 0e       	add	r2, r22
     216:	37 1e       	adc	r3, r23
     218:	35 01       	movw	r6, r10
     21a:	46 01       	movw	r8, r12
     21c:	06 2e       	mov	r0, r22
     21e:	04 c0       	rjmp	.+8      	; 0x228 <_fpadd_parts+0x132>
     220:	96 94       	lsr	r9
     222:	87 94       	ror	r8
     224:	77 94       	ror	r7
     226:	67 94       	ror	r6
     228:	0a 94       	dec	r0
     22a:	d2 f7       	brpl	.-12     	; 0x220 <_fpadd_parts+0x12a>
     22c:	21 e0       	ldi	r18, 0x01	; 1
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	40 e0       	ldi	r20, 0x00	; 0
     232:	50 e0       	ldi	r21, 0x00	; 0
     234:	04 c0       	rjmp	.+8      	; 0x23e <_fpadd_parts+0x148>
     236:	22 0f       	add	r18, r18
     238:	33 1f       	adc	r19, r19
     23a:	44 1f       	adc	r20, r20
     23c:	55 1f       	adc	r21, r21
     23e:	6a 95       	dec	r22
     240:	d2 f7       	brpl	.-12     	; 0x236 <_fpadd_parts+0x140>
     242:	21 50       	subi	r18, 0x01	; 1
     244:	30 40       	sbci	r19, 0x00	; 0
     246:	40 40       	sbci	r20, 0x00	; 0
     248:	50 40       	sbci	r21, 0x00	; 0
     24a:	2a 21       	and	r18, r10
     24c:	3b 21       	and	r19, r11
     24e:	4c 21       	and	r20, r12
     250:	5d 21       	and	r21, r13
     252:	21 15       	cp	r18, r1
     254:	31 05       	cpc	r19, r1
     256:	41 05       	cpc	r20, r1
     258:	51 05       	cpc	r21, r1
     25a:	21 f0       	breq	.+8      	; 0x264 <_fpadd_parts+0x16e>
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	40 e0       	ldi	r20, 0x00	; 0
     262:	50 e0       	ldi	r21, 0x00	; 0
     264:	59 01       	movw	r10, r18
     266:	6a 01       	movw	r12, r20
     268:	a6 28       	or	r10, r6
     26a:	b7 28       	or	r11, r7
     26c:	c8 28       	or	r12, r8
     26e:	d9 28       	or	r13, r9
     270:	0b c0       	rjmp	.+22     	; 0x288 <_fpadd_parts+0x192>
     272:	82 15       	cp	r24, r2
     274:	93 05       	cpc	r25, r3
     276:	2c f0       	brlt	.+10     	; 0x282 <_fpadd_parts+0x18c>
     278:	1c 01       	movw	r2, r24
     27a:	aa 24       	eor	r10, r10
     27c:	bb 24       	eor	r11, r11
     27e:	65 01       	movw	r12, r10
     280:	03 c0       	rjmp	.+6      	; 0x288 <_fpadd_parts+0x192>
     282:	ee 24       	eor	r14, r14
     284:	ff 24       	eor	r15, r15
     286:	87 01       	movw	r16, r14
     288:	11 96       	adiw	r26, 0x01	; 1
     28a:	9c 91       	ld	r25, X
     28c:	d2 01       	movw	r26, r4
     28e:	11 96       	adiw	r26, 0x01	; 1
     290:	8c 91       	ld	r24, X
     292:	98 17       	cp	r25, r24
     294:	09 f4       	brne	.+2      	; 0x298 <_fpadd_parts+0x1a2>
     296:	45 c0       	rjmp	.+138    	; 0x322 <_fpadd_parts+0x22c>
     298:	99 23       	and	r25, r25
     29a:	39 f0       	breq	.+14     	; 0x2aa <_fpadd_parts+0x1b4>
     29c:	a8 01       	movw	r20, r16
     29e:	97 01       	movw	r18, r14
     2a0:	2a 19       	sub	r18, r10
     2a2:	3b 09       	sbc	r19, r11
     2a4:	4c 09       	sbc	r20, r12
     2a6:	5d 09       	sbc	r21, r13
     2a8:	06 c0       	rjmp	.+12     	; 0x2b6 <_fpadd_parts+0x1c0>
     2aa:	a6 01       	movw	r20, r12
     2ac:	95 01       	movw	r18, r10
     2ae:	2e 19       	sub	r18, r14
     2b0:	3f 09       	sbc	r19, r15
     2b2:	40 0b       	sbc	r20, r16
     2b4:	51 0b       	sbc	r21, r17
     2b6:	57 fd       	sbrc	r21, 7
     2b8:	08 c0       	rjmp	.+16     	; 0x2ca <_fpadd_parts+0x1d4>
     2ba:	11 82       	std	Z+1, r1	; 0x01
     2bc:	33 82       	std	Z+3, r3	; 0x03
     2be:	22 82       	std	Z+2, r2	; 0x02
     2c0:	24 83       	std	Z+4, r18	; 0x04
     2c2:	35 83       	std	Z+5, r19	; 0x05
     2c4:	46 83       	std	Z+6, r20	; 0x06
     2c6:	57 83       	std	Z+7, r21	; 0x07
     2c8:	1d c0       	rjmp	.+58     	; 0x304 <_fpadd_parts+0x20e>
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	81 83       	std	Z+1, r24	; 0x01
     2ce:	33 82       	std	Z+3, r3	; 0x03
     2d0:	22 82       	std	Z+2, r2	; 0x02
     2d2:	88 27       	eor	r24, r24
     2d4:	99 27       	eor	r25, r25
     2d6:	dc 01       	movw	r26, r24
     2d8:	82 1b       	sub	r24, r18
     2da:	93 0b       	sbc	r25, r19
     2dc:	a4 0b       	sbc	r26, r20
     2de:	b5 0b       	sbc	r27, r21
     2e0:	84 83       	std	Z+4, r24	; 0x04
     2e2:	95 83       	std	Z+5, r25	; 0x05
     2e4:	a6 83       	std	Z+6, r26	; 0x06
     2e6:	b7 83       	std	Z+7, r27	; 0x07
     2e8:	0d c0       	rjmp	.+26     	; 0x304 <_fpadd_parts+0x20e>
     2ea:	22 0f       	add	r18, r18
     2ec:	33 1f       	adc	r19, r19
     2ee:	44 1f       	adc	r20, r20
     2f0:	55 1f       	adc	r21, r21
     2f2:	24 83       	std	Z+4, r18	; 0x04
     2f4:	35 83       	std	Z+5, r19	; 0x05
     2f6:	46 83       	std	Z+6, r20	; 0x06
     2f8:	57 83       	std	Z+7, r21	; 0x07
     2fa:	82 81       	ldd	r24, Z+2	; 0x02
     2fc:	93 81       	ldd	r25, Z+3	; 0x03
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	93 83       	std	Z+3, r25	; 0x03
     302:	82 83       	std	Z+2, r24	; 0x02
     304:	24 81       	ldd	r18, Z+4	; 0x04
     306:	35 81       	ldd	r19, Z+5	; 0x05
     308:	46 81       	ldd	r20, Z+6	; 0x06
     30a:	57 81       	ldd	r21, Z+7	; 0x07
     30c:	da 01       	movw	r26, r20
     30e:	c9 01       	movw	r24, r18
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	a1 09       	sbc	r26, r1
     314:	b1 09       	sbc	r27, r1
     316:	8f 5f       	subi	r24, 0xFF	; 255
     318:	9f 4f       	sbci	r25, 0xFF	; 255
     31a:	af 4f       	sbci	r26, 0xFF	; 255
     31c:	bf 43       	sbci	r27, 0x3F	; 63
     31e:	28 f3       	brcs	.-54     	; 0x2ea <_fpadd_parts+0x1f4>
     320:	0b c0       	rjmp	.+22     	; 0x338 <_fpadd_parts+0x242>
     322:	91 83       	std	Z+1, r25	; 0x01
     324:	33 82       	std	Z+3, r3	; 0x03
     326:	22 82       	std	Z+2, r2	; 0x02
     328:	ea 0c       	add	r14, r10
     32a:	fb 1c       	adc	r15, r11
     32c:	0c 1d       	adc	r16, r12
     32e:	1d 1d       	adc	r17, r13
     330:	e4 82       	std	Z+4, r14	; 0x04
     332:	f5 82       	std	Z+5, r15	; 0x05
     334:	06 83       	std	Z+6, r16	; 0x06
     336:	17 83       	std	Z+7, r17	; 0x07
     338:	83 e0       	ldi	r24, 0x03	; 3
     33a:	80 83       	st	Z, r24
     33c:	24 81       	ldd	r18, Z+4	; 0x04
     33e:	35 81       	ldd	r19, Z+5	; 0x05
     340:	46 81       	ldd	r20, Z+6	; 0x06
     342:	57 81       	ldd	r21, Z+7	; 0x07
     344:	57 ff       	sbrs	r21, 7
     346:	1a c0       	rjmp	.+52     	; 0x37c <_fpadd_parts+0x286>
     348:	c9 01       	movw	r24, r18
     34a:	aa 27       	eor	r26, r26
     34c:	97 fd       	sbrc	r25, 7
     34e:	a0 95       	com	r26
     350:	ba 2f       	mov	r27, r26
     352:	81 70       	andi	r24, 0x01	; 1
     354:	90 70       	andi	r25, 0x00	; 0
     356:	a0 70       	andi	r26, 0x00	; 0
     358:	b0 70       	andi	r27, 0x00	; 0
     35a:	56 95       	lsr	r21
     35c:	47 95       	ror	r20
     35e:	37 95       	ror	r19
     360:	27 95       	ror	r18
     362:	82 2b       	or	r24, r18
     364:	93 2b       	or	r25, r19
     366:	a4 2b       	or	r26, r20
     368:	b5 2b       	or	r27, r21
     36a:	84 83       	std	Z+4, r24	; 0x04
     36c:	95 83       	std	Z+5, r25	; 0x05
     36e:	a6 83       	std	Z+6, r26	; 0x06
     370:	b7 83       	std	Z+7, r27	; 0x07
     372:	82 81       	ldd	r24, Z+2	; 0x02
     374:	93 81       	ldd	r25, Z+3	; 0x03
     376:	01 96       	adiw	r24, 0x01	; 1
     378:	93 83       	std	Z+3, r25	; 0x03
     37a:	82 83       	std	Z+2, r24	; 0x02
     37c:	df 01       	movw	r26, r30
     37e:	01 c0       	rjmp	.+2      	; 0x382 <_fpadd_parts+0x28c>
     380:	d2 01       	movw	r26, r4
     382:	cd 01       	movw	r24, r26
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
     388:	e2 e1       	ldi	r30, 0x12	; 18
     38a:	0c 94 c5 18 	jmp	0x318a	; 0x318a <__epilogue_restores__>

0000038e <__subsf3>:
     38e:	a0 e2       	ldi	r26, 0x20	; 32
     390:	b0 e0       	ldi	r27, 0x00	; 0
     392:	ed ec       	ldi	r30, 0xCD	; 205
     394:	f1 e0       	ldi	r31, 0x01	; 1
     396:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__prologue_saves__+0x18>
     39a:	69 83       	std	Y+1, r22	; 0x01
     39c:	7a 83       	std	Y+2, r23	; 0x02
     39e:	8b 83       	std	Y+3, r24	; 0x03
     3a0:	9c 83       	std	Y+4, r25	; 0x04
     3a2:	2d 83       	std	Y+5, r18	; 0x05
     3a4:	3e 83       	std	Y+6, r19	; 0x06
     3a6:	4f 83       	std	Y+7, r20	; 0x07
     3a8:	58 87       	std	Y+8, r21	; 0x08
     3aa:	e9 e0       	ldi	r30, 0x09	; 9
     3ac:	ee 2e       	mov	r14, r30
     3ae:	f1 2c       	mov	r15, r1
     3b0:	ec 0e       	add	r14, r28
     3b2:	fd 1e       	adc	r15, r29
     3b4:	ce 01       	movw	r24, r28
     3b6:	01 96       	adiw	r24, 0x01	; 1
     3b8:	b7 01       	movw	r22, r14
     3ba:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__unpack_f>
     3be:	8e 01       	movw	r16, r28
     3c0:	0f 5e       	subi	r16, 0xEF	; 239
     3c2:	1f 4f       	sbci	r17, 0xFF	; 255
     3c4:	ce 01       	movw	r24, r28
     3c6:	05 96       	adiw	r24, 0x05	; 5
     3c8:	b8 01       	movw	r22, r16
     3ca:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__unpack_f>
     3ce:	8a 89       	ldd	r24, Y+18	; 0x12
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	89 27       	eor	r24, r25
     3d4:	8a 8b       	std	Y+18, r24	; 0x12
     3d6:	c7 01       	movw	r24, r14
     3d8:	b8 01       	movw	r22, r16
     3da:	ae 01       	movw	r20, r28
     3dc:	47 5e       	subi	r20, 0xE7	; 231
     3de:	5f 4f       	sbci	r21, 0xFF	; 255
     3e0:	0e 94 7b 00 	call	0xf6	; 0xf6 <_fpadd_parts>
     3e4:	0e 94 03 04 	call	0x806	; 0x806 <__pack_f>
     3e8:	a0 96       	adiw	r28, 0x20	; 32
     3ea:	e6 e0       	ldi	r30, 0x06	; 6
     3ec:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__epilogue_restores__+0x18>

000003f0 <__addsf3>:
     3f0:	a0 e2       	ldi	r26, 0x20	; 32
     3f2:	b0 e0       	ldi	r27, 0x00	; 0
     3f4:	ee ef       	ldi	r30, 0xFE	; 254
     3f6:	f1 e0       	ldi	r31, 0x01	; 1
     3f8:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__prologue_saves__+0x18>
     3fc:	69 83       	std	Y+1, r22	; 0x01
     3fe:	7a 83       	std	Y+2, r23	; 0x02
     400:	8b 83       	std	Y+3, r24	; 0x03
     402:	9c 83       	std	Y+4, r25	; 0x04
     404:	2d 83       	std	Y+5, r18	; 0x05
     406:	3e 83       	std	Y+6, r19	; 0x06
     408:	4f 83       	std	Y+7, r20	; 0x07
     40a:	58 87       	std	Y+8, r21	; 0x08
     40c:	f9 e0       	ldi	r31, 0x09	; 9
     40e:	ef 2e       	mov	r14, r31
     410:	f1 2c       	mov	r15, r1
     412:	ec 0e       	add	r14, r28
     414:	fd 1e       	adc	r15, r29
     416:	ce 01       	movw	r24, r28
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	b7 01       	movw	r22, r14
     41c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__unpack_f>
     420:	8e 01       	movw	r16, r28
     422:	0f 5e       	subi	r16, 0xEF	; 239
     424:	1f 4f       	sbci	r17, 0xFF	; 255
     426:	ce 01       	movw	r24, r28
     428:	05 96       	adiw	r24, 0x05	; 5
     42a:	b8 01       	movw	r22, r16
     42c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__unpack_f>
     430:	c7 01       	movw	r24, r14
     432:	b8 01       	movw	r22, r16
     434:	ae 01       	movw	r20, r28
     436:	47 5e       	subi	r20, 0xE7	; 231
     438:	5f 4f       	sbci	r21, 0xFF	; 255
     43a:	0e 94 7b 00 	call	0xf6	; 0xf6 <_fpadd_parts>
     43e:	0e 94 03 04 	call	0x806	; 0x806 <__pack_f>
     442:	a0 96       	adiw	r28, 0x20	; 32
     444:	e6 e0       	ldi	r30, 0x06	; 6
     446:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__epilogue_restores__+0x18>

0000044a <__mulsf3>:
     44a:	a0 e2       	ldi	r26, 0x20	; 32
     44c:	b0 e0       	ldi	r27, 0x00	; 0
     44e:	eb e2       	ldi	r30, 0x2B	; 43
     450:	f2 e0       	ldi	r31, 0x02	; 2
     452:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <__prologue_saves__>
     456:	69 83       	std	Y+1, r22	; 0x01
     458:	7a 83       	std	Y+2, r23	; 0x02
     45a:	8b 83       	std	Y+3, r24	; 0x03
     45c:	9c 83       	std	Y+4, r25	; 0x04
     45e:	2d 83       	std	Y+5, r18	; 0x05
     460:	3e 83       	std	Y+6, r19	; 0x06
     462:	4f 83       	std	Y+7, r20	; 0x07
     464:	58 87       	std	Y+8, r21	; 0x08
     466:	ce 01       	movw	r24, r28
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	be 01       	movw	r22, r28
     46c:	67 5f       	subi	r22, 0xF7	; 247
     46e:	7f 4f       	sbci	r23, 0xFF	; 255
     470:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__unpack_f>
     474:	ce 01       	movw	r24, r28
     476:	05 96       	adiw	r24, 0x05	; 5
     478:	be 01       	movw	r22, r28
     47a:	6f 5e       	subi	r22, 0xEF	; 239
     47c:	7f 4f       	sbci	r23, 0xFF	; 255
     47e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__unpack_f>
     482:	99 85       	ldd	r25, Y+9	; 0x09
     484:	92 30       	cpi	r25, 0x02	; 2
     486:	88 f0       	brcs	.+34     	; 0x4aa <__mulsf3+0x60>
     488:	89 89       	ldd	r24, Y+17	; 0x11
     48a:	82 30       	cpi	r24, 0x02	; 2
     48c:	c8 f0       	brcs	.+50     	; 0x4c0 <__mulsf3+0x76>
     48e:	94 30       	cpi	r25, 0x04	; 4
     490:	19 f4       	brne	.+6      	; 0x498 <__mulsf3+0x4e>
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	51 f4       	brne	.+20     	; 0x4aa <__mulsf3+0x60>
     496:	04 c0       	rjmp	.+8      	; 0x4a0 <__mulsf3+0x56>
     498:	84 30       	cpi	r24, 0x04	; 4
     49a:	29 f4       	brne	.+10     	; 0x4a6 <__mulsf3+0x5c>
     49c:	92 30       	cpi	r25, 0x02	; 2
     49e:	81 f4       	brne	.+32     	; 0x4c0 <__mulsf3+0x76>
     4a0:	89 eb       	ldi	r24, 0xB9	; 185
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	c6 c0       	rjmp	.+396    	; 0x632 <__mulsf3+0x1e8>
     4a6:	92 30       	cpi	r25, 0x02	; 2
     4a8:	49 f4       	brne	.+18     	; 0x4bc <__mulsf3+0x72>
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ae:	8a 89       	ldd	r24, Y+18	; 0x12
     4b0:	98 13       	cpse	r25, r24
     4b2:	21 e0       	ldi	r18, 0x01	; 1
     4b4:	2a 87       	std	Y+10, r18	; 0x0a
     4b6:	ce 01       	movw	r24, r28
     4b8:	09 96       	adiw	r24, 0x09	; 9
     4ba:	bb c0       	rjmp	.+374    	; 0x632 <__mulsf3+0x1e8>
     4bc:	82 30       	cpi	r24, 0x02	; 2
     4be:	49 f4       	brne	.+18     	; 0x4d2 <__mulsf3+0x88>
     4c0:	20 e0       	ldi	r18, 0x00	; 0
     4c2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4c4:	8a 89       	ldd	r24, Y+18	; 0x12
     4c6:	98 13       	cpse	r25, r24
     4c8:	21 e0       	ldi	r18, 0x01	; 1
     4ca:	2a 8b       	std	Y+18, r18	; 0x12
     4cc:	ce 01       	movw	r24, r28
     4ce:	41 96       	adiw	r24, 0x11	; 17
     4d0:	b0 c0       	rjmp	.+352    	; 0x632 <__mulsf3+0x1e8>
     4d2:	2d 84       	ldd	r2, Y+13	; 0x0d
     4d4:	3e 84       	ldd	r3, Y+14	; 0x0e
     4d6:	4f 84       	ldd	r4, Y+15	; 0x0f
     4d8:	58 88       	ldd	r5, Y+16	; 0x10
     4da:	6d 88       	ldd	r6, Y+21	; 0x15
     4dc:	7e 88       	ldd	r7, Y+22	; 0x16
     4de:	8f 88       	ldd	r8, Y+23	; 0x17
     4e0:	98 8c       	ldd	r9, Y+24	; 0x18
     4e2:	ee 24       	eor	r14, r14
     4e4:	ff 24       	eor	r15, r15
     4e6:	87 01       	movw	r16, r14
     4e8:	aa 24       	eor	r10, r10
     4ea:	bb 24       	eor	r11, r11
     4ec:	65 01       	movw	r12, r10
     4ee:	40 e0       	ldi	r20, 0x00	; 0
     4f0:	50 e0       	ldi	r21, 0x00	; 0
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	e0 e0       	ldi	r30, 0x00	; 0
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	c1 01       	movw	r24, r2
     4fc:	81 70       	andi	r24, 0x01	; 1
     4fe:	90 70       	andi	r25, 0x00	; 0
     500:	89 2b       	or	r24, r25
     502:	e9 f0       	breq	.+58     	; 0x53e <__mulsf3+0xf4>
     504:	e6 0c       	add	r14, r6
     506:	f7 1c       	adc	r15, r7
     508:	08 1d       	adc	r16, r8
     50a:	19 1d       	adc	r17, r9
     50c:	9a 01       	movw	r18, r20
     50e:	ab 01       	movw	r20, r22
     510:	2a 0d       	add	r18, r10
     512:	3b 1d       	adc	r19, r11
     514:	4c 1d       	adc	r20, r12
     516:	5d 1d       	adc	r21, r13
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	a0 e0       	ldi	r26, 0x00	; 0
     51e:	b0 e0       	ldi	r27, 0x00	; 0
     520:	e6 14       	cp	r14, r6
     522:	f7 04       	cpc	r15, r7
     524:	08 05       	cpc	r16, r8
     526:	19 05       	cpc	r17, r9
     528:	20 f4       	brcc	.+8      	; 0x532 <__mulsf3+0xe8>
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	a0 e0       	ldi	r26, 0x00	; 0
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	ba 01       	movw	r22, r20
     534:	a9 01       	movw	r20, r18
     536:	48 0f       	add	r20, r24
     538:	59 1f       	adc	r21, r25
     53a:	6a 1f       	adc	r22, r26
     53c:	7b 1f       	adc	r23, r27
     53e:	aa 0c       	add	r10, r10
     540:	bb 1c       	adc	r11, r11
     542:	cc 1c       	adc	r12, r12
     544:	dd 1c       	adc	r13, r13
     546:	97 fe       	sbrs	r9, 7
     548:	08 c0       	rjmp	.+16     	; 0x55a <__mulsf3+0x110>
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	a0 e0       	ldi	r26, 0x00	; 0
     550:	b0 e0       	ldi	r27, 0x00	; 0
     552:	a8 2a       	or	r10, r24
     554:	b9 2a       	or	r11, r25
     556:	ca 2a       	or	r12, r26
     558:	db 2a       	or	r13, r27
     55a:	31 96       	adiw	r30, 0x01	; 1
     55c:	e0 32       	cpi	r30, 0x20	; 32
     55e:	f1 05       	cpc	r31, r1
     560:	49 f0       	breq	.+18     	; 0x574 <__mulsf3+0x12a>
     562:	66 0c       	add	r6, r6
     564:	77 1c       	adc	r7, r7
     566:	88 1c       	adc	r8, r8
     568:	99 1c       	adc	r9, r9
     56a:	56 94       	lsr	r5
     56c:	47 94       	ror	r4
     56e:	37 94       	ror	r3
     570:	27 94       	ror	r2
     572:	c3 cf       	rjmp	.-122    	; 0x4fa <__mulsf3+0xb0>
     574:	fa 85       	ldd	r31, Y+10	; 0x0a
     576:	ea 89       	ldd	r30, Y+18	; 0x12
     578:	2b 89       	ldd	r18, Y+19	; 0x13
     57a:	3c 89       	ldd	r19, Y+20	; 0x14
     57c:	8b 85       	ldd	r24, Y+11	; 0x0b
     57e:	9c 85       	ldd	r25, Y+12	; 0x0c
     580:	28 0f       	add	r18, r24
     582:	39 1f       	adc	r19, r25
     584:	2e 5f       	subi	r18, 0xFE	; 254
     586:	3f 4f       	sbci	r19, 0xFF	; 255
     588:	17 c0       	rjmp	.+46     	; 0x5b8 <__mulsf3+0x16e>
     58a:	ca 01       	movw	r24, r20
     58c:	81 70       	andi	r24, 0x01	; 1
     58e:	90 70       	andi	r25, 0x00	; 0
     590:	89 2b       	or	r24, r25
     592:	61 f0       	breq	.+24     	; 0x5ac <__mulsf3+0x162>
     594:	16 95       	lsr	r17
     596:	07 95       	ror	r16
     598:	f7 94       	ror	r15
     59a:	e7 94       	ror	r14
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	a0 e0       	ldi	r26, 0x00	; 0
     5a2:	b0 e8       	ldi	r27, 0x80	; 128
     5a4:	e8 2a       	or	r14, r24
     5a6:	f9 2a       	or	r15, r25
     5a8:	0a 2b       	or	r16, r26
     5aa:	1b 2b       	or	r17, r27
     5ac:	76 95       	lsr	r23
     5ae:	67 95       	ror	r22
     5b0:	57 95       	ror	r21
     5b2:	47 95       	ror	r20
     5b4:	2f 5f       	subi	r18, 0xFF	; 255
     5b6:	3f 4f       	sbci	r19, 0xFF	; 255
     5b8:	77 fd       	sbrc	r23, 7
     5ba:	e7 cf       	rjmp	.-50     	; 0x58a <__mulsf3+0x140>
     5bc:	0c c0       	rjmp	.+24     	; 0x5d6 <__mulsf3+0x18c>
     5be:	44 0f       	add	r20, r20
     5c0:	55 1f       	adc	r21, r21
     5c2:	66 1f       	adc	r22, r22
     5c4:	77 1f       	adc	r23, r23
     5c6:	17 fd       	sbrc	r17, 7
     5c8:	41 60       	ori	r20, 0x01	; 1
     5ca:	ee 0c       	add	r14, r14
     5cc:	ff 1c       	adc	r15, r15
     5ce:	00 1f       	adc	r16, r16
     5d0:	11 1f       	adc	r17, r17
     5d2:	21 50       	subi	r18, 0x01	; 1
     5d4:	30 40       	sbci	r19, 0x00	; 0
     5d6:	40 30       	cpi	r20, 0x00	; 0
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	59 07       	cpc	r21, r25
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	69 07       	cpc	r22, r25
     5e0:	90 e4       	ldi	r25, 0x40	; 64
     5e2:	79 07       	cpc	r23, r25
     5e4:	60 f3       	brcs	.-40     	; 0x5be <__mulsf3+0x174>
     5e6:	2b 8f       	std	Y+27, r18	; 0x1b
     5e8:	3c 8f       	std	Y+28, r19	; 0x1c
     5ea:	db 01       	movw	r26, r22
     5ec:	ca 01       	movw	r24, r20
     5ee:	8f 77       	andi	r24, 0x7F	; 127
     5f0:	90 70       	andi	r25, 0x00	; 0
     5f2:	a0 70       	andi	r26, 0x00	; 0
     5f4:	b0 70       	andi	r27, 0x00	; 0
     5f6:	80 34       	cpi	r24, 0x40	; 64
     5f8:	91 05       	cpc	r25, r1
     5fa:	a1 05       	cpc	r26, r1
     5fc:	b1 05       	cpc	r27, r1
     5fe:	61 f4       	brne	.+24     	; 0x618 <__mulsf3+0x1ce>
     600:	47 fd       	sbrc	r20, 7
     602:	0a c0       	rjmp	.+20     	; 0x618 <__mulsf3+0x1ce>
     604:	e1 14       	cp	r14, r1
     606:	f1 04       	cpc	r15, r1
     608:	01 05       	cpc	r16, r1
     60a:	11 05       	cpc	r17, r1
     60c:	29 f0       	breq	.+10     	; 0x618 <__mulsf3+0x1ce>
     60e:	40 5c       	subi	r20, 0xC0	; 192
     610:	5f 4f       	sbci	r21, 0xFF	; 255
     612:	6f 4f       	sbci	r22, 0xFF	; 255
     614:	7f 4f       	sbci	r23, 0xFF	; 255
     616:	40 78       	andi	r20, 0x80	; 128
     618:	1a 8e       	std	Y+26, r1	; 0x1a
     61a:	fe 17       	cp	r31, r30
     61c:	11 f0       	breq	.+4      	; 0x622 <__mulsf3+0x1d8>
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	8a 8f       	std	Y+26, r24	; 0x1a
     622:	4d 8f       	std	Y+29, r20	; 0x1d
     624:	5e 8f       	std	Y+30, r21	; 0x1e
     626:	6f 8f       	std	Y+31, r22	; 0x1f
     628:	78 a3       	std	Y+32, r23	; 0x20
     62a:	83 e0       	ldi	r24, 0x03	; 3
     62c:	89 8f       	std	Y+25, r24	; 0x19
     62e:	ce 01       	movw	r24, r28
     630:	49 96       	adiw	r24, 0x19	; 25
     632:	0e 94 03 04 	call	0x806	; 0x806 <__pack_f>
     636:	a0 96       	adiw	r28, 0x20	; 32
     638:	e2 e1       	ldi	r30, 0x12	; 18
     63a:	0c 94 c5 18 	jmp	0x318a	; 0x318a <__epilogue_restores__>

0000063e <__gtsf2>:
     63e:	a8 e1       	ldi	r26, 0x18	; 24
     640:	b0 e0       	ldi	r27, 0x00	; 0
     642:	e5 e2       	ldi	r30, 0x25	; 37
     644:	f3 e0       	ldi	r31, 0x03	; 3
     646:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__prologue_saves__+0x18>
     64a:	69 83       	std	Y+1, r22	; 0x01
     64c:	7a 83       	std	Y+2, r23	; 0x02
     64e:	8b 83       	std	Y+3, r24	; 0x03
     650:	9c 83       	std	Y+4, r25	; 0x04
     652:	2d 83       	std	Y+5, r18	; 0x05
     654:	3e 83       	std	Y+6, r19	; 0x06
     656:	4f 83       	std	Y+7, r20	; 0x07
     658:	58 87       	std	Y+8, r21	; 0x08
     65a:	89 e0       	ldi	r24, 0x09	; 9
     65c:	e8 2e       	mov	r14, r24
     65e:	f1 2c       	mov	r15, r1
     660:	ec 0e       	add	r14, r28
     662:	fd 1e       	adc	r15, r29
     664:	ce 01       	movw	r24, r28
     666:	01 96       	adiw	r24, 0x01	; 1
     668:	b7 01       	movw	r22, r14
     66a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__unpack_f>
     66e:	8e 01       	movw	r16, r28
     670:	0f 5e       	subi	r16, 0xEF	; 239
     672:	1f 4f       	sbci	r17, 0xFF	; 255
     674:	ce 01       	movw	r24, r28
     676:	05 96       	adiw	r24, 0x05	; 5
     678:	b8 01       	movw	r22, r16
     67a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__unpack_f>
     67e:	89 85       	ldd	r24, Y+9	; 0x09
     680:	82 30       	cpi	r24, 0x02	; 2
     682:	40 f0       	brcs	.+16     	; 0x694 <__gtsf2+0x56>
     684:	89 89       	ldd	r24, Y+17	; 0x11
     686:	82 30       	cpi	r24, 0x02	; 2
     688:	28 f0       	brcs	.+10     	; 0x694 <__gtsf2+0x56>
     68a:	c7 01       	movw	r24, r14
     68c:	b8 01       	movw	r22, r16
     68e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__fpcmp_parts_f>
     692:	01 c0       	rjmp	.+2      	; 0x696 <__gtsf2+0x58>
     694:	8f ef       	ldi	r24, 0xFF	; 255
     696:	68 96       	adiw	r28, 0x18	; 24
     698:	e6 e0       	ldi	r30, 0x06	; 6
     69a:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__epilogue_restores__+0x18>

0000069e <__gesf2>:
     69e:	a8 e1       	ldi	r26, 0x18	; 24
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	e5 e5       	ldi	r30, 0x55	; 85
     6a4:	f3 e0       	ldi	r31, 0x03	; 3
     6a6:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__prologue_saves__+0x18>
     6aa:	69 83       	std	Y+1, r22	; 0x01
     6ac:	7a 83       	std	Y+2, r23	; 0x02
     6ae:	8b 83       	std	Y+3, r24	; 0x03
     6b0:	9c 83       	std	Y+4, r25	; 0x04
     6b2:	2d 83       	std	Y+5, r18	; 0x05
     6b4:	3e 83       	std	Y+6, r19	; 0x06
     6b6:	4f 83       	std	Y+7, r20	; 0x07
     6b8:	58 87       	std	Y+8, r21	; 0x08
     6ba:	89 e0       	ldi	r24, 0x09	; 9
     6bc:	e8 2e       	mov	r14, r24
     6be:	f1 2c       	mov	r15, r1
     6c0:	ec 0e       	add	r14, r28
     6c2:	fd 1e       	adc	r15, r29
     6c4:	ce 01       	movw	r24, r28
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	b7 01       	movw	r22, r14
     6ca:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__unpack_f>
     6ce:	8e 01       	movw	r16, r28
     6d0:	0f 5e       	subi	r16, 0xEF	; 239
     6d2:	1f 4f       	sbci	r17, 0xFF	; 255
     6d4:	ce 01       	movw	r24, r28
     6d6:	05 96       	adiw	r24, 0x05	; 5
     6d8:	b8 01       	movw	r22, r16
     6da:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__unpack_f>
     6de:	89 85       	ldd	r24, Y+9	; 0x09
     6e0:	82 30       	cpi	r24, 0x02	; 2
     6e2:	40 f0       	brcs	.+16     	; 0x6f4 <__gesf2+0x56>
     6e4:	89 89       	ldd	r24, Y+17	; 0x11
     6e6:	82 30       	cpi	r24, 0x02	; 2
     6e8:	28 f0       	brcs	.+10     	; 0x6f4 <__gesf2+0x56>
     6ea:	c7 01       	movw	r24, r14
     6ec:	b8 01       	movw	r22, r16
     6ee:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__fpcmp_parts_f>
     6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <__gesf2+0x58>
     6f4:	8f ef       	ldi	r24, 0xFF	; 255
     6f6:	68 96       	adiw	r28, 0x18	; 24
     6f8:	e6 e0       	ldi	r30, 0x06	; 6
     6fa:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__epilogue_restores__+0x18>

000006fe <__ltsf2>:
     6fe:	a8 e1       	ldi	r26, 0x18	; 24
     700:	b0 e0       	ldi	r27, 0x00	; 0
     702:	e5 e8       	ldi	r30, 0x85	; 133
     704:	f3 e0       	ldi	r31, 0x03	; 3
     706:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__prologue_saves__+0x18>
     70a:	69 83       	std	Y+1, r22	; 0x01
     70c:	7a 83       	std	Y+2, r23	; 0x02
     70e:	8b 83       	std	Y+3, r24	; 0x03
     710:	9c 83       	std	Y+4, r25	; 0x04
     712:	2d 83       	std	Y+5, r18	; 0x05
     714:	3e 83       	std	Y+6, r19	; 0x06
     716:	4f 83       	std	Y+7, r20	; 0x07
     718:	58 87       	std	Y+8, r21	; 0x08
     71a:	89 e0       	ldi	r24, 0x09	; 9
     71c:	e8 2e       	mov	r14, r24
     71e:	f1 2c       	mov	r15, r1
     720:	ec 0e       	add	r14, r28
     722:	fd 1e       	adc	r15, r29
     724:	ce 01       	movw	r24, r28
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	b7 01       	movw	r22, r14
     72a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__unpack_f>
     72e:	8e 01       	movw	r16, r28
     730:	0f 5e       	subi	r16, 0xEF	; 239
     732:	1f 4f       	sbci	r17, 0xFF	; 255
     734:	ce 01       	movw	r24, r28
     736:	05 96       	adiw	r24, 0x05	; 5
     738:	b8 01       	movw	r22, r16
     73a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__unpack_f>
     73e:	89 85       	ldd	r24, Y+9	; 0x09
     740:	82 30       	cpi	r24, 0x02	; 2
     742:	40 f0       	brcs	.+16     	; 0x754 <__ltsf2+0x56>
     744:	89 89       	ldd	r24, Y+17	; 0x11
     746:	82 30       	cpi	r24, 0x02	; 2
     748:	28 f0       	brcs	.+10     	; 0x754 <__ltsf2+0x56>
     74a:	c7 01       	movw	r24, r14
     74c:	b8 01       	movw	r22, r16
     74e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__fpcmp_parts_f>
     752:	01 c0       	rjmp	.+2      	; 0x756 <__ltsf2+0x58>
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	68 96       	adiw	r28, 0x18	; 24
     758:	e6 e0       	ldi	r30, 0x06	; 6
     75a:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__epilogue_restores__+0x18>

0000075e <__fixsfsi>:
     75e:	ac e0       	ldi	r26, 0x0C	; 12
     760:	b0 e0       	ldi	r27, 0x00	; 0
     762:	e5 eb       	ldi	r30, 0xB5	; 181
     764:	f3 e0       	ldi	r31, 0x03	; 3
     766:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <__prologue_saves__+0x20>
     76a:	69 83       	std	Y+1, r22	; 0x01
     76c:	7a 83       	std	Y+2, r23	; 0x02
     76e:	8b 83       	std	Y+3, r24	; 0x03
     770:	9c 83       	std	Y+4, r25	; 0x04
     772:	ce 01       	movw	r24, r28
     774:	01 96       	adiw	r24, 0x01	; 1
     776:	be 01       	movw	r22, r28
     778:	6b 5f       	subi	r22, 0xFB	; 251
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__unpack_f>
     780:	8d 81       	ldd	r24, Y+5	; 0x05
     782:	82 30       	cpi	r24, 0x02	; 2
     784:	61 f1       	breq	.+88     	; 0x7de <__fixsfsi+0x80>
     786:	82 30       	cpi	r24, 0x02	; 2
     788:	50 f1       	brcs	.+84     	; 0x7de <__fixsfsi+0x80>
     78a:	84 30       	cpi	r24, 0x04	; 4
     78c:	21 f4       	brne	.+8      	; 0x796 <__fixsfsi+0x38>
     78e:	8e 81       	ldd	r24, Y+6	; 0x06
     790:	88 23       	and	r24, r24
     792:	51 f1       	breq	.+84     	; 0x7e8 <__fixsfsi+0x8a>
     794:	2e c0       	rjmp	.+92     	; 0x7f2 <__fixsfsi+0x94>
     796:	2f 81       	ldd	r18, Y+7	; 0x07
     798:	38 85       	ldd	r19, Y+8	; 0x08
     79a:	37 fd       	sbrc	r19, 7
     79c:	20 c0       	rjmp	.+64     	; 0x7de <__fixsfsi+0x80>
     79e:	6e 81       	ldd	r22, Y+6	; 0x06
     7a0:	2f 31       	cpi	r18, 0x1F	; 31
     7a2:	31 05       	cpc	r19, r1
     7a4:	1c f0       	brlt	.+6      	; 0x7ac <__fixsfsi+0x4e>
     7a6:	66 23       	and	r22, r22
     7a8:	f9 f0       	breq	.+62     	; 0x7e8 <__fixsfsi+0x8a>
     7aa:	23 c0       	rjmp	.+70     	; 0x7f2 <__fixsfsi+0x94>
     7ac:	8e e1       	ldi	r24, 0x1E	; 30
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	82 1b       	sub	r24, r18
     7b2:	93 0b       	sbc	r25, r19
     7b4:	29 85       	ldd	r18, Y+9	; 0x09
     7b6:	3a 85       	ldd	r19, Y+10	; 0x0a
     7b8:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ba:	5c 85       	ldd	r21, Y+12	; 0x0c
     7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <__fixsfsi+0x68>
     7be:	56 95       	lsr	r21
     7c0:	47 95       	ror	r20
     7c2:	37 95       	ror	r19
     7c4:	27 95       	ror	r18
     7c6:	8a 95       	dec	r24
     7c8:	d2 f7       	brpl	.-12     	; 0x7be <__fixsfsi+0x60>
     7ca:	66 23       	and	r22, r22
     7cc:	b1 f0       	breq	.+44     	; 0x7fa <__fixsfsi+0x9c>
     7ce:	50 95       	com	r21
     7d0:	40 95       	com	r20
     7d2:	30 95       	com	r19
     7d4:	21 95       	neg	r18
     7d6:	3f 4f       	sbci	r19, 0xFF	; 255
     7d8:	4f 4f       	sbci	r20, 0xFF	; 255
     7da:	5f 4f       	sbci	r21, 0xFF	; 255
     7dc:	0e c0       	rjmp	.+28     	; 0x7fa <__fixsfsi+0x9c>
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	40 e0       	ldi	r20, 0x00	; 0
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	09 c0       	rjmp	.+18     	; 0x7fa <__fixsfsi+0x9c>
     7e8:	2f ef       	ldi	r18, 0xFF	; 255
     7ea:	3f ef       	ldi	r19, 0xFF	; 255
     7ec:	4f ef       	ldi	r20, 0xFF	; 255
     7ee:	5f e7       	ldi	r21, 0x7F	; 127
     7f0:	04 c0       	rjmp	.+8      	; 0x7fa <__fixsfsi+0x9c>
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e8       	ldi	r21, 0x80	; 128
     7fa:	b9 01       	movw	r22, r18
     7fc:	ca 01       	movw	r24, r20
     7fe:	2c 96       	adiw	r28, 0x0c	; 12
     800:	e2 e0       	ldi	r30, 0x02	; 2
     802:	0c 94 d5 18 	jmp	0x31aa	; 0x31aa <__epilogue_restores__+0x20>

00000806 <__pack_f>:
     806:	df 92       	push	r13
     808:	ef 92       	push	r14
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	fc 01       	movw	r30, r24
     812:	e4 80       	ldd	r14, Z+4	; 0x04
     814:	f5 80       	ldd	r15, Z+5	; 0x05
     816:	06 81       	ldd	r16, Z+6	; 0x06
     818:	17 81       	ldd	r17, Z+7	; 0x07
     81a:	d1 80       	ldd	r13, Z+1	; 0x01
     81c:	80 81       	ld	r24, Z
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	48 f4       	brcc	.+18     	; 0x834 <__pack_f+0x2e>
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	a0 e1       	ldi	r26, 0x10	; 16
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	e8 2a       	or	r14, r24
     82c:	f9 2a       	or	r15, r25
     82e:	0a 2b       	or	r16, r26
     830:	1b 2b       	or	r17, r27
     832:	a5 c0       	rjmp	.+330    	; 0x97e <__stack+0x11f>
     834:	84 30       	cpi	r24, 0x04	; 4
     836:	09 f4       	brne	.+2      	; 0x83a <__pack_f+0x34>
     838:	9f c0       	rjmp	.+318    	; 0x978 <__stack+0x119>
     83a:	82 30       	cpi	r24, 0x02	; 2
     83c:	21 f4       	brne	.+8      	; 0x846 <__pack_f+0x40>
     83e:	ee 24       	eor	r14, r14
     840:	ff 24       	eor	r15, r15
     842:	87 01       	movw	r16, r14
     844:	05 c0       	rjmp	.+10     	; 0x850 <__pack_f+0x4a>
     846:	e1 14       	cp	r14, r1
     848:	f1 04       	cpc	r15, r1
     84a:	01 05       	cpc	r16, r1
     84c:	11 05       	cpc	r17, r1
     84e:	19 f4       	brne	.+6      	; 0x856 <__pack_f+0x50>
     850:	e0 e0       	ldi	r30, 0x00	; 0
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	96 c0       	rjmp	.+300    	; 0x982 <__stack+0x123>
     856:	62 81       	ldd	r22, Z+2	; 0x02
     858:	73 81       	ldd	r23, Z+3	; 0x03
     85a:	9f ef       	ldi	r25, 0xFF	; 255
     85c:	62 38       	cpi	r22, 0x82	; 130
     85e:	79 07       	cpc	r23, r25
     860:	0c f0       	brlt	.+2      	; 0x864 <__stack+0x5>
     862:	5b c0       	rjmp	.+182    	; 0x91a <__stack+0xbb>
     864:	22 e8       	ldi	r18, 0x82	; 130
     866:	3f ef       	ldi	r19, 0xFF	; 255
     868:	26 1b       	sub	r18, r22
     86a:	37 0b       	sbc	r19, r23
     86c:	2a 31       	cpi	r18, 0x1A	; 26
     86e:	31 05       	cpc	r19, r1
     870:	2c f0       	brlt	.+10     	; 0x87c <__stack+0x1d>
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	40 e0       	ldi	r20, 0x00	; 0
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	2a c0       	rjmp	.+84     	; 0x8d0 <__stack+0x71>
     87c:	b8 01       	movw	r22, r16
     87e:	a7 01       	movw	r20, r14
     880:	02 2e       	mov	r0, r18
     882:	04 c0       	rjmp	.+8      	; 0x88c <__stack+0x2d>
     884:	76 95       	lsr	r23
     886:	67 95       	ror	r22
     888:	57 95       	ror	r21
     88a:	47 95       	ror	r20
     88c:	0a 94       	dec	r0
     88e:	d2 f7       	brpl	.-12     	; 0x884 <__stack+0x25>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	a0 e0       	ldi	r26, 0x00	; 0
     896:	b0 e0       	ldi	r27, 0x00	; 0
     898:	04 c0       	rjmp	.+8      	; 0x8a2 <__stack+0x43>
     89a:	88 0f       	add	r24, r24
     89c:	99 1f       	adc	r25, r25
     89e:	aa 1f       	adc	r26, r26
     8a0:	bb 1f       	adc	r27, r27
     8a2:	2a 95       	dec	r18
     8a4:	d2 f7       	brpl	.-12     	; 0x89a <__stack+0x3b>
     8a6:	01 97       	sbiw	r24, 0x01	; 1
     8a8:	a1 09       	sbc	r26, r1
     8aa:	b1 09       	sbc	r27, r1
     8ac:	8e 21       	and	r24, r14
     8ae:	9f 21       	and	r25, r15
     8b0:	a0 23       	and	r26, r16
     8b2:	b1 23       	and	r27, r17
     8b4:	00 97       	sbiw	r24, 0x00	; 0
     8b6:	a1 05       	cpc	r26, r1
     8b8:	b1 05       	cpc	r27, r1
     8ba:	21 f0       	breq	.+8      	; 0x8c4 <__stack+0x65>
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	a0 e0       	ldi	r26, 0x00	; 0
     8c2:	b0 e0       	ldi	r27, 0x00	; 0
     8c4:	9a 01       	movw	r18, r20
     8c6:	ab 01       	movw	r20, r22
     8c8:	28 2b       	or	r18, r24
     8ca:	39 2b       	or	r19, r25
     8cc:	4a 2b       	or	r20, r26
     8ce:	5b 2b       	or	r21, r27
     8d0:	da 01       	movw	r26, r20
     8d2:	c9 01       	movw	r24, r18
     8d4:	8f 77       	andi	r24, 0x7F	; 127
     8d6:	90 70       	andi	r25, 0x00	; 0
     8d8:	a0 70       	andi	r26, 0x00	; 0
     8da:	b0 70       	andi	r27, 0x00	; 0
     8dc:	80 34       	cpi	r24, 0x40	; 64
     8de:	91 05       	cpc	r25, r1
     8e0:	a1 05       	cpc	r26, r1
     8e2:	b1 05       	cpc	r27, r1
     8e4:	39 f4       	brne	.+14     	; 0x8f4 <__stack+0x95>
     8e6:	27 ff       	sbrs	r18, 7
     8e8:	09 c0       	rjmp	.+18     	; 0x8fc <__stack+0x9d>
     8ea:	20 5c       	subi	r18, 0xC0	; 192
     8ec:	3f 4f       	sbci	r19, 0xFF	; 255
     8ee:	4f 4f       	sbci	r20, 0xFF	; 255
     8f0:	5f 4f       	sbci	r21, 0xFF	; 255
     8f2:	04 c0       	rjmp	.+8      	; 0x8fc <__stack+0x9d>
     8f4:	21 5c       	subi	r18, 0xC1	; 193
     8f6:	3f 4f       	sbci	r19, 0xFF	; 255
     8f8:	4f 4f       	sbci	r20, 0xFF	; 255
     8fa:	5f 4f       	sbci	r21, 0xFF	; 255
     8fc:	e0 e0       	ldi	r30, 0x00	; 0
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	20 30       	cpi	r18, 0x00	; 0
     902:	a0 e0       	ldi	r26, 0x00	; 0
     904:	3a 07       	cpc	r19, r26
     906:	a0 e0       	ldi	r26, 0x00	; 0
     908:	4a 07       	cpc	r20, r26
     90a:	a0 e4       	ldi	r26, 0x40	; 64
     90c:	5a 07       	cpc	r21, r26
     90e:	10 f0       	brcs	.+4      	; 0x914 <__stack+0xb5>
     910:	e1 e0       	ldi	r30, 0x01	; 1
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	79 01       	movw	r14, r18
     916:	8a 01       	movw	r16, r20
     918:	27 c0       	rjmp	.+78     	; 0x968 <__stack+0x109>
     91a:	60 38       	cpi	r22, 0x80	; 128
     91c:	71 05       	cpc	r23, r1
     91e:	64 f5       	brge	.+88     	; 0x978 <__stack+0x119>
     920:	fb 01       	movw	r30, r22
     922:	e1 58       	subi	r30, 0x81	; 129
     924:	ff 4f       	sbci	r31, 0xFF	; 255
     926:	d8 01       	movw	r26, r16
     928:	c7 01       	movw	r24, r14
     92a:	8f 77       	andi	r24, 0x7F	; 127
     92c:	90 70       	andi	r25, 0x00	; 0
     92e:	a0 70       	andi	r26, 0x00	; 0
     930:	b0 70       	andi	r27, 0x00	; 0
     932:	80 34       	cpi	r24, 0x40	; 64
     934:	91 05       	cpc	r25, r1
     936:	a1 05       	cpc	r26, r1
     938:	b1 05       	cpc	r27, r1
     93a:	39 f4       	brne	.+14     	; 0x94a <__stack+0xeb>
     93c:	e7 fe       	sbrs	r14, 7
     93e:	0d c0       	rjmp	.+26     	; 0x95a <__stack+0xfb>
     940:	80 e4       	ldi	r24, 0x40	; 64
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	a0 e0       	ldi	r26, 0x00	; 0
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	04 c0       	rjmp	.+8      	; 0x952 <__stack+0xf3>
     94a:	8f e3       	ldi	r24, 0x3F	; 63
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	a0 e0       	ldi	r26, 0x00	; 0
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	e8 0e       	add	r14, r24
     954:	f9 1e       	adc	r15, r25
     956:	0a 1f       	adc	r16, r26
     958:	1b 1f       	adc	r17, r27
     95a:	17 ff       	sbrs	r17, 7
     95c:	05 c0       	rjmp	.+10     	; 0x968 <__stack+0x109>
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	31 96       	adiw	r30, 0x01	; 1
     968:	87 e0       	ldi	r24, 0x07	; 7
     96a:	16 95       	lsr	r17
     96c:	07 95       	ror	r16
     96e:	f7 94       	ror	r15
     970:	e7 94       	ror	r14
     972:	8a 95       	dec	r24
     974:	d1 f7       	brne	.-12     	; 0x96a <__stack+0x10b>
     976:	05 c0       	rjmp	.+10     	; 0x982 <__stack+0x123>
     978:	ee 24       	eor	r14, r14
     97a:	ff 24       	eor	r15, r15
     97c:	87 01       	movw	r16, r14
     97e:	ef ef       	ldi	r30, 0xFF	; 255
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	6e 2f       	mov	r22, r30
     984:	67 95       	ror	r22
     986:	66 27       	eor	r22, r22
     988:	67 95       	ror	r22
     98a:	90 2f       	mov	r25, r16
     98c:	9f 77       	andi	r25, 0x7F	; 127
     98e:	d7 94       	ror	r13
     990:	dd 24       	eor	r13, r13
     992:	d7 94       	ror	r13
     994:	8e 2f       	mov	r24, r30
     996:	86 95       	lsr	r24
     998:	49 2f       	mov	r20, r25
     99a:	46 2b       	or	r20, r22
     99c:	58 2f       	mov	r21, r24
     99e:	5d 29       	or	r21, r13
     9a0:	b7 01       	movw	r22, r14
     9a2:	ca 01       	movw	r24, r20
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	df 90       	pop	r13
     9ae:	08 95       	ret

000009b0 <__unpack_f>:
     9b0:	fc 01       	movw	r30, r24
     9b2:	db 01       	movw	r26, r22
     9b4:	40 81       	ld	r20, Z
     9b6:	51 81       	ldd	r21, Z+1	; 0x01
     9b8:	22 81       	ldd	r18, Z+2	; 0x02
     9ba:	62 2f       	mov	r22, r18
     9bc:	6f 77       	andi	r22, 0x7F	; 127
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	22 1f       	adc	r18, r18
     9c2:	22 27       	eor	r18, r18
     9c4:	22 1f       	adc	r18, r18
     9c6:	93 81       	ldd	r25, Z+3	; 0x03
     9c8:	89 2f       	mov	r24, r25
     9ca:	88 0f       	add	r24, r24
     9cc:	82 2b       	or	r24, r18
     9ce:	28 2f       	mov	r18, r24
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	99 1f       	adc	r25, r25
     9d4:	99 27       	eor	r25, r25
     9d6:	99 1f       	adc	r25, r25
     9d8:	11 96       	adiw	r26, 0x01	; 1
     9da:	9c 93       	st	X, r25
     9dc:	11 97       	sbiw	r26, 0x01	; 1
     9de:	21 15       	cp	r18, r1
     9e0:	31 05       	cpc	r19, r1
     9e2:	a9 f5       	brne	.+106    	; 0xa4e <__unpack_f+0x9e>
     9e4:	41 15       	cp	r20, r1
     9e6:	51 05       	cpc	r21, r1
     9e8:	61 05       	cpc	r22, r1
     9ea:	71 05       	cpc	r23, r1
     9ec:	11 f4       	brne	.+4      	; 0x9f2 <__unpack_f+0x42>
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	37 c0       	rjmp	.+110    	; 0xa60 <__unpack_f+0xb0>
     9f2:	82 e8       	ldi	r24, 0x82	; 130
     9f4:	9f ef       	ldi	r25, 0xFF	; 255
     9f6:	13 96       	adiw	r26, 0x03	; 3
     9f8:	9c 93       	st	X, r25
     9fa:	8e 93       	st	-X, r24
     9fc:	12 97       	sbiw	r26, 0x02	; 2
     9fe:	9a 01       	movw	r18, r20
     a00:	ab 01       	movw	r20, r22
     a02:	67 e0       	ldi	r22, 0x07	; 7
     a04:	22 0f       	add	r18, r18
     a06:	33 1f       	adc	r19, r19
     a08:	44 1f       	adc	r20, r20
     a0a:	55 1f       	adc	r21, r21
     a0c:	6a 95       	dec	r22
     a0e:	d1 f7       	brne	.-12     	; 0xa04 <__unpack_f+0x54>
     a10:	83 e0       	ldi	r24, 0x03	; 3
     a12:	8c 93       	st	X, r24
     a14:	0d c0       	rjmp	.+26     	; 0xa30 <__unpack_f+0x80>
     a16:	22 0f       	add	r18, r18
     a18:	33 1f       	adc	r19, r19
     a1a:	44 1f       	adc	r20, r20
     a1c:	55 1f       	adc	r21, r21
     a1e:	12 96       	adiw	r26, 0x02	; 2
     a20:	8d 91       	ld	r24, X+
     a22:	9c 91       	ld	r25, X
     a24:	13 97       	sbiw	r26, 0x03	; 3
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	13 96       	adiw	r26, 0x03	; 3
     a2a:	9c 93       	st	X, r25
     a2c:	8e 93       	st	-X, r24
     a2e:	12 97       	sbiw	r26, 0x02	; 2
     a30:	20 30       	cpi	r18, 0x00	; 0
     a32:	80 e0       	ldi	r24, 0x00	; 0
     a34:	38 07       	cpc	r19, r24
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	48 07       	cpc	r20, r24
     a3a:	80 e4       	ldi	r24, 0x40	; 64
     a3c:	58 07       	cpc	r21, r24
     a3e:	58 f3       	brcs	.-42     	; 0xa16 <__unpack_f+0x66>
     a40:	14 96       	adiw	r26, 0x04	; 4
     a42:	2d 93       	st	X+, r18
     a44:	3d 93       	st	X+, r19
     a46:	4d 93       	st	X+, r20
     a48:	5c 93       	st	X, r21
     a4a:	17 97       	sbiw	r26, 0x07	; 7
     a4c:	08 95       	ret
     a4e:	2f 3f       	cpi	r18, 0xFF	; 255
     a50:	31 05       	cpc	r19, r1
     a52:	79 f4       	brne	.+30     	; 0xa72 <__unpack_f+0xc2>
     a54:	41 15       	cp	r20, r1
     a56:	51 05       	cpc	r21, r1
     a58:	61 05       	cpc	r22, r1
     a5a:	71 05       	cpc	r23, r1
     a5c:	19 f4       	brne	.+6      	; 0xa64 <__unpack_f+0xb4>
     a5e:	84 e0       	ldi	r24, 0x04	; 4
     a60:	8c 93       	st	X, r24
     a62:	08 95       	ret
     a64:	64 ff       	sbrs	r22, 4
     a66:	03 c0       	rjmp	.+6      	; 0xa6e <__unpack_f+0xbe>
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	8c 93       	st	X, r24
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__unpack_f+0xe2>
     a6e:	1c 92       	st	X, r1
     a70:	10 c0       	rjmp	.+32     	; 0xa92 <__unpack_f+0xe2>
     a72:	2f 57       	subi	r18, 0x7F	; 127
     a74:	30 40       	sbci	r19, 0x00	; 0
     a76:	13 96       	adiw	r26, 0x03	; 3
     a78:	3c 93       	st	X, r19
     a7a:	2e 93       	st	-X, r18
     a7c:	12 97       	sbiw	r26, 0x02	; 2
     a7e:	83 e0       	ldi	r24, 0x03	; 3
     a80:	8c 93       	st	X, r24
     a82:	87 e0       	ldi	r24, 0x07	; 7
     a84:	44 0f       	add	r20, r20
     a86:	55 1f       	adc	r21, r21
     a88:	66 1f       	adc	r22, r22
     a8a:	77 1f       	adc	r23, r23
     a8c:	8a 95       	dec	r24
     a8e:	d1 f7       	brne	.-12     	; 0xa84 <__unpack_f+0xd4>
     a90:	70 64       	ori	r23, 0x40	; 64
     a92:	14 96       	adiw	r26, 0x04	; 4
     a94:	4d 93       	st	X+, r20
     a96:	5d 93       	st	X+, r21
     a98:	6d 93       	st	X+, r22
     a9a:	7c 93       	st	X, r23
     a9c:	17 97       	sbiw	r26, 0x07	; 7
     a9e:	08 95       	ret

00000aa0 <__fpcmp_parts_f>:
     aa0:	1f 93       	push	r17
     aa2:	dc 01       	movw	r26, r24
     aa4:	fb 01       	movw	r30, r22
     aa6:	9c 91       	ld	r25, X
     aa8:	92 30       	cpi	r25, 0x02	; 2
     aaa:	08 f4       	brcc	.+2      	; 0xaae <__fpcmp_parts_f+0xe>
     aac:	47 c0       	rjmp	.+142    	; 0xb3c <__fpcmp_parts_f+0x9c>
     aae:	80 81       	ld	r24, Z
     ab0:	82 30       	cpi	r24, 0x02	; 2
     ab2:	08 f4       	brcc	.+2      	; 0xab6 <__fpcmp_parts_f+0x16>
     ab4:	43 c0       	rjmp	.+134    	; 0xb3c <__fpcmp_parts_f+0x9c>
     ab6:	94 30       	cpi	r25, 0x04	; 4
     ab8:	51 f4       	brne	.+20     	; 0xace <__fpcmp_parts_f+0x2e>
     aba:	11 96       	adiw	r26, 0x01	; 1
     abc:	1c 91       	ld	r17, X
     abe:	84 30       	cpi	r24, 0x04	; 4
     ac0:	99 f5       	brne	.+102    	; 0xb28 <__fpcmp_parts_f+0x88>
     ac2:	81 81       	ldd	r24, Z+1	; 0x01
     ac4:	68 2f       	mov	r22, r24
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	61 1b       	sub	r22, r17
     aca:	71 09       	sbc	r23, r1
     acc:	3f c0       	rjmp	.+126    	; 0xb4c <__fpcmp_parts_f+0xac>
     ace:	84 30       	cpi	r24, 0x04	; 4
     ad0:	21 f0       	breq	.+8      	; 0xada <__fpcmp_parts_f+0x3a>
     ad2:	92 30       	cpi	r25, 0x02	; 2
     ad4:	31 f4       	brne	.+12     	; 0xae2 <__fpcmp_parts_f+0x42>
     ad6:	82 30       	cpi	r24, 0x02	; 2
     ad8:	b9 f1       	breq	.+110    	; 0xb48 <__fpcmp_parts_f+0xa8>
     ada:	81 81       	ldd	r24, Z+1	; 0x01
     adc:	88 23       	and	r24, r24
     ade:	89 f1       	breq	.+98     	; 0xb42 <__fpcmp_parts_f+0xa2>
     ae0:	2d c0       	rjmp	.+90     	; 0xb3c <__fpcmp_parts_f+0x9c>
     ae2:	11 96       	adiw	r26, 0x01	; 1
     ae4:	1c 91       	ld	r17, X
     ae6:	11 97       	sbiw	r26, 0x01	; 1
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	f1 f0       	breq	.+60     	; 0xb28 <__fpcmp_parts_f+0x88>
     aec:	81 81       	ldd	r24, Z+1	; 0x01
     aee:	18 17       	cp	r17, r24
     af0:	d9 f4       	brne	.+54     	; 0xb28 <__fpcmp_parts_f+0x88>
     af2:	12 96       	adiw	r26, 0x02	; 2
     af4:	2d 91       	ld	r18, X+
     af6:	3c 91       	ld	r19, X
     af8:	13 97       	sbiw	r26, 0x03	; 3
     afa:	82 81       	ldd	r24, Z+2	; 0x02
     afc:	93 81       	ldd	r25, Z+3	; 0x03
     afe:	82 17       	cp	r24, r18
     b00:	93 07       	cpc	r25, r19
     b02:	94 f0       	brlt	.+36     	; 0xb28 <__fpcmp_parts_f+0x88>
     b04:	28 17       	cp	r18, r24
     b06:	39 07       	cpc	r19, r25
     b08:	bc f0       	brlt	.+46     	; 0xb38 <__fpcmp_parts_f+0x98>
     b0a:	14 96       	adiw	r26, 0x04	; 4
     b0c:	8d 91       	ld	r24, X+
     b0e:	9d 91       	ld	r25, X+
     b10:	0d 90       	ld	r0, X+
     b12:	bc 91       	ld	r27, X
     b14:	a0 2d       	mov	r26, r0
     b16:	24 81       	ldd	r18, Z+4	; 0x04
     b18:	35 81       	ldd	r19, Z+5	; 0x05
     b1a:	46 81       	ldd	r20, Z+6	; 0x06
     b1c:	57 81       	ldd	r21, Z+7	; 0x07
     b1e:	28 17       	cp	r18, r24
     b20:	39 07       	cpc	r19, r25
     b22:	4a 07       	cpc	r20, r26
     b24:	5b 07       	cpc	r21, r27
     b26:	18 f4       	brcc	.+6      	; 0xb2e <__fpcmp_parts_f+0x8e>
     b28:	11 23       	and	r17, r17
     b2a:	41 f0       	breq	.+16     	; 0xb3c <__fpcmp_parts_f+0x9c>
     b2c:	0a c0       	rjmp	.+20     	; 0xb42 <__fpcmp_parts_f+0xa2>
     b2e:	82 17       	cp	r24, r18
     b30:	93 07       	cpc	r25, r19
     b32:	a4 07       	cpc	r26, r20
     b34:	b5 07       	cpc	r27, r21
     b36:	40 f4       	brcc	.+16     	; 0xb48 <__fpcmp_parts_f+0xa8>
     b38:	11 23       	and	r17, r17
     b3a:	19 f0       	breq	.+6      	; 0xb42 <__fpcmp_parts_f+0xa2>
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	05 c0       	rjmp	.+10     	; 0xb4c <__fpcmp_parts_f+0xac>
     b42:	6f ef       	ldi	r22, 0xFF	; 255
     b44:	7f ef       	ldi	r23, 0xFF	; 255
     b46:	02 c0       	rjmp	.+4      	; 0xb4c <__fpcmp_parts_f+0xac>
     b48:	60 e0       	ldi	r22, 0x00	; 0
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	cb 01       	movw	r24, r22
     b4e:	1f 91       	pop	r17
     b50:	08 95       	ret

00000b52 <CLCD_voidCommand>:
#include "config.h"



void CLCD_voidCommand(u8int_t copy_u8Command)
{
     b52:	df 93       	push	r29
     b54:	cf 93       	push	r28
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	e9 97       	sbiw	r28, 0x39	; 57
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	cd bf       	out	0x3d, r28	; 61
     b66:	89 af       	std	Y+57, r24	; 0x39
	/*Set RS pin low for command*/
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,PIN_LOW);
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	63 e0       	ldi	r22, 0x03	; 3
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
	/*Set RW pin Low to write*/
	//DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN ,PIN_LOW);

	/*Send command to data pins */
	DIO_SetPinValue(PORT_B,PIN_0,GET_BIT(copy_u8Command,4));
     b72:	89 ad       	ldd	r24, Y+57	; 0x39
     b74:	82 95       	swap	r24
     b76:	8f 70       	andi	r24, 0x0F	; 15
     b78:	98 2f       	mov	r25, r24
     b7a:	91 70       	andi	r25, 0x01	; 1
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	49 2f       	mov	r20, r25
     b82:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_1,GET_BIT(copy_u8Command,5));
     b86:	89 ad       	ldd	r24, Y+57	; 0x39
     b88:	82 95       	swap	r24
     b8a:	86 95       	lsr	r24
     b8c:	87 70       	andi	r24, 0x07	; 7
     b8e:	98 2f       	mov	r25, r24
     b90:	91 70       	andi	r25, 0x01	; 1
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	61 e0       	ldi	r22, 0x01	; 1
     b96:	49 2f       	mov	r20, r25
     b98:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_2,GET_BIT(copy_u8Command,6));
     b9c:	89 ad       	ldd	r24, Y+57	; 0x39
     b9e:	82 95       	swap	r24
     ba0:	86 95       	lsr	r24
     ba2:	86 95       	lsr	r24
     ba4:	83 70       	andi	r24, 0x03	; 3
     ba6:	98 2f       	mov	r25, r24
     ba8:	91 70       	andi	r25, 0x01	; 1
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	62 e0       	ldi	r22, 0x02	; 2
     bae:	49 2f       	mov	r20, r25
     bb0:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_4,GET_BIT(copy_u8Command,7));
     bb4:	89 ad       	ldd	r24, Y+57	; 0x39
     bb6:	98 2f       	mov	r25, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	99 27       	eor	r25, r25
     bbc:	99 1f       	adc	r25, r25
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	64 e0       	ldi	r22, 0x04	; 4
     bc2:	49 2f       	mov	r20, r25
     bc4:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>

	/*Send enable pulse*/
	DIO_SetPinValue(PORT_A,PIN_2 ,PIN_HIGH);
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	62 e0       	ldi	r22, 0x02	; 2
     bcc:	41 e0       	ldi	r20, 0x01	; 1
     bce:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	a0 e0       	ldi	r26, 0x00	; 0
     bd8:	b0 e4       	ldi	r27, 0x40	; 64
     bda:	8d ab       	std	Y+53, r24	; 0x35
     bdc:	9e ab       	std	Y+54, r25	; 0x36
     bde:	af ab       	std	Y+55, r26	; 0x37
     be0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     be2:	6d a9       	ldd	r22, Y+53	; 0x35
     be4:	7e a9       	ldd	r23, Y+54	; 0x36
     be6:	8f a9       	ldd	r24, Y+55	; 0x37
     be8:	98 ad       	ldd	r25, Y+56	; 0x38
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	4a ef       	ldi	r20, 0xFA	; 250
     bf0:	54 e4       	ldi	r21, 0x44	; 68
     bf2:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
     bf6:	dc 01       	movw	r26, r24
     bf8:	cb 01       	movw	r24, r22
     bfa:	89 ab       	std	Y+49, r24	; 0x31
     bfc:	9a ab       	std	Y+50, r25	; 0x32
     bfe:	ab ab       	std	Y+51, r26	; 0x33
     c00:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     c02:	69 a9       	ldd	r22, Y+49	; 0x31
     c04:	7a a9       	ldd	r23, Y+50	; 0x32
     c06:	8b a9       	ldd	r24, Y+51	; 0x33
     c08:	9c a9       	ldd	r25, Y+52	; 0x34
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e8       	ldi	r20, 0x80	; 128
     c10:	5f e3       	ldi	r21, 0x3F	; 63
     c12:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
     c16:	88 23       	and	r24, r24
     c18:	2c f4       	brge	.+10     	; 0xc24 <CLCD_voidCommand+0xd2>
		__ticks = 1;
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	98 ab       	std	Y+48, r25	; 0x30
     c20:	8f a7       	std	Y+47, r24	; 0x2f
     c22:	3f c0       	rjmp	.+126    	; 0xca2 <CLCD_voidCommand+0x150>
	else if (__tmp > 65535)
     c24:	69 a9       	ldd	r22, Y+49	; 0x31
     c26:	7a a9       	ldd	r23, Y+50	; 0x32
     c28:	8b a9       	ldd	r24, Y+51	; 0x33
     c2a:	9c a9       	ldd	r25, Y+52	; 0x34
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	3f ef       	ldi	r19, 0xFF	; 255
     c30:	4f e7       	ldi	r20, 0x7F	; 127
     c32:	57 e4       	ldi	r21, 0x47	; 71
     c34:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
     c38:	18 16       	cp	r1, r24
     c3a:	4c f5       	brge	.+82     	; 0xc8e <CLCD_voidCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c3c:	6d a9       	ldd	r22, Y+53	; 0x35
     c3e:	7e a9       	ldd	r23, Y+54	; 0x36
     c40:	8f a9       	ldd	r24, Y+55	; 0x37
     c42:	98 ad       	ldd	r25, Y+56	; 0x38
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	40 e2       	ldi	r20, 0x20	; 32
     c4a:	51 e4       	ldi	r21, 0x41	; 65
     c4c:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
     c50:	dc 01       	movw	r26, r24
     c52:	cb 01       	movw	r24, r22
     c54:	bc 01       	movw	r22, r24
     c56:	cd 01       	movw	r24, r26
     c58:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	98 ab       	std	Y+48, r25	; 0x30
     c62:	8f a7       	std	Y+47, r24	; 0x2f
     c64:	0f c0       	rjmp	.+30     	; 0xc84 <CLCD_voidCommand+0x132>
     c66:	88 ec       	ldi	r24, 0xC8	; 200
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	9e a7       	std	Y+46, r25	; 0x2e
     c6c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c6e:	8d a5       	ldd	r24, Y+45	; 0x2d
     c70:	9e a5       	ldd	r25, Y+46	; 0x2e
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <CLCD_voidCommand+0x120>
     c76:	9e a7       	std	Y+46, r25	; 0x2e
     c78:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c7a:	8f a5       	ldd	r24, Y+47	; 0x2f
     c7c:	98 a9       	ldd	r25, Y+48	; 0x30
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	98 ab       	std	Y+48, r25	; 0x30
     c82:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c84:	8f a5       	ldd	r24, Y+47	; 0x2f
     c86:	98 a9       	ldd	r25, Y+48	; 0x30
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	69 f7       	brne	.-38     	; 0xc66 <CLCD_voidCommand+0x114>
     c8c:	14 c0       	rjmp	.+40     	; 0xcb6 <CLCD_voidCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c8e:	69 a9       	ldd	r22, Y+49	; 0x31
     c90:	7a a9       	ldd	r23, Y+50	; 0x32
     c92:	8b a9       	ldd	r24, Y+51	; 0x33
     c94:	9c a9       	ldd	r25, Y+52	; 0x34
     c96:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
     c9a:	dc 01       	movw	r26, r24
     c9c:	cb 01       	movw	r24, r22
     c9e:	98 ab       	std	Y+48, r25	; 0x30
     ca0:	8f a7       	std	Y+47, r24	; 0x2f
     ca2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ca4:	98 a9       	ldd	r25, Y+48	; 0x30
     ca6:	9c a7       	std	Y+44, r25	; 0x2c
     ca8:	8b a7       	std	Y+43, r24	; 0x2b
     caa:	8b a5       	ldd	r24, Y+43	; 0x2b
     cac:	9c a5       	ldd	r25, Y+44	; 0x2c
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	f1 f7       	brne	.-4      	; 0xcae <CLCD_voidCommand+0x15c>
     cb2:	9c a7       	std	Y+44, r25	; 0x2c
     cb4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_SetPinValue(PORT_A,PIN_2,PIN_LOW);
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	62 e0       	ldi	r22, 0x02	; 2
     cba:	40 e0       	ldi	r20, 0x00	; 0
     cbc:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	a0 ea       	ldi	r26, 0xA0	; 160
     cc6:	b0 e4       	ldi	r27, 0x40	; 64
     cc8:	8f a3       	std	Y+39, r24	; 0x27
     cca:	98 a7       	std	Y+40, r25	; 0x28
     ccc:	a9 a7       	std	Y+41, r26	; 0x29
     cce:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd0:	6f a1       	ldd	r22, Y+39	; 0x27
     cd2:	78 a5       	ldd	r23, Y+40	; 0x28
     cd4:	89 a5       	ldd	r24, Y+41	; 0x29
     cd6:	9a a5       	ldd	r25, Y+42	; 0x2a
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	4a ef       	ldi	r20, 0xFA	; 250
     cde:	54 e4       	ldi	r21, 0x44	; 68
     ce0:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
     ce4:	dc 01       	movw	r26, r24
     ce6:	cb 01       	movw	r24, r22
     ce8:	8b a3       	std	Y+35, r24	; 0x23
     cea:	9c a3       	std	Y+36, r25	; 0x24
     cec:	ad a3       	std	Y+37, r26	; 0x25
     cee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     cf0:	6b a1       	ldd	r22, Y+35	; 0x23
     cf2:	7c a1       	ldd	r23, Y+36	; 0x24
     cf4:	8d a1       	ldd	r24, Y+37	; 0x25
     cf6:	9e a1       	ldd	r25, Y+38	; 0x26
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e8       	ldi	r20, 0x80	; 128
     cfe:	5f e3       	ldi	r21, 0x3F	; 63
     d00:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
     d04:	88 23       	and	r24, r24
     d06:	2c f4       	brge	.+10     	; 0xd12 <CLCD_voidCommand+0x1c0>
		__ticks = 1;
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	9a a3       	std	Y+34, r25	; 0x22
     d0e:	89 a3       	std	Y+33, r24	; 0x21
     d10:	3f c0       	rjmp	.+126    	; 0xd90 <CLCD_voidCommand+0x23e>
	else if (__tmp > 65535)
     d12:	6b a1       	ldd	r22, Y+35	; 0x23
     d14:	7c a1       	ldd	r23, Y+36	; 0x24
     d16:	8d a1       	ldd	r24, Y+37	; 0x25
     d18:	9e a1       	ldd	r25, Y+38	; 0x26
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	3f ef       	ldi	r19, 0xFF	; 255
     d1e:	4f e7       	ldi	r20, 0x7F	; 127
     d20:	57 e4       	ldi	r21, 0x47	; 71
     d22:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
     d26:	18 16       	cp	r1, r24
     d28:	4c f5       	brge	.+82     	; 0xd7c <CLCD_voidCommand+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d2a:	6f a1       	ldd	r22, Y+39	; 0x27
     d2c:	78 a5       	ldd	r23, Y+40	; 0x28
     d2e:	89 a5       	ldd	r24, Y+41	; 0x29
     d30:	9a a5       	ldd	r25, Y+42	; 0x2a
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	40 e2       	ldi	r20, 0x20	; 32
     d38:	51 e4       	ldi	r21, 0x41	; 65
     d3a:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	bc 01       	movw	r22, r24
     d44:	cd 01       	movw	r24, r26
     d46:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	9a a3       	std	Y+34, r25	; 0x22
     d50:	89 a3       	std	Y+33, r24	; 0x21
     d52:	0f c0       	rjmp	.+30     	; 0xd72 <CLCD_voidCommand+0x220>
     d54:	88 ec       	ldi	r24, 0xC8	; 200
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	98 a3       	std	Y+32, r25	; 0x20
     d5a:	8f 8f       	std	Y+31, r24	; 0x1f
     d5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d5e:	98 a1       	ldd	r25, Y+32	; 0x20
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	f1 f7       	brne	.-4      	; 0xd60 <CLCD_voidCommand+0x20e>
     d64:	98 a3       	std	Y+32, r25	; 0x20
     d66:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d68:	89 a1       	ldd	r24, Y+33	; 0x21
     d6a:	9a a1       	ldd	r25, Y+34	; 0x22
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	9a a3       	std	Y+34, r25	; 0x22
     d70:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d72:	89 a1       	ldd	r24, Y+33	; 0x21
     d74:	9a a1       	ldd	r25, Y+34	; 0x22
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	69 f7       	brne	.-38     	; 0xd54 <CLCD_voidCommand+0x202>
     d7a:	14 c0       	rjmp	.+40     	; 0xda4 <CLCD_voidCommand+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7c:	6b a1       	ldd	r22, Y+35	; 0x23
     d7e:	7c a1       	ldd	r23, Y+36	; 0x24
     d80:	8d a1       	ldd	r24, Y+37	; 0x25
     d82:	9e a1       	ldd	r25, Y+38	; 0x26
     d84:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
     d88:	dc 01       	movw	r26, r24
     d8a:	cb 01       	movw	r24, r22
     d8c:	9a a3       	std	Y+34, r25	; 0x22
     d8e:	89 a3       	std	Y+33, r24	; 0x21
     d90:	89 a1       	ldd	r24, Y+33	; 0x21
     d92:	9a a1       	ldd	r25, Y+34	; 0x22
     d94:	9e 8f       	std	Y+30, r25	; 0x1e
     d96:	8d 8f       	std	Y+29, r24	; 0x1d
     d98:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	f1 f7       	brne	.-4      	; 0xd9c <CLCD_voidCommand+0x24a>
     da0:	9e 8f       	std	Y+30, r25	; 0x1e
     da2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	DIO_SetPinValue(PORT_B,PIN_0,GET_BIT(copy_u8Command,0));
     da4:	89 ad       	ldd	r24, Y+57	; 0x39
     da6:	98 2f       	mov	r25, r24
     da8:	91 70       	andi	r25, 0x01	; 1
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	49 2f       	mov	r20, r25
     db0:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_1,GET_BIT(copy_u8Command,1));
     db4:	89 ad       	ldd	r24, Y+57	; 0x39
     db6:	86 95       	lsr	r24
     db8:	98 2f       	mov	r25, r24
     dba:	91 70       	andi	r25, 0x01	; 1
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	61 e0       	ldi	r22, 0x01	; 1
     dc0:	49 2f       	mov	r20, r25
     dc2:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_2,GET_BIT(copy_u8Command,2));
     dc6:	89 ad       	ldd	r24, Y+57	; 0x39
     dc8:	86 95       	lsr	r24
     dca:	86 95       	lsr	r24
     dcc:	98 2f       	mov	r25, r24
     dce:	91 70       	andi	r25, 0x01	; 1
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	62 e0       	ldi	r22, 0x02	; 2
     dd4:	49 2f       	mov	r20, r25
     dd6:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_4,GET_BIT(copy_u8Command,3));
     dda:	89 ad       	ldd	r24, Y+57	; 0x39
     ddc:	86 95       	lsr	r24
     dde:	86 95       	lsr	r24
     de0:	86 95       	lsr	r24
     de2:	98 2f       	mov	r25, r24
     de4:	91 70       	andi	r25, 0x01	; 1
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	64 e0       	ldi	r22, 0x04	; 4
     dea:	49 2f       	mov	r20, r25
     dec:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>



	/*Send enable pulse*/
	DIO_SetPinValue(PORT_A,PIN_2 ,PIN_HIGH);
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	62 e0       	ldi	r22, 0x02	; 2
     df4:	41 e0       	ldi	r20, 0x01	; 1
     df6:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	a0 e0       	ldi	r26, 0x00	; 0
     e00:	b0 e4       	ldi	r27, 0x40	; 64
     e02:	89 8f       	std	Y+25, r24	; 0x19
     e04:	9a 8f       	std	Y+26, r25	; 0x1a
     e06:	ab 8f       	std	Y+27, r26	; 0x1b
     e08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e0a:	69 8d       	ldd	r22, Y+25	; 0x19
     e0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e10:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	4a ef       	ldi	r20, 0xFA	; 250
     e18:	54 e4       	ldi	r21, 0x44	; 68
     e1a:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	8d 8b       	std	Y+21, r24	; 0x15
     e24:	9e 8b       	std	Y+22, r25	; 0x16
     e26:	af 8b       	std	Y+23, r26	; 0x17
     e28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e2a:	6d 89       	ldd	r22, Y+21	; 0x15
     e2c:	7e 89       	ldd	r23, Y+22	; 0x16
     e2e:	8f 89       	ldd	r24, Y+23	; 0x17
     e30:	98 8d       	ldd	r25, Y+24	; 0x18
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	40 e8       	ldi	r20, 0x80	; 128
     e38:	5f e3       	ldi	r21, 0x3F	; 63
     e3a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
     e3e:	88 23       	and	r24, r24
     e40:	2c f4       	brge	.+10     	; 0xe4c <CLCD_voidCommand+0x2fa>
		__ticks = 1;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	9c 8b       	std	Y+20, r25	; 0x14
     e48:	8b 8b       	std	Y+19, r24	; 0x13
     e4a:	3f c0       	rjmp	.+126    	; 0xeca <CLCD_voidCommand+0x378>
	else if (__tmp > 65535)
     e4c:	6d 89       	ldd	r22, Y+21	; 0x15
     e4e:	7e 89       	ldd	r23, Y+22	; 0x16
     e50:	8f 89       	ldd	r24, Y+23	; 0x17
     e52:	98 8d       	ldd	r25, Y+24	; 0x18
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	3f ef       	ldi	r19, 0xFF	; 255
     e58:	4f e7       	ldi	r20, 0x7F	; 127
     e5a:	57 e4       	ldi	r21, 0x47	; 71
     e5c:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
     e60:	18 16       	cp	r1, r24
     e62:	4c f5       	brge	.+82     	; 0xeb6 <CLCD_voidCommand+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e64:	69 8d       	ldd	r22, Y+25	; 0x19
     e66:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e68:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	40 e2       	ldi	r20, 0x20	; 32
     e72:	51 e4       	ldi	r21, 0x41	; 65
     e74:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	bc 01       	movw	r22, r24
     e7e:	cd 01       	movw	r24, r26
     e80:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	9c 8b       	std	Y+20, r25	; 0x14
     e8a:	8b 8b       	std	Y+19, r24	; 0x13
     e8c:	0f c0       	rjmp	.+30     	; 0xeac <CLCD_voidCommand+0x35a>
     e8e:	88 ec       	ldi	r24, 0xC8	; 200
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9a 8b       	std	Y+18, r25	; 0x12
     e94:	89 8b       	std	Y+17, r24	; 0x11
     e96:	89 89       	ldd	r24, Y+17	; 0x11
     e98:	9a 89       	ldd	r25, Y+18	; 0x12
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <CLCD_voidCommand+0x348>
     e9e:	9a 8b       	std	Y+18, r25	; 0x12
     ea0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea2:	8b 89       	ldd	r24, Y+19	; 0x13
     ea4:	9c 89       	ldd	r25, Y+20	; 0x14
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	9c 8b       	std	Y+20, r25	; 0x14
     eaa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eac:	8b 89       	ldd	r24, Y+19	; 0x13
     eae:	9c 89       	ldd	r25, Y+20	; 0x14
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	69 f7       	brne	.-38     	; 0xe8e <CLCD_voidCommand+0x33c>
     eb4:	14 c0       	rjmp	.+40     	; 0xede <CLCD_voidCommand+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb6:	6d 89       	ldd	r22, Y+21	; 0x15
     eb8:	7e 89       	ldd	r23, Y+22	; 0x16
     eba:	8f 89       	ldd	r24, Y+23	; 0x17
     ebc:	98 8d       	ldd	r25, Y+24	; 0x18
     ebe:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	9c 8b       	std	Y+20, r25	; 0x14
     ec8:	8b 8b       	std	Y+19, r24	; 0x13
     eca:	8b 89       	ldd	r24, Y+19	; 0x13
     ecc:	9c 89       	ldd	r25, Y+20	; 0x14
     ece:	98 8b       	std	Y+16, r25	; 0x10
     ed0:	8f 87       	std	Y+15, r24	; 0x0f
     ed2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed4:	98 89       	ldd	r25, Y+16	; 0x10
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <CLCD_voidCommand+0x384>
     eda:	98 8b       	std	Y+16, r25	; 0x10
     edc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_SetPinValue(PORT_A,PIN_2 ,PIN_LOW);
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	62 e0       	ldi	r22, 0x02	; 2
     ee2:	40 e0       	ldi	r20, 0x00	; 0
     ee4:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	a0 ea       	ldi	r26, 0xA0	; 160
     eee:	b0 e4       	ldi	r27, 0x40	; 64
     ef0:	8b 87       	std	Y+11, r24	; 0x0b
     ef2:	9c 87       	std	Y+12, r25	; 0x0c
     ef4:	ad 87       	std	Y+13, r26	; 0x0d
     ef6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef8:	6b 85       	ldd	r22, Y+11	; 0x0b
     efa:	7c 85       	ldd	r23, Y+12	; 0x0c
     efc:	8d 85       	ldd	r24, Y+13	; 0x0d
     efe:	9e 85       	ldd	r25, Y+14	; 0x0e
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	4a ef       	ldi	r20, 0xFA	; 250
     f06:	54 e4       	ldi	r21, 0x44	; 68
     f08:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	8f 83       	std	Y+7, r24	; 0x07
     f12:	98 87       	std	Y+8, r25	; 0x08
     f14:	a9 87       	std	Y+9, r26	; 0x09
     f16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f18:	6f 81       	ldd	r22, Y+7	; 0x07
     f1a:	78 85       	ldd	r23, Y+8	; 0x08
     f1c:	89 85       	ldd	r24, Y+9	; 0x09
     f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e8       	ldi	r20, 0x80	; 128
     f26:	5f e3       	ldi	r21, 0x3F	; 63
     f28:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
     f2c:	88 23       	and	r24, r24
     f2e:	2c f4       	brge	.+10     	; 0xf3a <CLCD_voidCommand+0x3e8>
		__ticks = 1;
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	9e 83       	std	Y+6, r25	; 0x06
     f36:	8d 83       	std	Y+5, r24	; 0x05
     f38:	3f c0       	rjmp	.+126    	; 0xfb8 <CLCD_voidCommand+0x466>
	else if (__tmp > 65535)
     f3a:	6f 81       	ldd	r22, Y+7	; 0x07
     f3c:	78 85       	ldd	r23, Y+8	; 0x08
     f3e:	89 85       	ldd	r24, Y+9	; 0x09
     f40:	9a 85       	ldd	r25, Y+10	; 0x0a
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	3f ef       	ldi	r19, 0xFF	; 255
     f46:	4f e7       	ldi	r20, 0x7F	; 127
     f48:	57 e4       	ldi	r21, 0x47	; 71
     f4a:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
     f4e:	18 16       	cp	r1, r24
     f50:	4c f5       	brge	.+82     	; 0xfa4 <CLCD_voidCommand+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f52:	6b 85       	ldd	r22, Y+11	; 0x0b
     f54:	7c 85       	ldd	r23, Y+12	; 0x0c
     f56:	8d 85       	ldd	r24, Y+13	; 0x0d
     f58:	9e 85       	ldd	r25, Y+14	; 0x0e
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	40 e2       	ldi	r20, 0x20	; 32
     f60:	51 e4       	ldi	r21, 0x41	; 65
     f62:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	bc 01       	movw	r22, r24
     f6c:	cd 01       	movw	r24, r26
     f6e:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	9e 83       	std	Y+6, r25	; 0x06
     f78:	8d 83       	std	Y+5, r24	; 0x05
     f7a:	0f c0       	rjmp	.+30     	; 0xf9a <CLCD_voidCommand+0x448>
     f7c:	88 ec       	ldi	r24, 0xC8	; 200
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	9c 83       	std	Y+4, r25	; 0x04
     f82:	8b 83       	std	Y+3, r24	; 0x03
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	9c 81       	ldd	r25, Y+4	; 0x04
     f88:	01 97       	sbiw	r24, 0x01	; 1
     f8a:	f1 f7       	brne	.-4      	; 0xf88 <CLCD_voidCommand+0x436>
     f8c:	9c 83       	std	Y+4, r25	; 0x04
     f8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f90:	8d 81       	ldd	r24, Y+5	; 0x05
     f92:	9e 81       	ldd	r25, Y+6	; 0x06
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	9e 83       	std	Y+6, r25	; 0x06
     f98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f9a:	8d 81       	ldd	r24, Y+5	; 0x05
     f9c:	9e 81       	ldd	r25, Y+6	; 0x06
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	69 f7       	brne	.-38     	; 0xf7c <CLCD_voidCommand+0x42a>
     fa2:	14 c0       	rjmp	.+40     	; 0xfcc <CLCD_voidCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa4:	6f 81       	ldd	r22, Y+7	; 0x07
     fa6:	78 85       	ldd	r23, Y+8	; 0x08
     fa8:	89 85       	ldd	r24, Y+9	; 0x09
     faa:	9a 85       	ldd	r25, Y+10	; 0x0a
     fac:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	9e 83       	std	Y+6, r25	; 0x06
     fb6:	8d 83       	std	Y+5, r24	; 0x05
     fb8:	8d 81       	ldd	r24, Y+5	; 0x05
     fba:	9e 81       	ldd	r25, Y+6	; 0x06
     fbc:	9a 83       	std	Y+2, r25	; 0x02
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	9a 81       	ldd	r25, Y+2	; 0x02
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	f1 f7       	brne	.-4      	; 0xfc4 <CLCD_voidCommand+0x472>
     fc8:	9a 83       	std	Y+2, r25	; 0x02
     fca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

}
     fcc:	e9 96       	adiw	r28, 0x39	; 57
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	de bf       	out	0x3e, r29	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	cd bf       	out	0x3d, r28	; 61
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <CLCD_voidSendData>:
void CLCD_voidSendData(u8int_t copy_u8Data)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	e9 97       	sbiw	r28, 0x39	; 57
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
     ff2:	89 af       	std	Y+57, r24	; 0x39
	/*Set RS pin high for data*/
	DIO_SetPinValue(PORT_A,PIN_3,PIN_HIGH);
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	63 e0       	ldi	r22, 0x03	; 3
     ff8:	41 e0       	ldi	r20, 0x01	; 1
     ffa:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>

	/*Set RW pin LOW to write*/
	//DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,PIN_LOW);
	/*SEND DATA ONLY ON FOR BITS*/
	DIO_SetPinValue(PORT_B,PIN_0,GET_BIT(copy_u8Data,4));
     ffe:	89 ad       	ldd	r24, Y+57	; 0x39
    1000:	82 95       	swap	r24
    1002:	8f 70       	andi	r24, 0x0F	; 15
    1004:	98 2f       	mov	r25, r24
    1006:	91 70       	andi	r25, 0x01	; 1
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	49 2f       	mov	r20, r25
    100e:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_1,GET_BIT(copy_u8Data,5));
    1012:	89 ad       	ldd	r24, Y+57	; 0x39
    1014:	82 95       	swap	r24
    1016:	86 95       	lsr	r24
    1018:	87 70       	andi	r24, 0x07	; 7
    101a:	98 2f       	mov	r25, r24
    101c:	91 70       	andi	r25, 0x01	; 1
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	61 e0       	ldi	r22, 0x01	; 1
    1022:	49 2f       	mov	r20, r25
    1024:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_2,GET_BIT(copy_u8Data,6));
    1028:	89 ad       	ldd	r24, Y+57	; 0x39
    102a:	82 95       	swap	r24
    102c:	86 95       	lsr	r24
    102e:	86 95       	lsr	r24
    1030:	83 70       	andi	r24, 0x03	; 3
    1032:	98 2f       	mov	r25, r24
    1034:	91 70       	andi	r25, 0x01	; 1
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	62 e0       	ldi	r22, 0x02	; 2
    103a:	49 2f       	mov	r20, r25
    103c:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_4,GET_BIT(copy_u8Data,7));
    1040:	89 ad       	ldd	r24, Y+57	; 0x39
    1042:	98 2f       	mov	r25, r24
    1044:	99 1f       	adc	r25, r25
    1046:	99 27       	eor	r25, r25
    1048:	99 1f       	adc	r25, r25
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	64 e0       	ldi	r22, 0x04	; 4
    104e:	49 2f       	mov	r20, r25
    1050:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>


	/*Send enable pulse*/
	DIO_SetPinValue(PORT_A,PIN_2,PIN_HIGH);
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	62 e0       	ldi	r22, 0x02	; 2
    1058:	41 e0       	ldi	r20, 0x01	; 1
    105a:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	a0 e0       	ldi	r26, 0x00	; 0
    1064:	b0 e4       	ldi	r27, 0x40	; 64
    1066:	8d ab       	std	Y+53, r24	; 0x35
    1068:	9e ab       	std	Y+54, r25	; 0x36
    106a:	af ab       	std	Y+55, r26	; 0x37
    106c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    106e:	6d a9       	ldd	r22, Y+53	; 0x35
    1070:	7e a9       	ldd	r23, Y+54	; 0x36
    1072:	8f a9       	ldd	r24, Y+55	; 0x37
    1074:	98 ad       	ldd	r25, Y+56	; 0x38
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	4a ef       	ldi	r20, 0xFA	; 250
    107c:	54 e4       	ldi	r21, 0x44	; 68
    107e:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	89 ab       	std	Y+49, r24	; 0x31
    1088:	9a ab       	std	Y+50, r25	; 0x32
    108a:	ab ab       	std	Y+51, r26	; 0x33
    108c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    108e:	69 a9       	ldd	r22, Y+49	; 0x31
    1090:	7a a9       	ldd	r23, Y+50	; 0x32
    1092:	8b a9       	ldd	r24, Y+51	; 0x33
    1094:	9c a9       	ldd	r25, Y+52	; 0x34
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 e8       	ldi	r20, 0x80	; 128
    109c:	5f e3       	ldi	r21, 0x3F	; 63
    109e:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    10a2:	88 23       	and	r24, r24
    10a4:	2c f4       	brge	.+10     	; 0x10b0 <CLCD_voidSendData+0xd2>
		__ticks = 1;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	98 ab       	std	Y+48, r25	; 0x30
    10ac:	8f a7       	std	Y+47, r24	; 0x2f
    10ae:	3f c0       	rjmp	.+126    	; 0x112e <CLCD_voidSendData+0x150>
	else if (__tmp > 65535)
    10b0:	69 a9       	ldd	r22, Y+49	; 0x31
    10b2:	7a a9       	ldd	r23, Y+50	; 0x32
    10b4:	8b a9       	ldd	r24, Y+51	; 0x33
    10b6:	9c a9       	ldd	r25, Y+52	; 0x34
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	3f ef       	ldi	r19, 0xFF	; 255
    10bc:	4f e7       	ldi	r20, 0x7F	; 127
    10be:	57 e4       	ldi	r21, 0x47	; 71
    10c0:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    10c4:	18 16       	cp	r1, r24
    10c6:	4c f5       	brge	.+82     	; 0x111a <CLCD_voidSendData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c8:	6d a9       	ldd	r22, Y+53	; 0x35
    10ca:	7e a9       	ldd	r23, Y+54	; 0x36
    10cc:	8f a9       	ldd	r24, Y+55	; 0x37
    10ce:	98 ad       	ldd	r25, Y+56	; 0x38
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e2       	ldi	r20, 0x20	; 32
    10d6:	51 e4       	ldi	r21, 0x41	; 65
    10d8:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	bc 01       	movw	r22, r24
    10e2:	cd 01       	movw	r24, r26
    10e4:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	98 ab       	std	Y+48, r25	; 0x30
    10ee:	8f a7       	std	Y+47, r24	; 0x2f
    10f0:	0f c0       	rjmp	.+30     	; 0x1110 <CLCD_voidSendData+0x132>
    10f2:	88 ec       	ldi	r24, 0xC8	; 200
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	9e a7       	std	Y+46, r25	; 0x2e
    10f8:	8d a7       	std	Y+45, r24	; 0x2d
    10fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    10fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	f1 f7       	brne	.-4      	; 0x10fe <CLCD_voidSendData+0x120>
    1102:	9e a7       	std	Y+46, r25	; 0x2e
    1104:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1106:	8f a5       	ldd	r24, Y+47	; 0x2f
    1108:	98 a9       	ldd	r25, Y+48	; 0x30
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	98 ab       	std	Y+48, r25	; 0x30
    110e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1110:	8f a5       	ldd	r24, Y+47	; 0x2f
    1112:	98 a9       	ldd	r25, Y+48	; 0x30
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	69 f7       	brne	.-38     	; 0x10f2 <CLCD_voidSendData+0x114>
    1118:	14 c0       	rjmp	.+40     	; 0x1142 <CLCD_voidSendData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    111a:	69 a9       	ldd	r22, Y+49	; 0x31
    111c:	7a a9       	ldd	r23, Y+50	; 0x32
    111e:	8b a9       	ldd	r24, Y+51	; 0x33
    1120:	9c a9       	ldd	r25, Y+52	; 0x34
    1122:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	98 ab       	std	Y+48, r25	; 0x30
    112c:	8f a7       	std	Y+47, r24	; 0x2f
    112e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1130:	98 a9       	ldd	r25, Y+48	; 0x30
    1132:	9c a7       	std	Y+44, r25	; 0x2c
    1134:	8b a7       	std	Y+43, r24	; 0x2b
    1136:	8b a5       	ldd	r24, Y+43	; 0x2b
    1138:	9c a5       	ldd	r25, Y+44	; 0x2c
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	f1 f7       	brne	.-4      	; 0x113a <CLCD_voidSendData+0x15c>
    113e:	9c a7       	std	Y+44, r25	; 0x2c
    1140:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_SetPinValue(PORT_A,PIN_2,PIN_LOW);
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	62 e0       	ldi	r22, 0x02	; 2
    1146:	40 e0       	ldi	r20, 0x00	; 0
    1148:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a0 ea       	ldi	r26, 0xA0	; 160
    1152:	b0 e4       	ldi	r27, 0x40	; 64
    1154:	8f a3       	std	Y+39, r24	; 0x27
    1156:	98 a7       	std	Y+40, r25	; 0x28
    1158:	a9 a7       	std	Y+41, r26	; 0x29
    115a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    115c:	6f a1       	ldd	r22, Y+39	; 0x27
    115e:	78 a5       	ldd	r23, Y+40	; 0x28
    1160:	89 a5       	ldd	r24, Y+41	; 0x29
    1162:	9a a5       	ldd	r25, Y+42	; 0x2a
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	4a ef       	ldi	r20, 0xFA	; 250
    116a:	54 e4       	ldi	r21, 0x44	; 68
    116c:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	8b a3       	std	Y+35, r24	; 0x23
    1176:	9c a3       	std	Y+36, r25	; 0x24
    1178:	ad a3       	std	Y+37, r26	; 0x25
    117a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    117c:	6b a1       	ldd	r22, Y+35	; 0x23
    117e:	7c a1       	ldd	r23, Y+36	; 0x24
    1180:	8d a1       	ldd	r24, Y+37	; 0x25
    1182:	9e a1       	ldd	r25, Y+38	; 0x26
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	40 e8       	ldi	r20, 0x80	; 128
    118a:	5f e3       	ldi	r21, 0x3F	; 63
    118c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    1190:	88 23       	and	r24, r24
    1192:	2c f4       	brge	.+10     	; 0x119e <CLCD_voidSendData+0x1c0>
		__ticks = 1;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	9a a3       	std	Y+34, r25	; 0x22
    119a:	89 a3       	std	Y+33, r24	; 0x21
    119c:	3f c0       	rjmp	.+126    	; 0x121c <CLCD_voidSendData+0x23e>
	else if (__tmp > 65535)
    119e:	6b a1       	ldd	r22, Y+35	; 0x23
    11a0:	7c a1       	ldd	r23, Y+36	; 0x24
    11a2:	8d a1       	ldd	r24, Y+37	; 0x25
    11a4:	9e a1       	ldd	r25, Y+38	; 0x26
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	3f ef       	ldi	r19, 0xFF	; 255
    11aa:	4f e7       	ldi	r20, 0x7F	; 127
    11ac:	57 e4       	ldi	r21, 0x47	; 71
    11ae:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    11b2:	18 16       	cp	r1, r24
    11b4:	4c f5       	brge	.+82     	; 0x1208 <CLCD_voidSendData+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b6:	6f a1       	ldd	r22, Y+39	; 0x27
    11b8:	78 a5       	ldd	r23, Y+40	; 0x28
    11ba:	89 a5       	ldd	r24, Y+41	; 0x29
    11bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	40 e2       	ldi	r20, 0x20	; 32
    11c4:	51 e4       	ldi	r21, 0x41	; 65
    11c6:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	bc 01       	movw	r22, r24
    11d0:	cd 01       	movw	r24, r26
    11d2:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    11d6:	dc 01       	movw	r26, r24
    11d8:	cb 01       	movw	r24, r22
    11da:	9a a3       	std	Y+34, r25	; 0x22
    11dc:	89 a3       	std	Y+33, r24	; 0x21
    11de:	0f c0       	rjmp	.+30     	; 0x11fe <CLCD_voidSendData+0x220>
    11e0:	88 ec       	ldi	r24, 0xC8	; 200
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	98 a3       	std	Y+32, r25	; 0x20
    11e6:	8f 8f       	std	Y+31, r24	; 0x1f
    11e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11ea:	98 a1       	ldd	r25, Y+32	; 0x20
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <CLCD_voidSendData+0x20e>
    11f0:	98 a3       	std	Y+32, r25	; 0x20
    11f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f4:	89 a1       	ldd	r24, Y+33	; 0x21
    11f6:	9a a1       	ldd	r25, Y+34	; 0x22
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	9a a3       	std	Y+34, r25	; 0x22
    11fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1200:	9a a1       	ldd	r25, Y+34	; 0x22
    1202:	00 97       	sbiw	r24, 0x00	; 0
    1204:	69 f7       	brne	.-38     	; 0x11e0 <CLCD_voidSendData+0x202>
    1206:	14 c0       	rjmp	.+40     	; 0x1230 <CLCD_voidSendData+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1208:	6b a1       	ldd	r22, Y+35	; 0x23
    120a:	7c a1       	ldd	r23, Y+36	; 0x24
    120c:	8d a1       	ldd	r24, Y+37	; 0x25
    120e:	9e a1       	ldd	r25, Y+38	; 0x26
    1210:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	9a a3       	std	Y+34, r25	; 0x22
    121a:	89 a3       	std	Y+33, r24	; 0x21
    121c:	89 a1       	ldd	r24, Y+33	; 0x21
    121e:	9a a1       	ldd	r25, Y+34	; 0x22
    1220:	9e 8f       	std	Y+30, r25	; 0x1e
    1222:	8d 8f       	std	Y+29, r24	; 0x1d
    1224:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1226:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	f1 f7       	brne	.-4      	; 0x1228 <CLCD_voidSendData+0x24a>
    122c:	9e 8f       	std	Y+30, r25	; 0x1e
    122e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	DIO_SetPinValue(PORT_B,PIN_0,GET_BIT(copy_u8Data,0));
    1230:	89 ad       	ldd	r24, Y+57	; 0x39
    1232:	98 2f       	mov	r25, r24
    1234:	91 70       	andi	r25, 0x01	; 1
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	49 2f       	mov	r20, r25
    123c:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_1,GET_BIT(copy_u8Data,1));
    1240:	89 ad       	ldd	r24, Y+57	; 0x39
    1242:	86 95       	lsr	r24
    1244:	98 2f       	mov	r25, r24
    1246:	91 70       	andi	r25, 0x01	; 1
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	61 e0       	ldi	r22, 0x01	; 1
    124c:	49 2f       	mov	r20, r25
    124e:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_2,GET_BIT(copy_u8Data,2));
    1252:	89 ad       	ldd	r24, Y+57	; 0x39
    1254:	86 95       	lsr	r24
    1256:	86 95       	lsr	r24
    1258:	98 2f       	mov	r25, r24
    125a:	91 70       	andi	r25, 0x01	; 1
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	62 e0       	ldi	r22, 0x02	; 2
    1260:	49 2f       	mov	r20, r25
    1262:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
	DIO_SetPinValue(PORT_B,PIN_4,GET_BIT(copy_u8Data,3));
    1266:	89 ad       	ldd	r24, Y+57	; 0x39
    1268:	86 95       	lsr	r24
    126a:	86 95       	lsr	r24
    126c:	86 95       	lsr	r24
    126e:	98 2f       	mov	r25, r24
    1270:	91 70       	andi	r25, 0x01	; 1
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	64 e0       	ldi	r22, 0x04	; 4
    1276:	49 2f       	mov	r20, r25
    1278:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>




	/*Send enable pulse*/
	DIO_SetPinValue(PORT_A,PIN_2,PIN_HIGH);
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	62 e0       	ldi	r22, 0x02	; 2
    1280:	41 e0       	ldi	r20, 0x01	; 1
    1282:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	a0 e0       	ldi	r26, 0x00	; 0
    128c:	b0 e4       	ldi	r27, 0x40	; 64
    128e:	89 8f       	std	Y+25, r24	; 0x19
    1290:	9a 8f       	std	Y+26, r25	; 0x1a
    1292:	ab 8f       	std	Y+27, r26	; 0x1b
    1294:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1296:	69 8d       	ldd	r22, Y+25	; 0x19
    1298:	7a 8d       	ldd	r23, Y+26	; 0x1a
    129a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    129c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	4a ef       	ldi	r20, 0xFA	; 250
    12a4:	54 e4       	ldi	r21, 0x44	; 68
    12a6:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	8d 8b       	std	Y+21, r24	; 0x15
    12b0:	9e 8b       	std	Y+22, r25	; 0x16
    12b2:	af 8b       	std	Y+23, r26	; 0x17
    12b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12b6:	6d 89       	ldd	r22, Y+21	; 0x15
    12b8:	7e 89       	ldd	r23, Y+22	; 0x16
    12ba:	8f 89       	ldd	r24, Y+23	; 0x17
    12bc:	98 8d       	ldd	r25, Y+24	; 0x18
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e8       	ldi	r20, 0x80	; 128
    12c4:	5f e3       	ldi	r21, 0x3F	; 63
    12c6:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    12ca:	88 23       	and	r24, r24
    12cc:	2c f4       	brge	.+10     	; 0x12d8 <CLCD_voidSendData+0x2fa>
		__ticks = 1;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	9c 8b       	std	Y+20, r25	; 0x14
    12d4:	8b 8b       	std	Y+19, r24	; 0x13
    12d6:	3f c0       	rjmp	.+126    	; 0x1356 <CLCD_voidSendData+0x378>
	else if (__tmp > 65535)
    12d8:	6d 89       	ldd	r22, Y+21	; 0x15
    12da:	7e 89       	ldd	r23, Y+22	; 0x16
    12dc:	8f 89       	ldd	r24, Y+23	; 0x17
    12de:	98 8d       	ldd	r25, Y+24	; 0x18
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	3f ef       	ldi	r19, 0xFF	; 255
    12e4:	4f e7       	ldi	r20, 0x7F	; 127
    12e6:	57 e4       	ldi	r21, 0x47	; 71
    12e8:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    12ec:	18 16       	cp	r1, r24
    12ee:	4c f5       	brge	.+82     	; 0x1342 <CLCD_voidSendData+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12f0:	69 8d       	ldd	r22, Y+25	; 0x19
    12f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e2       	ldi	r20, 0x20	; 32
    12fe:	51 e4       	ldi	r21, 0x41	; 65
    1300:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	bc 01       	movw	r22, r24
    130a:	cd 01       	movw	r24, r26
    130c:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	9c 8b       	std	Y+20, r25	; 0x14
    1316:	8b 8b       	std	Y+19, r24	; 0x13
    1318:	0f c0       	rjmp	.+30     	; 0x1338 <CLCD_voidSendData+0x35a>
    131a:	88 ec       	ldi	r24, 0xC8	; 200
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	9a 8b       	std	Y+18, r25	; 0x12
    1320:	89 8b       	std	Y+17, r24	; 0x11
    1322:	89 89       	ldd	r24, Y+17	; 0x11
    1324:	9a 89       	ldd	r25, Y+18	; 0x12
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <CLCD_voidSendData+0x348>
    132a:	9a 8b       	std	Y+18, r25	; 0x12
    132c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132e:	8b 89       	ldd	r24, Y+19	; 0x13
    1330:	9c 89       	ldd	r25, Y+20	; 0x14
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	9c 8b       	std	Y+20, r25	; 0x14
    1336:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1338:	8b 89       	ldd	r24, Y+19	; 0x13
    133a:	9c 89       	ldd	r25, Y+20	; 0x14
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	69 f7       	brne	.-38     	; 0x131a <CLCD_voidSendData+0x33c>
    1340:	14 c0       	rjmp	.+40     	; 0x136a <CLCD_voidSendData+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1342:	6d 89       	ldd	r22, Y+21	; 0x15
    1344:	7e 89       	ldd	r23, Y+22	; 0x16
    1346:	8f 89       	ldd	r24, Y+23	; 0x17
    1348:	98 8d       	ldd	r25, Y+24	; 0x18
    134a:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	9c 8b       	std	Y+20, r25	; 0x14
    1354:	8b 8b       	std	Y+19, r24	; 0x13
    1356:	8b 89       	ldd	r24, Y+19	; 0x13
    1358:	9c 89       	ldd	r25, Y+20	; 0x14
    135a:	98 8b       	std	Y+16, r25	; 0x10
    135c:	8f 87       	std	Y+15, r24	; 0x0f
    135e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1360:	98 89       	ldd	r25, Y+16	; 0x10
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <CLCD_voidSendData+0x384>
    1366:	98 8b       	std	Y+16, r25	; 0x10
    1368:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_SetPinValue(PORT_A,PIN_2,PIN_LOW);
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	62 e0       	ldi	r22, 0x02	; 2
    136e:	40 e0       	ldi	r20, 0x00	; 0
    1370:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	a0 ea       	ldi	r26, 0xA0	; 160
    137a:	b0 e4       	ldi	r27, 0x40	; 64
    137c:	8b 87       	std	Y+11, r24	; 0x0b
    137e:	9c 87       	std	Y+12, r25	; 0x0c
    1380:	ad 87       	std	Y+13, r26	; 0x0d
    1382:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1384:	6b 85       	ldd	r22, Y+11	; 0x0b
    1386:	7c 85       	ldd	r23, Y+12	; 0x0c
    1388:	8d 85       	ldd	r24, Y+13	; 0x0d
    138a:	9e 85       	ldd	r25, Y+14	; 0x0e
    138c:	20 e0       	ldi	r18, 0x00	; 0
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	4a ef       	ldi	r20, 0xFA	; 250
    1392:	54 e4       	ldi	r21, 0x44	; 68
    1394:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	8f 83       	std	Y+7, r24	; 0x07
    139e:	98 87       	std	Y+8, r25	; 0x08
    13a0:	a9 87       	std	Y+9, r26	; 0x09
    13a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13a4:	6f 81       	ldd	r22, Y+7	; 0x07
    13a6:	78 85       	ldd	r23, Y+8	; 0x08
    13a8:	89 85       	ldd	r24, Y+9	; 0x09
    13aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	40 e8       	ldi	r20, 0x80	; 128
    13b2:	5f e3       	ldi	r21, 0x3F	; 63
    13b4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    13b8:	88 23       	and	r24, r24
    13ba:	2c f4       	brge	.+10     	; 0x13c6 <CLCD_voidSendData+0x3e8>
		__ticks = 1;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	9e 83       	std	Y+6, r25	; 0x06
    13c2:	8d 83       	std	Y+5, r24	; 0x05
    13c4:	3f c0       	rjmp	.+126    	; 0x1444 <CLCD_voidSendData+0x466>
	else if (__tmp > 65535)
    13c6:	6f 81       	ldd	r22, Y+7	; 0x07
    13c8:	78 85       	ldd	r23, Y+8	; 0x08
    13ca:	89 85       	ldd	r24, Y+9	; 0x09
    13cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	3f ef       	ldi	r19, 0xFF	; 255
    13d2:	4f e7       	ldi	r20, 0x7F	; 127
    13d4:	57 e4       	ldi	r21, 0x47	; 71
    13d6:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    13da:	18 16       	cp	r1, r24
    13dc:	4c f5       	brge	.+82     	; 0x1430 <CLCD_voidSendData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13de:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e2       	ldi	r20, 0x20	; 32
    13ec:	51 e4       	ldi	r21, 0x41	; 65
    13ee:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	bc 01       	movw	r22, r24
    13f8:	cd 01       	movw	r24, r26
    13fa:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	9e 83       	std	Y+6, r25	; 0x06
    1404:	8d 83       	std	Y+5, r24	; 0x05
    1406:	0f c0       	rjmp	.+30     	; 0x1426 <CLCD_voidSendData+0x448>
    1408:	88 ec       	ldi	r24, 0xC8	; 200
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	9c 83       	std	Y+4, r25	; 0x04
    140e:	8b 83       	std	Y+3, r24	; 0x03
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	f1 f7       	brne	.-4      	; 0x1414 <CLCD_voidSendData+0x436>
    1418:	9c 83       	std	Y+4, r25	; 0x04
    141a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141c:	8d 81       	ldd	r24, Y+5	; 0x05
    141e:	9e 81       	ldd	r25, Y+6	; 0x06
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	9e 83       	std	Y+6, r25	; 0x06
    1424:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1426:	8d 81       	ldd	r24, Y+5	; 0x05
    1428:	9e 81       	ldd	r25, Y+6	; 0x06
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	69 f7       	brne	.-38     	; 0x1408 <CLCD_voidSendData+0x42a>
    142e:	14 c0       	rjmp	.+40     	; 0x1458 <CLCD_voidSendData+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1430:	6f 81       	ldd	r22, Y+7	; 0x07
    1432:	78 85       	ldd	r23, Y+8	; 0x08
    1434:	89 85       	ldd	r24, Y+9	; 0x09
    1436:	9a 85       	ldd	r25, Y+10	; 0x0a
    1438:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	9e 83       	std	Y+6, r25	; 0x06
    1442:	8d 83       	std	Y+5, r24	; 0x05
    1444:	8d 81       	ldd	r24, Y+5	; 0x05
    1446:	9e 81       	ldd	r25, Y+6	; 0x06
    1448:	9a 83       	std	Y+2, r25	; 0x02
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	9a 81       	ldd	r25, Y+2	; 0x02
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	f1 f7       	brne	.-4      	; 0x1450 <CLCD_voidSendData+0x472>
    1454:	9a 83       	std	Y+2, r25	; 0x02
    1456:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);

}
    1458:	e9 96       	adiw	r28, 0x39	; 57
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <CLCD_voidInit>:
void CLCD_voidInit(void)
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	e8 97       	sbiw	r28, 0x38	; 56
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
	/*set pin rs,rw,e->output*/
	DIO_INIT(PORT_A,PIN_3,PIN_OUTPUT);
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	63 e0       	ldi	r22, 0x03	; 3
    1482:	41 e0       	ldi	r20, 0x01	; 1
    1484:	0e 94 f7 13 	call	0x27ee	; 0x27ee <DIO_INIT>
	//DIO_INIT(PORT_A,CLCD_RW_PIN,PIN_OUTPUT);
	DIO_INIT(PORT_A,PIN_2,PIN_OUTPUT);
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	62 e0       	ldi	r22, 0x02	; 2
    148c:	41 e0       	ldi	r20, 0x01	; 1
    148e:	0e 94 f7 13 	call	0x27ee	; 0x27ee <DIO_INIT>
	/*set data port as output*/

	DIO_SetPortDirection(PORT_B,PORT_OUT);
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	6f ef       	ldi	r22, 0xFF	; 255
    1496:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <DIO_SetPortDirection>
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	a0 e2       	ldi	r26, 0x20	; 32
    14a0:	b2 e4       	ldi	r27, 0x42	; 66
    14a2:	8d ab       	std	Y+53, r24	; 0x35
    14a4:	9e ab       	std	Y+54, r25	; 0x36
    14a6:	af ab       	std	Y+55, r26	; 0x37
    14a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14aa:	6d a9       	ldd	r22, Y+53	; 0x35
    14ac:	7e a9       	ldd	r23, Y+54	; 0x36
    14ae:	8f a9       	ldd	r24, Y+55	; 0x37
    14b0:	98 ad       	ldd	r25, Y+56	; 0x38
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	4a ef       	ldi	r20, 0xFA	; 250
    14b8:	54 e4       	ldi	r21, 0x44	; 68
    14ba:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	89 ab       	std	Y+49, r24	; 0x31
    14c4:	9a ab       	std	Y+50, r25	; 0x32
    14c6:	ab ab       	std	Y+51, r26	; 0x33
    14c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14ca:	69 a9       	ldd	r22, Y+49	; 0x31
    14cc:	7a a9       	ldd	r23, Y+50	; 0x32
    14ce:	8b a9       	ldd	r24, Y+51	; 0x33
    14d0:	9c a9       	ldd	r25, Y+52	; 0x34
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e8       	ldi	r20, 0x80	; 128
    14d8:	5f e3       	ldi	r21, 0x3F	; 63
    14da:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    14de:	88 23       	and	r24, r24
    14e0:	2c f4       	brge	.+10     	; 0x14ec <CLCD_voidInit+0x82>
		__ticks = 1;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	98 ab       	std	Y+48, r25	; 0x30
    14e8:	8f a7       	std	Y+47, r24	; 0x2f
    14ea:	3f c0       	rjmp	.+126    	; 0x156a <CLCD_voidInit+0x100>
	else if (__tmp > 65535)
    14ec:	69 a9       	ldd	r22, Y+49	; 0x31
    14ee:	7a a9       	ldd	r23, Y+50	; 0x32
    14f0:	8b a9       	ldd	r24, Y+51	; 0x33
    14f2:	9c a9       	ldd	r25, Y+52	; 0x34
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	3f ef       	ldi	r19, 0xFF	; 255
    14f8:	4f e7       	ldi	r20, 0x7F	; 127
    14fa:	57 e4       	ldi	r21, 0x47	; 71
    14fc:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    1500:	18 16       	cp	r1, r24
    1502:	4c f5       	brge	.+82     	; 0x1556 <CLCD_voidInit+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1504:	6d a9       	ldd	r22, Y+53	; 0x35
    1506:	7e a9       	ldd	r23, Y+54	; 0x36
    1508:	8f a9       	ldd	r24, Y+55	; 0x37
    150a:	98 ad       	ldd	r25, Y+56	; 0x38
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	40 e2       	ldi	r20, 0x20	; 32
    1512:	51 e4       	ldi	r21, 0x41	; 65
    1514:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	bc 01       	movw	r22, r24
    151e:	cd 01       	movw	r24, r26
    1520:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	98 ab       	std	Y+48, r25	; 0x30
    152a:	8f a7       	std	Y+47, r24	; 0x2f
    152c:	0f c0       	rjmp	.+30     	; 0x154c <CLCD_voidInit+0xe2>
    152e:	88 ec       	ldi	r24, 0xC8	; 200
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	9e a7       	std	Y+46, r25	; 0x2e
    1534:	8d a7       	std	Y+45, r24	; 0x2d
    1536:	8d a5       	ldd	r24, Y+45	; 0x2d
    1538:	9e a5       	ldd	r25, Y+46	; 0x2e
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	f1 f7       	brne	.-4      	; 0x153a <CLCD_voidInit+0xd0>
    153e:	9e a7       	std	Y+46, r25	; 0x2e
    1540:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1542:	8f a5       	ldd	r24, Y+47	; 0x2f
    1544:	98 a9       	ldd	r25, Y+48	; 0x30
    1546:	01 97       	sbiw	r24, 0x01	; 1
    1548:	98 ab       	std	Y+48, r25	; 0x30
    154a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154c:	8f a5       	ldd	r24, Y+47	; 0x2f
    154e:	98 a9       	ldd	r25, Y+48	; 0x30
    1550:	00 97       	sbiw	r24, 0x00	; 0
    1552:	69 f7       	brne	.-38     	; 0x152e <CLCD_voidInit+0xc4>
    1554:	14 c0       	rjmp	.+40     	; 0x157e <CLCD_voidInit+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1556:	69 a9       	ldd	r22, Y+49	; 0x31
    1558:	7a a9       	ldd	r23, Y+50	; 0x32
    155a:	8b a9       	ldd	r24, Y+51	; 0x33
    155c:	9c a9       	ldd	r25, Y+52	; 0x34
    155e:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	98 ab       	std	Y+48, r25	; 0x30
    1568:	8f a7       	std	Y+47, r24	; 0x2f
    156a:	8f a5       	ldd	r24, Y+47	; 0x2f
    156c:	98 a9       	ldd	r25, Y+48	; 0x30
    156e:	9c a7       	std	Y+44, r25	; 0x2c
    1570:	8b a7       	std	Y+43, r24	; 0x2b
    1572:	8b a5       	ldd	r24, Y+43	; 0x2b
    1574:	9c a5       	ldd	r25, Y+44	; 0x2c
    1576:	01 97       	sbiw	r24, 0x01	; 1
    1578:	f1 f7       	brne	.-4      	; 0x1576 <CLCD_voidInit+0x10c>
    157a:	9c a7       	std	Y+44, r25	; 0x2c
    157c:	8b a7       	std	Y+43, r24	; 0x2b
	/*delay for more than 30 ms */
	_delay_ms(40);
	CLCD_voidCommand(0x33);
    157e:	83 e3       	ldi	r24, 0x33	; 51
    1580:	0e 94 a9 05 	call	0xb52	; 0xb52 <CLCD_voidCommand>
	CLCD_voidCommand(0x32);
    1584:	82 e3       	ldi	r24, 0x32	; 50
    1586:	0e 94 a9 05 	call	0xb52	; 0xb52 <CLCD_voidCommand>
	/*Function set command:2 lines(N)=1,,,5*8 font size (f=0)*/
	CLCD_voidCommand(0x28);
    158a:	88 e2       	ldi	r24, 0x28	; 40
    158c:	0e 94 a9 05 	call	0xb52	; 0xb52 <CLCD_voidCommand>
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	a0 e8       	ldi	r26, 0x80	; 128
    1596:	bf e3       	ldi	r27, 0x3F	; 63
    1598:	8f a3       	std	Y+39, r24	; 0x27
    159a:	98 a7       	std	Y+40, r25	; 0x28
    159c:	a9 a7       	std	Y+41, r26	; 0x29
    159e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a0:	6f a1       	ldd	r22, Y+39	; 0x27
    15a2:	78 a5       	ldd	r23, Y+40	; 0x28
    15a4:	89 a5       	ldd	r24, Y+41	; 0x29
    15a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	4a ef       	ldi	r20, 0xFA	; 250
    15ae:	54 e4       	ldi	r21, 0x44	; 68
    15b0:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	8b a3       	std	Y+35, r24	; 0x23
    15ba:	9c a3       	std	Y+36, r25	; 0x24
    15bc:	ad a3       	std	Y+37, r26	; 0x25
    15be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15c0:	6b a1       	ldd	r22, Y+35	; 0x23
    15c2:	7c a1       	ldd	r23, Y+36	; 0x24
    15c4:	8d a1       	ldd	r24, Y+37	; 0x25
    15c6:	9e a1       	ldd	r25, Y+38	; 0x26
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	40 e8       	ldi	r20, 0x80	; 128
    15ce:	5f e3       	ldi	r21, 0x3F	; 63
    15d0:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    15d4:	88 23       	and	r24, r24
    15d6:	2c f4       	brge	.+10     	; 0x15e2 <CLCD_voidInit+0x178>
		__ticks = 1;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	9a a3       	std	Y+34, r25	; 0x22
    15de:	89 a3       	std	Y+33, r24	; 0x21
    15e0:	3f c0       	rjmp	.+126    	; 0x1660 <CLCD_voidInit+0x1f6>
	else if (__tmp > 65535)
    15e2:	6b a1       	ldd	r22, Y+35	; 0x23
    15e4:	7c a1       	ldd	r23, Y+36	; 0x24
    15e6:	8d a1       	ldd	r24, Y+37	; 0x25
    15e8:	9e a1       	ldd	r25, Y+38	; 0x26
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	3f ef       	ldi	r19, 0xFF	; 255
    15ee:	4f e7       	ldi	r20, 0x7F	; 127
    15f0:	57 e4       	ldi	r21, 0x47	; 71
    15f2:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    15f6:	18 16       	cp	r1, r24
    15f8:	4c f5       	brge	.+82     	; 0x164c <CLCD_voidInit+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fa:	6f a1       	ldd	r22, Y+39	; 0x27
    15fc:	78 a5       	ldd	r23, Y+40	; 0x28
    15fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1600:	9a a5       	ldd	r25, Y+42	; 0x2a
    1602:	20 e0       	ldi	r18, 0x00	; 0
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	40 e2       	ldi	r20, 0x20	; 32
    1608:	51 e4       	ldi	r21, 0x41	; 65
    160a:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	bc 01       	movw	r22, r24
    1614:	cd 01       	movw	r24, r26
    1616:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	9a a3       	std	Y+34, r25	; 0x22
    1620:	89 a3       	std	Y+33, r24	; 0x21
    1622:	0f c0       	rjmp	.+30     	; 0x1642 <CLCD_voidInit+0x1d8>
    1624:	88 ec       	ldi	r24, 0xC8	; 200
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	98 a3       	std	Y+32, r25	; 0x20
    162a:	8f 8f       	std	Y+31, r24	; 0x1f
    162c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    162e:	98 a1       	ldd	r25, Y+32	; 0x20
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	f1 f7       	brne	.-4      	; 0x1630 <CLCD_voidInit+0x1c6>
    1634:	98 a3       	std	Y+32, r25	; 0x20
    1636:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1638:	89 a1       	ldd	r24, Y+33	; 0x21
    163a:	9a a1       	ldd	r25, Y+34	; 0x22
    163c:	01 97       	sbiw	r24, 0x01	; 1
    163e:	9a a3       	std	Y+34, r25	; 0x22
    1640:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1642:	89 a1       	ldd	r24, Y+33	; 0x21
    1644:	9a a1       	ldd	r25, Y+34	; 0x22
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	69 f7       	brne	.-38     	; 0x1624 <CLCD_voidInit+0x1ba>
    164a:	14 c0       	rjmp	.+40     	; 0x1674 <CLCD_voidInit+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    164c:	6b a1       	ldd	r22, Y+35	; 0x23
    164e:	7c a1       	ldd	r23, Y+36	; 0x24
    1650:	8d a1       	ldd	r24, Y+37	; 0x25
    1652:	9e a1       	ldd	r25, Y+38	; 0x26
    1654:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1658:	dc 01       	movw	r26, r24
    165a:	cb 01       	movw	r24, r22
    165c:	9a a3       	std	Y+34, r25	; 0x22
    165e:	89 a3       	std	Y+33, r24	; 0x21
    1660:	89 a1       	ldd	r24, Y+33	; 0x21
    1662:	9a a1       	ldd	r25, Y+34	; 0x22
    1664:	9e 8f       	std	Y+30, r25	; 0x1e
    1666:	8d 8f       	std	Y+29, r24	; 0x1d
    1668:	8d 8d       	ldd	r24, Y+29	; 0x1d
    166a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	f1 f7       	brne	.-4      	; 0x166c <CLCD_voidInit+0x202>
    1670:	9e 8f       	std	Y+30, r25	; 0x1e
    1672:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Display ON/OFF control:Display enable D=1,cursor disable,C=0,NO Blink cursorB=0*/
	CLCD_voidCommand(0x0c);
    1674:	8c e0       	ldi	r24, 0x0C	; 12
    1676:	0e 94 a9 05 	call	0xb52	; 0xb52 <CLCD_voidCommand>
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	a0 e0       	ldi	r26, 0x00	; 0
    1680:	b0 e4       	ldi	r27, 0x40	; 64
    1682:	89 8f       	std	Y+25, r24	; 0x19
    1684:	9a 8f       	std	Y+26, r25	; 0x1a
    1686:	ab 8f       	std	Y+27, r26	; 0x1b
    1688:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    168a:	69 8d       	ldd	r22, Y+25	; 0x19
    168c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    168e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1690:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	4a ef       	ldi	r20, 0xFA	; 250
    1698:	54 e4       	ldi	r21, 0x44	; 68
    169a:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	8d 8b       	std	Y+21, r24	; 0x15
    16a4:	9e 8b       	std	Y+22, r25	; 0x16
    16a6:	af 8b       	std	Y+23, r26	; 0x17
    16a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16aa:	6d 89       	ldd	r22, Y+21	; 0x15
    16ac:	7e 89       	ldd	r23, Y+22	; 0x16
    16ae:	8f 89       	ldd	r24, Y+23	; 0x17
    16b0:	98 8d       	ldd	r25, Y+24	; 0x18
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e8       	ldi	r20, 0x80	; 128
    16b8:	5f e3       	ldi	r21, 0x3F	; 63
    16ba:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    16be:	88 23       	and	r24, r24
    16c0:	2c f4       	brge	.+10     	; 0x16cc <CLCD_voidInit+0x262>
		__ticks = 1;
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	9c 8b       	std	Y+20, r25	; 0x14
    16c8:	8b 8b       	std	Y+19, r24	; 0x13
    16ca:	3f c0       	rjmp	.+126    	; 0x174a <CLCD_voidInit+0x2e0>
	else if (__tmp > 65535)
    16cc:	6d 89       	ldd	r22, Y+21	; 0x15
    16ce:	7e 89       	ldd	r23, Y+22	; 0x16
    16d0:	8f 89       	ldd	r24, Y+23	; 0x17
    16d2:	98 8d       	ldd	r25, Y+24	; 0x18
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	3f ef       	ldi	r19, 0xFF	; 255
    16d8:	4f e7       	ldi	r20, 0x7F	; 127
    16da:	57 e4       	ldi	r21, 0x47	; 71
    16dc:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    16e0:	18 16       	cp	r1, r24
    16e2:	4c f5       	brge	.+82     	; 0x1736 <CLCD_voidInit+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e4:	69 8d       	ldd	r22, Y+25	; 0x19
    16e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	40 e2       	ldi	r20, 0x20	; 32
    16f2:	51 e4       	ldi	r21, 0x41	; 65
    16f4:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	bc 01       	movw	r22, r24
    16fe:	cd 01       	movw	r24, r26
    1700:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
    1708:	9c 8b       	std	Y+20, r25	; 0x14
    170a:	8b 8b       	std	Y+19, r24	; 0x13
    170c:	0f c0       	rjmp	.+30     	; 0x172c <CLCD_voidInit+0x2c2>
    170e:	88 ec       	ldi	r24, 0xC8	; 200
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	9a 8b       	std	Y+18, r25	; 0x12
    1714:	89 8b       	std	Y+17, r24	; 0x11
    1716:	89 89       	ldd	r24, Y+17	; 0x11
    1718:	9a 89       	ldd	r25, Y+18	; 0x12
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	f1 f7       	brne	.-4      	; 0x171a <CLCD_voidInit+0x2b0>
    171e:	9a 8b       	std	Y+18, r25	; 0x12
    1720:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1722:	8b 89       	ldd	r24, Y+19	; 0x13
    1724:	9c 89       	ldd	r25, Y+20	; 0x14
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	9c 8b       	std	Y+20, r25	; 0x14
    172a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172c:	8b 89       	ldd	r24, Y+19	; 0x13
    172e:	9c 89       	ldd	r25, Y+20	; 0x14
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	69 f7       	brne	.-38     	; 0x170e <CLCD_voidInit+0x2a4>
    1734:	14 c0       	rjmp	.+40     	; 0x175e <CLCD_voidInit+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1736:	6d 89       	ldd	r22, Y+21	; 0x15
    1738:	7e 89       	ldd	r23, Y+22	; 0x16
    173a:	8f 89       	ldd	r24, Y+23	; 0x17
    173c:	98 8d       	ldd	r25, Y+24	; 0x18
    173e:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	9c 8b       	std	Y+20, r25	; 0x14
    1748:	8b 8b       	std	Y+19, r24	; 0x13
    174a:	8b 89       	ldd	r24, Y+19	; 0x13
    174c:	9c 89       	ldd	r25, Y+20	; 0x14
    174e:	98 8b       	std	Y+16, r25	; 0x10
    1750:	8f 87       	std	Y+15, r24	; 0x0f
    1752:	8f 85       	ldd	r24, Y+15	; 0x0f
    1754:	98 89       	ldd	r25, Y+16	; 0x10
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	f1 f7       	brne	.-4      	; 0x1756 <CLCD_voidInit+0x2ec>
    175a:	98 8b       	std	Y+16, r25	; 0x10
    175c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(2);
	/*RETURN HOME*/
	CLCD_voidCommand(0x02);
    175e:	82 e0       	ldi	r24, 0x02	; 2
    1760:	0e 94 a9 05 	call	0xb52	; 0xb52 <CLCD_voidCommand>
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	a0 e8       	ldi	r26, 0x80	; 128
    176a:	bf e3       	ldi	r27, 0x3F	; 63
    176c:	8b 87       	std	Y+11, r24	; 0x0b
    176e:	9c 87       	std	Y+12, r25	; 0x0c
    1770:	ad 87       	std	Y+13, r26	; 0x0d
    1772:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1774:	6b 85       	ldd	r22, Y+11	; 0x0b
    1776:	7c 85       	ldd	r23, Y+12	; 0x0c
    1778:	8d 85       	ldd	r24, Y+13	; 0x0d
    177a:	9e 85       	ldd	r25, Y+14	; 0x0e
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	4a ef       	ldi	r20, 0xFA	; 250
    1782:	54 e4       	ldi	r21, 0x44	; 68
    1784:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	8f 83       	std	Y+7, r24	; 0x07
    178e:	98 87       	std	Y+8, r25	; 0x08
    1790:	a9 87       	std	Y+9, r26	; 0x09
    1792:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1794:	6f 81       	ldd	r22, Y+7	; 0x07
    1796:	78 85       	ldd	r23, Y+8	; 0x08
    1798:	89 85       	ldd	r24, Y+9	; 0x09
    179a:	9a 85       	ldd	r25, Y+10	; 0x0a
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e8       	ldi	r20, 0x80	; 128
    17a2:	5f e3       	ldi	r21, 0x3F	; 63
    17a4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    17a8:	88 23       	and	r24, r24
    17aa:	2c f4       	brge	.+10     	; 0x17b6 <CLCD_voidInit+0x34c>
		__ticks = 1;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	9e 83       	std	Y+6, r25	; 0x06
    17b2:	8d 83       	std	Y+5, r24	; 0x05
    17b4:	3f c0       	rjmp	.+126    	; 0x1834 <CLCD_voidInit+0x3ca>
	else if (__tmp > 65535)
    17b6:	6f 81       	ldd	r22, Y+7	; 0x07
    17b8:	78 85       	ldd	r23, Y+8	; 0x08
    17ba:	89 85       	ldd	r24, Y+9	; 0x09
    17bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	3f ef       	ldi	r19, 0xFF	; 255
    17c2:	4f e7       	ldi	r20, 0x7F	; 127
    17c4:	57 e4       	ldi	r21, 0x47	; 71
    17c6:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    17ca:	18 16       	cp	r1, r24
    17cc:	4c f5       	brge	.+82     	; 0x1820 <CLCD_voidInit+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e2       	ldi	r20, 0x20	; 32
    17dc:	51 e4       	ldi	r21, 0x41	; 65
    17de:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	bc 01       	movw	r22, r24
    17e8:	cd 01       	movw	r24, r26
    17ea:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	9e 83       	std	Y+6, r25	; 0x06
    17f4:	8d 83       	std	Y+5, r24	; 0x05
    17f6:	0f c0       	rjmp	.+30     	; 0x1816 <CLCD_voidInit+0x3ac>
    17f8:	88 ec       	ldi	r24, 0xC8	; 200
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	9c 83       	std	Y+4, r25	; 0x04
    17fe:	8b 83       	std	Y+3, r24	; 0x03
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	9c 81       	ldd	r25, Y+4	; 0x04
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <CLCD_voidInit+0x39a>
    1808:	9c 83       	std	Y+4, r25	; 0x04
    180a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180c:	8d 81       	ldd	r24, Y+5	; 0x05
    180e:	9e 81       	ldd	r25, Y+6	; 0x06
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	9e 83       	std	Y+6, r25	; 0x06
    1814:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1816:	8d 81       	ldd	r24, Y+5	; 0x05
    1818:	9e 81       	ldd	r25, Y+6	; 0x06
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	69 f7       	brne	.-38     	; 0x17f8 <CLCD_voidInit+0x38e>
    181e:	14 c0       	rjmp	.+40     	; 0x1848 <CLCD_voidInit+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1820:	6f 81       	ldd	r22, Y+7	; 0x07
    1822:	78 85       	ldd	r23, Y+8	; 0x08
    1824:	89 85       	ldd	r24, Y+9	; 0x09
    1826:	9a 85       	ldd	r25, Y+10	; 0x0a
    1828:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	9e 83       	std	Y+6, r25	; 0x06
    1832:	8d 83       	std	Y+5, r24	; 0x05
    1834:	8d 81       	ldd	r24, Y+5	; 0x05
    1836:	9e 81       	ldd	r25, Y+6	; 0x06
    1838:	9a 83       	std	Y+2, r25	; 0x02
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	9a 81       	ldd	r25, Y+2	; 0x02
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	f1 f7       	brne	.-4      	; 0x1840 <CLCD_voidInit+0x3d6>
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	/*Clear display*/
	CLCD_voidCommand(0x01);
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	0e 94 a9 05 	call	0xb52	; 0xb52 <CLCD_voidCommand>
}
    184e:	e8 96       	adiw	r28, 0x38	; 56
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	de bf       	out	0x3e, r29	; 62
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	cd bf       	out	0x3d, r28	; 61
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <CLCD_GoTOXY>:
void CLCD_GoTOXY(u8int_t copy_u8Xpos,u8int_t copy_u8Ypos)
{
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	00 d0       	rcall	.+0      	; 0x1866 <CLCD_GoTOXY+0x6>
    1866:	0f 92       	push	r0
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	8a 83       	std	Y+2, r24	; 0x02
    186e:	6b 83       	std	Y+3, r22	; 0x03
	u8int_t Local_u8Address;
	/*Location at first line*/
	if(copy_u8Xpos==0)//ifx==0->adress=y
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	88 23       	and	r24, r24
    1874:	19 f4       	brne	.+6      	; 0x187c <CLCD_GoTOXY+0x1c>
	{
		Local_u8Address=(copy_u8Ypos);
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	89 83       	std	Y+1, r24	; 0x01
    187a:	14 c0       	rjmp	.+40     	; 0x18a4 <CLCD_GoTOXY+0x44>

	}

	/*Location at second line*/
/*x->.row(0,1,2,3), y-> col(0...19*/
	else if(copy_u8Xpos==1)
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	21 f4       	brne	.+8      	; 0x188a <CLCD_GoTOXY+0x2a>
	{
		Local_u8Address=(0x40+copy_u8Ypos);
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	80 5c       	subi	r24, 0xC0	; 192
    1886:	89 83       	std	Y+1, r24	; 0x01
    1888:	0d c0       	rjmp	.+26     	; 0x18a4 <CLCD_GoTOXY+0x44>
	}

	else if(copy_u8Xpos==2)
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	82 30       	cpi	r24, 0x02	; 2
    188e:	21 f4       	brne	.+8      	; 0x1898 <CLCD_GoTOXY+0x38>
	{
		Local_u8Address=(0x14+copy_u8Ypos);
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	8c 5e       	subi	r24, 0xEC	; 236
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	06 c0       	rjmp	.+12     	; 0x18a4 <CLCD_GoTOXY+0x44>
	}

	else if(copy_u8Xpos==3)
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	83 30       	cpi	r24, 0x03	; 3
    189c:	19 f4       	brne	.+6      	; 0x18a4 <CLCD_GoTOXY+0x44>
	{
		Local_u8Address=(0x54+copy_u8Ypos);
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	8c 5a       	subi	r24, 0xAC	; 172
    18a2:	89 83       	std	Y+1, r24	; 0x01
	}


	/*Set DDRAM address in Address Counter */
	//128->for address counter
	CLCD_voidCommand(Local_u8Address+0x80);
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	80 58       	subi	r24, 0x80	; 128
    18a8:	0e 94 a9 05 	call	0xb52	; 0xb52 <CLCD_voidCommand>
}
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	cf 91       	pop	r28
    18b4:	df 91       	pop	r29
    18b6:	08 95       	ret

000018b8 <CLCD_voidSendString>:
void CLCD_voidSendString(u8int_t* String)
{
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	00 d0       	rcall	.+0      	; 0x18be <CLCD_voidSendString+0x6>
    18be:	0f 92       	push	r0
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	9b 83       	std	Y+3, r25	; 0x03
    18c6:	8a 83       	std	Y+2, r24	; 0x02
	u8int_t Counter=0;
    18c8:	19 82       	std	Y+1, r1	; 0x01
    18ca:	0e c0       	rjmp	.+28     	; 0x18e8 <CLCD_voidSendString+0x30>
	while(String[Counter]!='\0')
	{
		CLCD_voidSendData(String[Counter]);
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	9b 81       	ldd	r25, Y+3	; 0x03
    18d6:	fc 01       	movw	r30, r24
    18d8:	e2 0f       	add	r30, r18
    18da:	f3 1f       	adc	r31, r19
    18dc:	80 81       	ld	r24, Z
    18de:	0e 94 ef 07 	call	0xfde	; 0xfde <CLCD_voidSendData>
		Counter++;
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	8f 5f       	subi	r24, 0xFF	; 255
    18e6:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidCommand(Local_u8Address+0x80);
}
void CLCD_voidSendString(u8int_t* String)
{
	u8int_t Counter=0;
	while(String[Counter]!='\0')
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	9b 81       	ldd	r25, Y+3	; 0x03
    18f2:	fc 01       	movw	r30, r24
    18f4:	e2 0f       	add	r30, r18
    18f6:	f3 1f       	adc	r31, r19
    18f8:	80 81       	ld	r24, Z
    18fa:	88 23       	and	r24, r24
    18fc:	39 f7       	brne	.-50     	; 0x18cc <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(String[Counter]);
		Counter++;
	}
}
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	08 95       	ret

0000190a <CLCD_voidWriteNumber>:
void CLCD_voidWriteNumber(u32 copy_u32Number)
{
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	27 97       	sbiw	r28, 0x07	; 7
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	6c 83       	std	Y+4, r22	; 0x04
    1920:	7d 83       	std	Y+5, r23	; 0x05
    1922:	8e 83       	std	Y+6, r24	; 0x06
    1924:	9f 83       	std	Y+7, r25	; 0x07
	u8int_t Local_u8Digit;
	u8int_t Local_u8Counter=0;
    1926:	1a 82       	std	Y+2, r1	; 0x02
	s8 Local_u8Counter2;
	static u8int_t Local_ArrayOfChar[10]={'0','1','2','3','4','5','6','7','8','9'};
	static u8int_t Local_ArrayOfDigits[10];

	if(copy_u32Number==0)
    1928:	8c 81       	ldd	r24, Y+4	; 0x04
    192a:	9d 81       	ldd	r25, Y+5	; 0x05
    192c:	ae 81       	ldd	r26, Y+6	; 0x06
    192e:	bf 81       	ldd	r27, Y+7	; 0x07
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	a1 05       	cpc	r26, r1
    1934:	b1 05       	cpc	r27, r1
    1936:	b9 f5       	brne	.+110    	; 0x19a6 <CLCD_voidWriteNumber+0x9c>
	{
		CLCD_voidSendData(Local_ArrayOfChar[0]);
    1938:	80 91 c5 00 	lds	r24, 0x00C5
    193c:	0e 94 ef 07 	call	0xfde	; 0xfde <CLCD_voidSendData>
    1940:	4e c0       	rjmp	.+156    	; 0x19de <CLCD_voidWriteNumber+0xd4>
	else
	{

		while(copy_u32Number>0)
		{
			Local_u8Digit=copy_u32Number%10;
    1942:	8c 81       	ldd	r24, Y+4	; 0x04
    1944:	9d 81       	ldd	r25, Y+5	; 0x05
    1946:	ae 81       	ldd	r26, Y+6	; 0x06
    1948:	bf 81       	ldd	r27, Y+7	; 0x07
    194a:	2a e0       	ldi	r18, 0x0A	; 10
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	50 e0       	ldi	r21, 0x00	; 0
    1952:	bc 01       	movw	r22, r24
    1954:	cd 01       	movw	r24, r26
    1956:	0e 94 87 18 	call	0x310e	; 0x310e <__udivmodsi4>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	8b 83       	std	Y+3, r24	; 0x03
			copy_u32Number=copy_u32Number/10;
    1960:	8c 81       	ldd	r24, Y+4	; 0x04
    1962:	9d 81       	ldd	r25, Y+5	; 0x05
    1964:	ae 81       	ldd	r26, Y+6	; 0x06
    1966:	bf 81       	ldd	r27, Y+7	; 0x07
    1968:	2a e0       	ldi	r18, 0x0A	; 10
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e0       	ldi	r20, 0x00	; 0
    196e:	50 e0       	ldi	r21, 0x00	; 0
    1970:	bc 01       	movw	r22, r24
    1972:	cd 01       	movw	r24, r26
    1974:	0e 94 87 18 	call	0x310e	; 0x310e <__udivmodsi4>
    1978:	da 01       	movw	r26, r20
    197a:	c9 01       	movw	r24, r18
    197c:	8c 83       	std	Y+4, r24	; 0x04
    197e:	9d 83       	std	Y+5, r25	; 0x05
    1980:	ae 83       	std	Y+6, r26	; 0x06
    1982:	bf 83       	std	Y+7, r27	; 0x07
			Local_ArrayOfDigits[Local_u8Counter]=Local_ArrayOfChar[Local_u8Digit];
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	88 2f       	mov	r24, r24
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	fc 01       	movw	r30, r24
    1992:	eb 53       	subi	r30, 0x3B	; 59
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	80 81       	ld	r24, Z
    1998:	f9 01       	movw	r30, r18
    199a:	e0 53       	subi	r30, 0x30	; 48
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	80 83       	st	Z, r24
			Local_u8Counter++;
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	8f 5f       	subi	r24, 0xFF	; 255
    19a4:	8a 83       	std	Y+2, r24	; 0x02
		CLCD_voidSendData(Local_ArrayOfChar[0]);
	}
	else
	{

		while(copy_u32Number>0)
    19a6:	8c 81       	ldd	r24, Y+4	; 0x04
    19a8:	9d 81       	ldd	r25, Y+5	; 0x05
    19aa:	ae 81       	ldd	r26, Y+6	; 0x06
    19ac:	bf 81       	ldd	r27, Y+7	; 0x07
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	a1 05       	cpc	r26, r1
    19b2:	b1 05       	cpc	r27, r1
    19b4:	31 f6       	brne	.-116    	; 0x1942 <CLCD_voidWriteNumber+0x38>
			copy_u32Number=copy_u32Number/10;
			Local_ArrayOfDigits[Local_u8Counter]=Local_ArrayOfChar[Local_u8Digit];
			Local_u8Counter++;
		}

		for(Local_u8Counter2=Local_u8Counter-1;Local_u8Counter2>=0;Local_u8Counter2--)
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	81 50       	subi	r24, 0x01	; 1
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	0d c0       	rjmp	.+26     	; 0x19d8 <CLCD_voidWriteNumber+0xce>
		{
			CLCD_voidSendData(Local_ArrayOfDigits[Local_u8Counter2]);
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	99 27       	eor	r25, r25
    19c2:	87 fd       	sbrc	r24, 7
    19c4:	90 95       	com	r25
    19c6:	fc 01       	movw	r30, r24
    19c8:	e0 53       	subi	r30, 0x30	; 48
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	80 81       	ld	r24, Z
    19ce:	0e 94 ef 07 	call	0xfde	; 0xfde <CLCD_voidSendData>
			copy_u32Number=copy_u32Number/10;
			Local_ArrayOfDigits[Local_u8Counter]=Local_ArrayOfChar[Local_u8Digit];
			Local_u8Counter++;
		}

		for(Local_u8Counter2=Local_u8Counter-1;Local_u8Counter2>=0;Local_u8Counter2--)
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	81 50       	subi	r24, 0x01	; 1
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	88 23       	and	r24, r24
    19dc:	84 f7       	brge	.-32     	; 0x19be <CLCD_voidWriteNumber+0xb4>
		{
			CLCD_voidSendData(Local_ArrayOfDigits[Local_u8Counter2]);
		}
	}
}
    19de:	27 96       	adiw	r28, 0x07	; 7
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	08 95       	ret

000019f0 <write_special_character>:
void write_special_character(u8int_t *pattern_ARR, u8int_t position,u8int_t x_pos, u8int_t y_pos )
{
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	27 97       	sbiw	r28, 0x07	; 7
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
    1a04:	9c 83       	std	Y+4, r25	; 0x04
    1a06:	8b 83       	std	Y+3, r24	; 0x03
    1a08:	6d 83       	std	Y+5, r22	; 0x05
    1a0a:	4e 83       	std	Y+6, r20	; 0x06
    1a0c:	2f 83       	std	Y+7, r18	; 0x07
	/*calculate cgram adress whose block 8 bytes*/
	CLCD_voidCommand(0x40+(position * 8));
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	88 2f       	mov	r24, r24
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	08 96       	adiw	r24, 0x08	; 8
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	0e 94 a9 05 	call	0xb52	; 0xb52 <CLCD_voidCommand>
/*write pattern into cgram*/
	for(int i=0;i<8;i++)
    1a26:	1a 82       	std	Y+2, r1	; 0x02
    1a28:	19 82       	std	Y+1, r1	; 0x01
    1a2a:	0f c0       	rjmp	.+30     	; 0x1a4a <write_special_character+0x5a>
	{
		CLCD_voidSendData(pattern_ARR[i]);
    1a2c:	29 81       	ldd	r18, Y+1	; 0x01
    1a2e:	3a 81       	ldd	r19, Y+2	; 0x02
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	9c 81       	ldd	r25, Y+4	; 0x04
    1a34:	fc 01       	movw	r30, r24
    1a36:	e2 0f       	add	r30, r18
    1a38:	f3 1f       	adc	r31, r19
    1a3a:	80 81       	ld	r24, Z
    1a3c:	0e 94 ef 07 	call	0xfde	; 0xfde <CLCD_voidSendData>
void write_special_character(u8int_t *pattern_ARR, u8int_t position,u8int_t x_pos, u8int_t y_pos )
{
	/*calculate cgram adress whose block 8 bytes*/
	CLCD_voidCommand(0x40+(position * 8));
/*write pattern into cgram*/
	for(int i=0;i<8;i++)
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	9a 81       	ldd	r25, Y+2	; 0x02
    1a44:	01 96       	adiw	r24, 0x01	; 1
    1a46:	9a 83       	std	Y+2, r25	; 0x02
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4e:	88 30       	cpi	r24, 0x08	; 8
    1a50:	91 05       	cpc	r25, r1
    1a52:	64 f3       	brlt	.-40     	; 0x1a2c <write_special_character+0x3c>
	{
		CLCD_voidSendData(pattern_ARR[i]);
	}

	/*go to ddram to display pattern*/
CLCD_GoTOXY(x_pos,y_pos);
    1a54:	8e 81       	ldd	r24, Y+6	; 0x06
    1a56:	6f 81       	ldd	r22, Y+7	; 0x07
    1a58:	0e 94 30 0c 	call	0x1860	; 0x1860 <CLCD_GoTOXY>
CLCD_voidSendData(position);
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	0e 94 ef 07 	call	0xfde	; 0xfde <CLCD_voidSendData>

}
    1a62:	27 96       	adiw	r28, 0x07	; 7
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	de bf       	out	0x3e, r29	; 62
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	cd bf       	out	0x3d, r28	; 61
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <CLCD_Void_LCDClear>:
void CLCD_Void_LCDClear(void)
{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	cd b7       	in	r28, 0x3d	; 61
    1a7a:	de b7       	in	r29, 0x3e	; 62
    CLCD_voidCommand(0x01);
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	0e 94 a9 05 	call	0xb52	; 0xb52 <CLCD_voidCommand>
}
    1a82:	cf 91       	pop	r28
    1a84:	df 91       	pop	r29
    1a86:	08 95       	ret

00001a88 <UART_init>:
#include<avr/interrupt.h>
#include "STD_TYPES.h"
#include "common_macros.h"

void UART_init(u32 baud_rate)
{
    1a88:	df 93       	push	r29
    1a8a:	cf 93       	push	r28
    1a8c:	00 d0       	rcall	.+0      	; 0x1a8e <UART_init+0x6>
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <UART_init+0x8>
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <UART_init+0xa>
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	6b 83       	std	Y+3, r22	; 0x03
    1a98:	7c 83       	std	Y+4, r23	; 0x04
    1a9a:	8d 83       	std	Y+5, r24	; 0x05
    1a9c:	9e 83       	std	Y+6, r25	; 0x06
	u16 ubrr_value = 0;
    1a9e:	1a 82       	std	Y+2, r1	; 0x02
    1aa0:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1aa2:	eb e2       	ldi	r30, 0x2B	; 43
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	82 e0       	ldi	r24, 0x02	; 2
    1aa8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1aaa:	ea e2       	ldi	r30, 0x2A	; 42
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	88 e1       	ldi	r24, 0x18	; 24
    1ab0:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    1ab2:	e0 e4       	ldi	r30, 0x40	; 64
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	86 e8       	ldi	r24, 0x86	; 134
    1ab8:	80 83       	st	Z, r24

	/* Calculate the UBRR register value */
	ubrr_value = (u16)(((F_CPU / (baud_rate * 8UL))) - 1);
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	9c 81       	ldd	r25, Y+4	; 0x04
    1abe:	ad 81       	ldd	r26, Y+5	; 0x05
    1ac0:	be 81       	ldd	r27, Y+6	; 0x06
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	aa 1f       	adc	r26, r26
    1ac8:	bb 1f       	adc	r27, r27
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	aa 1f       	adc	r26, r26
    1ad0:	bb 1f       	adc	r27, r27
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	aa 1f       	adc	r26, r26
    1ad8:	bb 1f       	adc	r27, r27
    1ada:	9c 01       	movw	r18, r24
    1adc:	ad 01       	movw	r20, r26
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	92 e1       	ldi	r25, 0x12	; 18
    1ae2:	aa e7       	ldi	r26, 0x7A	; 122
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	bc 01       	movw	r22, r24
    1ae8:	cd 01       	movw	r24, r26
    1aea:	0e 94 87 18 	call	0x310e	; 0x310e <__udivmodsi4>
    1aee:	da 01       	movw	r26, r20
    1af0:	c9 01       	movw	r24, r18
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	9a 83       	std	Y+2, r25	; 0x02
    1af6:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1af8:	e0 e4       	ldi	r30, 0x40	; 64
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	9a 81       	ldd	r25, Y+2	; 0x02
    1b00:	89 2f       	mov	r24, r25
    1b02:	99 27       	eor	r25, r25
    1b04:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1b06:	e9 e2       	ldi	r30, 0x29	; 41
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	80 83       	st	Z, r24
}
    1b0e:	26 96       	adiw	r28, 0x06	; 6
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const u8int_t data)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	0f 92       	push	r0
    1b26:	cd b7       	in	r28, 0x3d	; 61
    1b28:	de b7       	in	r29, 0x3e	; 62
    1b2a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1b2c:	eb e2       	ldi	r30, 0x2B	; 43
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	88 2f       	mov	r24, r24
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	80 72       	andi	r24, 0x20	; 32
    1b38:	90 70       	andi	r25, 0x00	; 0
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	b9 f3       	breq	.-18     	; 0x1b2c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1b3e:	ec e2       	ldi	r30, 0x2C	; 44
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1b46:	0f 90       	pop	r0
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
u8int_t UART_recieveByte(void)
{
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1b56:	eb e2       	ldi	r30, 0x2B	; 43
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	88 23       	and	r24, r24
    1b5e:	dc f7       	brge	.-10     	; 0x1b56 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    1b60:	ec e2       	ldi	r30, 0x2C	; 44
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
}
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const u8int_t *Str)
{
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <UART_sendString+0x6>
    1b72:	0f 92       	push	r0
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	9b 83       	std	Y+3, r25	; 0x03
    1b7a:	8a 83       	std	Y+2, r24	; 0x02
	u8int_t i = 0;
    1b7c:	19 82       	std	Y+1, r1	; 0x01
    1b7e:	0e c0       	rjmp	.+28     	; 0x1b9c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1b80:	89 81       	ldd	r24, Y+1	; 0x01
    1b82:	28 2f       	mov	r18, r24
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	e2 0f       	add	r30, r18
    1b8e:	f3 1f       	adc	r31, r19
    1b90:	80 81       	ld	r24, Z
    1b92:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <UART_sendByte>
		i++;
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	8f 5f       	subi	r24, 0xFF	; 255
    1b9a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const u8int_t *Str)
{
	u8int_t i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	e2 0f       	add	r30, r18
    1baa:	f3 1f       	adc	r31, r19
    1bac:	80 81       	ld	r24, Z
    1bae:	88 23       	and	r24, r24
    1bb0:	39 f7       	brne	.-50     	; 0x1b80 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(u8int_t *Str)
{
    1bbe:	0f 93       	push	r16
    1bc0:	1f 93       	push	r17
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <UART_receiveString+0xa>
    1bc8:	0f 92       	push	r0
    1bca:	cd b7       	in	r28, 0x3d	; 61
    1bcc:	de b7       	in	r29, 0x3e	; 62
    1bce:	9b 83       	std	Y+3, r25	; 0x03
    1bd0:	8a 83       	std	Y+2, r24	; 0x02
	u8int_t i = 0;
    1bd2:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	8a 81       	ldd	r24, Y+2	; 0x02
    1bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bde:	8c 01       	movw	r16, r24
    1be0:	02 0f       	add	r16, r18
    1be2:	13 1f       	adc	r17, r19
    1be4:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <UART_recieveByte>
    1be8:	f8 01       	movw	r30, r16
    1bea:	80 83       	st	Z, r24
    1bec:	0f c0       	rjmp	.+30     	; 0x1c0c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	8f 5f       	subi	r24, 0xFF	; 255
    1bf2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bfe:	8c 01       	movw	r16, r24
    1c00:	02 0f       	add	r16, r18
    1c02:	13 1f       	adc	r17, r19
    1c04:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <UART_recieveByte>
    1c08:	f8 01       	movw	r30, r16
    1c0a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	9b 81       	ldd	r25, Y+3	; 0x03
    1c16:	fc 01       	movw	r30, r24
    1c18:	e2 0f       	add	r30, r18
    1c1a:	f3 1f       	adc	r31, r19
    1c1c:	80 81       	ld	r24, Z
    1c1e:	83 32       	cpi	r24, 0x23	; 35
    1c20:	31 f7       	brne	.-52     	; 0x1bee <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	e2 0f       	add	r30, r18
    1c30:	f3 1f       	adc	r31, r19
    1c32:	10 82       	st	Z, r1
}
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	1f 91       	pop	r17
    1c40:	0f 91       	pop	r16
    1c42:	08 95       	ret

00001c44 <initRandomSeed>:
#include "LCD_config.h"
#include <util/delay.h>


// Function to initialize the random number generator
void initRandomSeed() {
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <initRandomSeed+0x6>
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
	uint16_t seed = eeprom_read_word((uint16_t*) 0); // Read a seed from EEPROM
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <__eerd_word_m32>
    1c56:	9a 83       	std	Y+2, r25	; 0x02
    1c58:	89 83       	std	Y+1, r24	; 0x01
	if (seed == 0xFFFF) {
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5e:	2f ef       	ldi	r18, 0xFF	; 255
    1c60:	8f 3f       	cpi	r24, 0xFF	; 255
    1c62:	92 07       	cpc	r25, r18
    1c64:	59 f4       	brne	.+22     	; 0x1c7c <initRandomSeed+0x38>
		seed = 42; // Default seed value if EEPROM is empty
    1c66:	8a e2       	ldi	r24, 0x2A	; 42
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	9a 83       	std	Y+2, r25	; 0x02
    1c6c:	89 83       	std	Y+1, r24	; 0x01
		eeprom_write_word((uint16_t*) 0, seed); // Write the seed to EEPROM
    1c6e:	29 81       	ldd	r18, Y+1	; 0x01
    1c70:	3a 81       	ldd	r19, Y+2	; 0x02
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	b9 01       	movw	r22, r18
    1c78:	0e 94 1e 1e 	call	0x3c3c	; 0x3c3c <__eewr_word_m32>
	}
	srand(rand() ^ seed ); // Initialize the random number generator with the seed
    1c7c:	0e 94 31 19 	call	0x3262	; 0x3262 <rand>
    1c80:	9c 01       	movw	r18, r24
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	9a 81       	ldd	r25, Y+2	; 0x02
    1c86:	82 27       	eor	r24, r18
    1c88:	93 27       	eor	r25, r19
    1c8a:	0e 94 36 19 	call	0x326c	; 0x326c <srand>
}
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <GenerateRandomHexNumber>:
unsigned int GenerateRandomHexNumber() {
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
	return rand();
    1ca0:	0e 94 31 19 	call	0x3262	; 0x3262 <rand>
	_delay_ms(100);
}
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <main>:


int main(void)
{
    1caa:	0f 93       	push	r16
    1cac:	1f 93       	push	r17
    1cae:	df 93       	push	r29
    1cb0:	cf 93       	push	r28
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
    1cb6:	c6 59       	subi	r28, 0x96	; 150
    1cb8:	d0 40       	sbci	r29, 0x00	; 0
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	f8 94       	cli
    1cbe:	de bf       	out	0x3e, r29	; 62
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	cd bf       	out	0x3d, r28	; 61
	static u8int_t flag=0;
	u8int_t data;
	char str[9];
	char request1[9]="3101AA00";
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	8a 59       	subi	r24, 0x9A	; 154
    1cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cca:	c8 57       	subi	r28, 0x78	; 120
    1ccc:	df 4f       	sbci	r29, 0xFF	; 255
    1cce:	99 83       	std	Y+1, r25	; 0x01
    1cd0:	88 83       	st	Y, r24
    1cd2:	c8 58       	subi	r28, 0x88	; 136
    1cd4:	d0 40       	sbci	r29, 0x00	; 0
    1cd6:	8e e9       	ldi	r24, 0x9E	; 158
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	c6 57       	subi	r28, 0x76	; 118
    1cdc:	df 4f       	sbci	r29, 0xFF	; 255
    1cde:	99 83       	std	Y+1, r25	; 0x01
    1ce0:	88 83       	st	Y, r24
    1ce2:	ca 58       	subi	r28, 0x8A	; 138
    1ce4:	d0 40       	sbci	r29, 0x00	; 0
    1ce6:	99 e0       	ldi	r25, 0x09	; 9
    1ce8:	c4 57       	subi	r28, 0x74	; 116
    1cea:	df 4f       	sbci	r29, 0xFF	; 255
    1cec:	98 83       	st	Y, r25
    1cee:	cc 58       	subi	r28, 0x8C	; 140
    1cf0:	d0 40       	sbci	r29, 0x00	; 0
    1cf2:	c6 57       	subi	r28, 0x76	; 118
    1cf4:	df 4f       	sbci	r29, 0xFF	; 255
    1cf6:	e8 81       	ld	r30, Y
    1cf8:	f9 81       	ldd	r31, Y+1	; 0x01
    1cfa:	ca 58       	subi	r28, 0x8A	; 138
    1cfc:	d0 40       	sbci	r29, 0x00	; 0
    1cfe:	00 80       	ld	r0, Z
    1d00:	c6 57       	subi	r28, 0x76	; 118
    1d02:	df 4f       	sbci	r29, 0xFF	; 255
    1d04:	88 81       	ld	r24, Y
    1d06:	99 81       	ldd	r25, Y+1	; 0x01
    1d08:	ca 58       	subi	r28, 0x8A	; 138
    1d0a:	d0 40       	sbci	r29, 0x00	; 0
    1d0c:	01 96       	adiw	r24, 0x01	; 1
    1d0e:	c6 57       	subi	r28, 0x76	; 118
    1d10:	df 4f       	sbci	r29, 0xFF	; 255
    1d12:	99 83       	std	Y+1, r25	; 0x01
    1d14:	88 83       	st	Y, r24
    1d16:	ca 58       	subi	r28, 0x8A	; 138
    1d18:	d0 40       	sbci	r29, 0x00	; 0
    1d1a:	c8 57       	subi	r28, 0x78	; 120
    1d1c:	df 4f       	sbci	r29, 0xFF	; 255
    1d1e:	e8 81       	ld	r30, Y
    1d20:	f9 81       	ldd	r31, Y+1	; 0x01
    1d22:	c8 58       	subi	r28, 0x88	; 136
    1d24:	d0 40       	sbci	r29, 0x00	; 0
    1d26:	00 82       	st	Z, r0
    1d28:	c8 57       	subi	r28, 0x78	; 120
    1d2a:	df 4f       	sbci	r29, 0xFF	; 255
    1d2c:	88 81       	ld	r24, Y
    1d2e:	99 81       	ldd	r25, Y+1	; 0x01
    1d30:	c8 58       	subi	r28, 0x88	; 136
    1d32:	d0 40       	sbci	r29, 0x00	; 0
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	c8 57       	subi	r28, 0x78	; 120
    1d38:	df 4f       	sbci	r29, 0xFF	; 255
    1d3a:	99 83       	std	Y+1, r25	; 0x01
    1d3c:	88 83       	st	Y, r24
    1d3e:	c8 58       	subi	r28, 0x88	; 136
    1d40:	d0 40       	sbci	r29, 0x00	; 0
    1d42:	c4 57       	subi	r28, 0x74	; 116
    1d44:	df 4f       	sbci	r29, 0xFF	; 255
    1d46:	98 81       	ld	r25, Y
    1d48:	cc 58       	subi	r28, 0x8C	; 140
    1d4a:	d0 40       	sbci	r29, 0x00	; 0
    1d4c:	91 50       	subi	r25, 0x01	; 1
    1d4e:	c4 57       	subi	r28, 0x74	; 116
    1d50:	df 4f       	sbci	r29, 0xFF	; 255
    1d52:	98 83       	st	Y, r25
    1d54:	cc 58       	subi	r28, 0x8C	; 140
    1d56:	d0 40       	sbci	r29, 0x00	; 0
    1d58:	c4 57       	subi	r28, 0x74	; 116
    1d5a:	df 4f       	sbci	r29, 0xFF	; 255
    1d5c:	e8 81       	ld	r30, Y
    1d5e:	cc 58       	subi	r28, 0x8C	; 140
    1d60:	d0 40       	sbci	r29, 0x00	; 0
    1d62:	ee 23       	and	r30, r30
    1d64:	31 f6       	brne	.-116    	; 0x1cf2 <main+0x48>
	char request2[9]="27010000";
    1d66:	ce 01       	movw	r24, r28
    1d68:	81 59       	subi	r24, 0x91	; 145
    1d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6c:	c3 57       	subi	r28, 0x73	; 115
    1d6e:	df 4f       	sbci	r29, 0xFF	; 255
    1d70:	99 83       	std	Y+1, r25	; 0x01
    1d72:	88 83       	st	Y, r24
    1d74:	cd 58       	subi	r28, 0x8D	; 141
    1d76:	d0 40       	sbci	r29, 0x00	; 0
    1d78:	87 ea       	ldi	r24, 0xA7	; 167
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	c1 57       	subi	r28, 0x71	; 113
    1d7e:	df 4f       	sbci	r29, 0xFF	; 255
    1d80:	99 83       	std	Y+1, r25	; 0x01
    1d82:	88 83       	st	Y, r24
    1d84:	cf 58       	subi	r28, 0x8F	; 143
    1d86:	d0 40       	sbci	r29, 0x00	; 0
    1d88:	99 e0       	ldi	r25, 0x09	; 9
    1d8a:	cf 56       	subi	r28, 0x6F	; 111
    1d8c:	df 4f       	sbci	r29, 0xFF	; 255
    1d8e:	98 83       	st	Y, r25
    1d90:	c1 59       	subi	r28, 0x91	; 145
    1d92:	d0 40       	sbci	r29, 0x00	; 0
    1d94:	c1 57       	subi	r28, 0x71	; 113
    1d96:	df 4f       	sbci	r29, 0xFF	; 255
    1d98:	e8 81       	ld	r30, Y
    1d9a:	f9 81       	ldd	r31, Y+1	; 0x01
    1d9c:	cf 58       	subi	r28, 0x8F	; 143
    1d9e:	d0 40       	sbci	r29, 0x00	; 0
    1da0:	00 80       	ld	r0, Z
    1da2:	c1 57       	subi	r28, 0x71	; 113
    1da4:	df 4f       	sbci	r29, 0xFF	; 255
    1da6:	88 81       	ld	r24, Y
    1da8:	99 81       	ldd	r25, Y+1	; 0x01
    1daa:	cf 58       	subi	r28, 0x8F	; 143
    1dac:	d0 40       	sbci	r29, 0x00	; 0
    1dae:	01 96       	adiw	r24, 0x01	; 1
    1db0:	c1 57       	subi	r28, 0x71	; 113
    1db2:	df 4f       	sbci	r29, 0xFF	; 255
    1db4:	99 83       	std	Y+1, r25	; 0x01
    1db6:	88 83       	st	Y, r24
    1db8:	cf 58       	subi	r28, 0x8F	; 143
    1dba:	d0 40       	sbci	r29, 0x00	; 0
    1dbc:	c3 57       	subi	r28, 0x73	; 115
    1dbe:	df 4f       	sbci	r29, 0xFF	; 255
    1dc0:	e8 81       	ld	r30, Y
    1dc2:	f9 81       	ldd	r31, Y+1	; 0x01
    1dc4:	cd 58       	subi	r28, 0x8D	; 141
    1dc6:	d0 40       	sbci	r29, 0x00	; 0
    1dc8:	00 82       	st	Z, r0
    1dca:	c3 57       	subi	r28, 0x73	; 115
    1dcc:	df 4f       	sbci	r29, 0xFF	; 255
    1dce:	88 81       	ld	r24, Y
    1dd0:	99 81       	ldd	r25, Y+1	; 0x01
    1dd2:	cd 58       	subi	r28, 0x8D	; 141
    1dd4:	d0 40       	sbci	r29, 0x00	; 0
    1dd6:	01 96       	adiw	r24, 0x01	; 1
    1dd8:	c3 57       	subi	r28, 0x73	; 115
    1dda:	df 4f       	sbci	r29, 0xFF	; 255
    1ddc:	99 83       	std	Y+1, r25	; 0x01
    1dde:	88 83       	st	Y, r24
    1de0:	cd 58       	subi	r28, 0x8D	; 141
    1de2:	d0 40       	sbci	r29, 0x00	; 0
    1de4:	cf 56       	subi	r28, 0x6F	; 111
    1de6:	df 4f       	sbci	r29, 0xFF	; 255
    1de8:	98 81       	ld	r25, Y
    1dea:	c1 59       	subi	r28, 0x91	; 145
    1dec:	d0 40       	sbci	r29, 0x00	; 0
    1dee:	91 50       	subi	r25, 0x01	; 1
    1df0:	cf 56       	subi	r28, 0x6F	; 111
    1df2:	df 4f       	sbci	r29, 0xFF	; 255
    1df4:	98 83       	st	Y, r25
    1df6:	c1 59       	subi	r28, 0x91	; 145
    1df8:	d0 40       	sbci	r29, 0x00	; 0
    1dfa:	cf 56       	subi	r28, 0x6F	; 111
    1dfc:	df 4f       	sbci	r29, 0xFF	; 255
    1dfe:	e8 81       	ld	r30, Y
    1e00:	c1 59       	subi	r28, 0x91	; 145
    1e02:	d0 40       	sbci	r29, 0x00	; 0
    1e04:	ee 23       	and	r30, r30
    1e06:	31 f6       	brne	.-116    	; 0x1d94 <main+0xea>
	char request3[9]="27020000";
    1e08:	ce 01       	movw	r24, r28
    1e0a:	88 58       	subi	r24, 0x88	; 136
    1e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0e:	ce 56       	subi	r28, 0x6E	; 110
    1e10:	df 4f       	sbci	r29, 0xFF	; 255
    1e12:	99 83       	std	Y+1, r25	; 0x01
    1e14:	88 83       	st	Y, r24
    1e16:	c2 59       	subi	r28, 0x92	; 146
    1e18:	d0 40       	sbci	r29, 0x00	; 0
    1e1a:	80 eb       	ldi	r24, 0xB0	; 176
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	cc 56       	subi	r28, 0x6C	; 108
    1e20:	df 4f       	sbci	r29, 0xFF	; 255
    1e22:	99 83       	std	Y+1, r25	; 0x01
    1e24:	88 83       	st	Y, r24
    1e26:	c4 59       	subi	r28, 0x94	; 148
    1e28:	d0 40       	sbci	r29, 0x00	; 0
    1e2a:	99 e0       	ldi	r25, 0x09	; 9
    1e2c:	ca 56       	subi	r28, 0x6A	; 106
    1e2e:	df 4f       	sbci	r29, 0xFF	; 255
    1e30:	98 83       	st	Y, r25
    1e32:	c6 59       	subi	r28, 0x96	; 150
    1e34:	d0 40       	sbci	r29, 0x00	; 0
    1e36:	cc 56       	subi	r28, 0x6C	; 108
    1e38:	df 4f       	sbci	r29, 0xFF	; 255
    1e3a:	e8 81       	ld	r30, Y
    1e3c:	f9 81       	ldd	r31, Y+1	; 0x01
    1e3e:	c4 59       	subi	r28, 0x94	; 148
    1e40:	d0 40       	sbci	r29, 0x00	; 0
    1e42:	00 80       	ld	r0, Z
    1e44:	cc 56       	subi	r28, 0x6C	; 108
    1e46:	df 4f       	sbci	r29, 0xFF	; 255
    1e48:	88 81       	ld	r24, Y
    1e4a:	99 81       	ldd	r25, Y+1	; 0x01
    1e4c:	c4 59       	subi	r28, 0x94	; 148
    1e4e:	d0 40       	sbci	r29, 0x00	; 0
    1e50:	01 96       	adiw	r24, 0x01	; 1
    1e52:	cc 56       	subi	r28, 0x6C	; 108
    1e54:	df 4f       	sbci	r29, 0xFF	; 255
    1e56:	99 83       	std	Y+1, r25	; 0x01
    1e58:	88 83       	st	Y, r24
    1e5a:	c4 59       	subi	r28, 0x94	; 148
    1e5c:	d0 40       	sbci	r29, 0x00	; 0
    1e5e:	ce 56       	subi	r28, 0x6E	; 110
    1e60:	df 4f       	sbci	r29, 0xFF	; 255
    1e62:	e8 81       	ld	r30, Y
    1e64:	f9 81       	ldd	r31, Y+1	; 0x01
    1e66:	c2 59       	subi	r28, 0x92	; 146
    1e68:	d0 40       	sbci	r29, 0x00	; 0
    1e6a:	00 82       	st	Z, r0
    1e6c:	ce 56       	subi	r28, 0x6E	; 110
    1e6e:	df 4f       	sbci	r29, 0xFF	; 255
    1e70:	88 81       	ld	r24, Y
    1e72:	99 81       	ldd	r25, Y+1	; 0x01
    1e74:	c2 59       	subi	r28, 0x92	; 146
    1e76:	d0 40       	sbci	r29, 0x00	; 0
    1e78:	01 96       	adiw	r24, 0x01	; 1
    1e7a:	ce 56       	subi	r28, 0x6E	; 110
    1e7c:	df 4f       	sbci	r29, 0xFF	; 255
    1e7e:	99 83       	std	Y+1, r25	; 0x01
    1e80:	88 83       	st	Y, r24
    1e82:	c2 59       	subi	r28, 0x92	; 146
    1e84:	d0 40       	sbci	r29, 0x00	; 0
    1e86:	ca 56       	subi	r28, 0x6A	; 106
    1e88:	df 4f       	sbci	r29, 0xFF	; 255
    1e8a:	98 81       	ld	r25, Y
    1e8c:	c6 59       	subi	r28, 0x96	; 150
    1e8e:	d0 40       	sbci	r29, 0x00	; 0
    1e90:	91 50       	subi	r25, 0x01	; 1
    1e92:	ca 56       	subi	r28, 0x6A	; 106
    1e94:	df 4f       	sbci	r29, 0xFF	; 255
    1e96:	98 83       	st	Y, r25
    1e98:	c6 59       	subi	r28, 0x96	; 150
    1e9a:	d0 40       	sbci	r29, 0x00	; 0
    1e9c:	ca 56       	subi	r28, 0x6A	; 106
    1e9e:	df 4f       	sbci	r29, 0xFF	; 255
    1ea0:	e8 81       	ld	r30, Y
    1ea2:	c6 59       	subi	r28, 0x96	; 150
    1ea4:	d0 40       	sbci	r29, 0x00	; 0
    1ea6:	ee 23       	and	r30, r30
    1ea8:	31 f6       	brne	.-116    	; 0x1e36 <main+0x18c>


	u8int_t index =0;
    1eaa:	fe 01       	movw	r30, r28
    1eac:	e5 5a       	subi	r30, 0xA5	; 165
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	10 82       	st	Z, r1



	// Another number to concatenate

	DIO_INIT(PORT_D,PIN_1,PIN_OUTPUT); //TX PIN
    1eb2:	83 e0       	ldi	r24, 0x03	; 3
    1eb4:	61 e0       	ldi	r22, 0x01	; 1
    1eb6:	41 e0       	ldi	r20, 0x01	; 1
    1eb8:	0e 94 f7 13 	call	0x27ee	; 0x27ee <DIO_INIT>
	DIO_INIT(PORT_D,PIN_0,PIN_INPUT); //RX PIN
    1ebc:	83 e0       	ldi	r24, 0x03	; 3
    1ebe:	60 e0       	ldi	r22, 0x00	; 0
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	0e 94 f7 13 	call	0x27ee	; 0x27ee <DIO_INIT>
	DIO_INIT(PORT_C,PIN_1,PIN_OUTPUT);
    1ec6:	82 e0       	ldi	r24, 0x02	; 2
    1ec8:	61 e0       	ldi	r22, 0x01	; 1
    1eca:	41 e0       	ldi	r20, 0x01	; 1
    1ecc:	0e 94 f7 13 	call	0x27ee	; 0x27ee <DIO_INIT>



	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_init(9600);
    1ed0:	60 e8       	ldi	r22, 0x80	; 128
    1ed2:	75 e2       	ldi	r23, 0x25	; 37
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <UART_init>
	CLCD_voidInit();
    1edc:	0e 94 35 0a 	call	0x146a	; 0x146a <CLCD_voidInit>

	while(1)
	{
		initRandomSeed();
    1ee0:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <initRandomSeed>
		unsigned int random_number = GenerateRandomHexNumber();
    1ee4:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <GenerateRandomHexNumber>
    1ee8:	fe 01       	movw	r30, r28
    1eea:	e7 5a       	subi	r30, 0xA7	; 167
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	91 83       	std	Z+1, r25	; 0x01
    1ef0:	80 83       	st	Z, r24

		char hex_string[5];
		snprintf(hex_string, sizeof(hex_string), "%04X", random_number);
    1ef2:	8d b7       	in	r24, 0x3d	; 61
    1ef4:	9e b7       	in	r25, 0x3e	; 62
    1ef6:	08 97       	sbiw	r24, 0x08	; 8
    1ef8:	0f b6       	in	r0, 0x3f	; 63
    1efa:	f8 94       	cli
    1efc:	9e bf       	out	0x3e, r25	; 62
    1efe:	0f be       	out	0x3f, r0	; 63
    1f00:	8d bf       	out	0x3d, r24	; 61
    1f02:	ad b7       	in	r26, 0x3d	; 61
    1f04:	be b7       	in	r27, 0x3e	; 62
    1f06:	11 96       	adiw	r26, 0x01	; 1
    1f08:	ce 01       	movw	r24, r28
    1f0a:	8f 57       	subi	r24, 0x7F	; 127
    1f0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0e:	11 96       	adiw	r26, 0x01	; 1
    1f10:	9c 93       	st	X, r25
    1f12:	8e 93       	st	-X, r24
    1f14:	85 e0       	ldi	r24, 0x05	; 5
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	13 96       	adiw	r26, 0x03	; 3
    1f1a:	9c 93       	st	X, r25
    1f1c:	8e 93       	st	-X, r24
    1f1e:	12 97       	sbiw	r26, 0x02	; 2
    1f20:	80 e6       	ldi	r24, 0x60	; 96
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	15 96       	adiw	r26, 0x05	; 5
    1f26:	9c 93       	st	X, r25
    1f28:	8e 93       	st	-X, r24
    1f2a:	14 97       	sbiw	r26, 0x04	; 4
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e7 5a       	subi	r30, 0xA7	; 167
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	80 81       	ld	r24, Z
    1f34:	91 81       	ldd	r25, Z+1	; 0x01
    1f36:	17 96       	adiw	r26, 0x07	; 7
    1f38:	9c 93       	st	X, r25
    1f3a:	8e 93       	st	-X, r24
    1f3c:	16 97       	sbiw	r26, 0x06	; 6
    1f3e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <snprintf>
    1f42:	ed b7       	in	r30, 0x3d	; 61
    1f44:	fe b7       	in	r31, 0x3e	; 62
    1f46:	38 96       	adiw	r30, 0x08	; 8
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	fe bf       	out	0x3e, r31	; 62
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	ed bf       	out	0x3d, r30	; 61

				for(int i=0;i<4;i++)
    1f52:	fe 01       	movw	r30, r28
    1f54:	e9 5a       	subi	r30, 0xA9	; 169
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	11 82       	std	Z+1, r1	; 0x01
    1f5a:	10 82       	st	Z, r1
    1f5c:	29 c0       	rjmp	.+82     	; 0x1fb0 <main+0x306>
				{
					request3[i+4]= (hex_string[i]+ 1);
    1f5e:	fe 01       	movw	r30, r28
    1f60:	e9 5a       	subi	r30, 0xA9	; 169
    1f62:	ff 4f       	sbci	r31, 0xFF	; 255
    1f64:	80 81       	ld	r24, Z
    1f66:	91 81       	ldd	r25, Z+1	; 0x01
    1f68:	ac 01       	movw	r20, r24
    1f6a:	4c 5f       	subi	r20, 0xFC	; 252
    1f6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e9 5a       	subi	r30, 0xA9	; 169
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	20 81       	ld	r18, Z
    1f76:	31 81       	ldd	r19, Z+1	; 0x01
    1f78:	ce 01       	movw	r24, r28
    1f7a:	8f 57       	subi	r24, 0x7F	; 127
    1f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7e:	fc 01       	movw	r30, r24
    1f80:	e2 0f       	add	r30, r18
    1f82:	f3 1f       	adc	r31, r19
    1f84:	80 81       	ld	r24, Z
    1f86:	28 2f       	mov	r18, r24
    1f88:	2f 5f       	subi	r18, 0xFF	; 255
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	88 58       	subi	r24, 0x88	; 136
    1f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f90:	fc 01       	movw	r30, r24
    1f92:	e4 0f       	add	r30, r20
    1f94:	f5 1f       	adc	r31, r21
    1f96:	20 83       	st	Z, r18
		unsigned int random_number = GenerateRandomHexNumber();

		char hex_string[5];
		snprintf(hex_string, sizeof(hex_string), "%04X", random_number);

				for(int i=0;i<4;i++)
    1f98:	de 01       	movw	r26, r28
    1f9a:	a9 5a       	subi	r26, 0xA9	; 169
    1f9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	e9 5a       	subi	r30, 0xA9	; 169
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	80 81       	ld	r24, Z
    1fa6:	91 81       	ldd	r25, Z+1	; 0x01
    1fa8:	01 96       	adiw	r24, 0x01	; 1
    1faa:	11 96       	adiw	r26, 0x01	; 1
    1fac:	9c 93       	st	X, r25
    1fae:	8e 93       	st	-X, r24
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e9 5a       	subi	r30, 0xA9	; 169
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	80 81       	ld	r24, Z
    1fb8:	91 81       	ldd	r25, Z+1	; 0x01
    1fba:	84 30       	cpi	r24, 0x04	; 4
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	7c f2       	brlt	.-98     	; 0x1f5e <main+0x2b4>
				{
					request3[i+4]= (hex_string[i]+ 1);
				}
		for(int i=0;i<3; i++)
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	eb 5a       	subi	r30, 0xAB	; 171
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	11 82       	std	Z+1, r1	; 0x01
    1fc8:	10 82       	st	Z, r1
    1fca:	07 c4       	rjmp	.+2062   	; 0x27da <main+0xb30>
		{
			data=UART_recieveByte();  // receive from termianl
    1fcc:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <UART_recieveByte>
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	e4 5a       	subi	r30, 0xA4	; 164
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	80 83       	st	Z, r24
    1fd8:	fe 01       	movw	r30, r28
    1fda:	ef 5a       	subi	r30, 0xAF	; 175
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	aa ef       	ldi	r26, 0xFA	; 250
    1fe4:	b3 e4       	ldi	r27, 0x43	; 67
    1fe6:	80 83       	st	Z, r24
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	a2 83       	std	Z+2, r26	; 0x02
    1fec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fee:	8e 01       	movw	r16, r28
    1ff0:	03 5b       	subi	r16, 0xB3	; 179
    1ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	ef 5a       	subi	r30, 0xAF	; 175
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	60 81       	ld	r22, Z
    1ffc:	71 81       	ldd	r23, Z+1	; 0x01
    1ffe:	82 81       	ldd	r24, Z+2	; 0x02
    2000:	93 81       	ldd	r25, Z+3	; 0x03
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	4a ef       	ldi	r20, 0xFA	; 250
    2008:	54 e4       	ldi	r21, 0x44	; 68
    200a:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	f8 01       	movw	r30, r16
    2014:	80 83       	st	Z, r24
    2016:	91 83       	std	Z+1, r25	; 0x01
    2018:	a2 83       	std	Z+2, r26	; 0x02
    201a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    201c:	fe 01       	movw	r30, r28
    201e:	e3 5b       	subi	r30, 0xB3	; 179
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	60 81       	ld	r22, Z
    2024:	71 81       	ldd	r23, Z+1	; 0x01
    2026:	82 81       	ldd	r24, Z+2	; 0x02
    2028:	93 81       	ldd	r25, Z+3	; 0x03
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e8       	ldi	r20, 0x80	; 128
    2030:	5f e3       	ldi	r21, 0x3F	; 63
    2032:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    2036:	88 23       	and	r24, r24
    2038:	44 f4       	brge	.+16     	; 0x204a <main+0x3a0>
		__ticks = 1;
    203a:	fe 01       	movw	r30, r28
    203c:	e5 5b       	subi	r30, 0xB5	; 181
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	91 83       	std	Z+1, r25	; 0x01
    2046:	80 83       	st	Z, r24
    2048:	64 c0       	rjmp	.+200    	; 0x2112 <main+0x468>
	else if (__tmp > 65535)
    204a:	fe 01       	movw	r30, r28
    204c:	e3 5b       	subi	r30, 0xB3	; 179
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	60 81       	ld	r22, Z
    2052:	71 81       	ldd	r23, Z+1	; 0x01
    2054:	82 81       	ldd	r24, Z+2	; 0x02
    2056:	93 81       	ldd	r25, Z+3	; 0x03
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	3f ef       	ldi	r19, 0xFF	; 255
    205c:	4f e7       	ldi	r20, 0x7F	; 127
    205e:	57 e4       	ldi	r21, 0x47	; 71
    2060:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    2064:	18 16       	cp	r1, r24
    2066:	0c f0       	brlt	.+2      	; 0x206a <main+0x3c0>
    2068:	43 c0       	rjmp	.+134    	; 0x20f0 <main+0x446>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206a:	fe 01       	movw	r30, r28
    206c:	ef 5a       	subi	r30, 0xAF	; 175
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	60 81       	ld	r22, Z
    2072:	71 81       	ldd	r23, Z+1	; 0x01
    2074:	82 81       	ldd	r24, Z+2	; 0x02
    2076:	93 81       	ldd	r25, Z+3	; 0x03
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e2       	ldi	r20, 0x20	; 32
    207e:	51 e4       	ldi	r21, 0x41	; 65
    2080:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	8e 01       	movw	r16, r28
    208a:	05 5b       	subi	r16, 0xB5	; 181
    208c:	1f 4f       	sbci	r17, 0xFF	; 255
    208e:	bc 01       	movw	r22, r24
    2090:	cd 01       	movw	r24, r26
    2092:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	f8 01       	movw	r30, r16
    209c:	91 83       	std	Z+1, r25	; 0x01
    209e:	80 83       	st	Z, r24
    20a0:	1f c0       	rjmp	.+62     	; 0x20e0 <main+0x436>
    20a2:	fe 01       	movw	r30, r28
    20a4:	e7 5b       	subi	r30, 0xB7	; 183
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	88 ec       	ldi	r24, 0xC8	; 200
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	91 83       	std	Z+1, r25	; 0x01
    20ae:	80 83       	st	Z, r24
    20b0:	fe 01       	movw	r30, r28
    20b2:	e7 5b       	subi	r30, 0xB7	; 183
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	80 81       	ld	r24, Z
    20b8:	91 81       	ldd	r25, Z+1	; 0x01
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	f1 f7       	brne	.-4      	; 0x20ba <main+0x410>
    20be:	fe 01       	movw	r30, r28
    20c0:	e7 5b       	subi	r30, 0xB7	; 183
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	91 83       	std	Z+1, r25	; 0x01
    20c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c8:	de 01       	movw	r26, r28
    20ca:	a5 5b       	subi	r26, 0xB5	; 181
    20cc:	bf 4f       	sbci	r27, 0xFF	; 255
    20ce:	fe 01       	movw	r30, r28
    20d0:	e5 5b       	subi	r30, 0xB5	; 181
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	80 81       	ld	r24, Z
    20d6:	91 81       	ldd	r25, Z+1	; 0x01
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	11 96       	adiw	r26, 0x01	; 1
    20dc:	9c 93       	st	X, r25
    20de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e0:	fe 01       	movw	r30, r28
    20e2:	e5 5b       	subi	r30, 0xB5	; 181
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	80 81       	ld	r24, Z
    20e8:	91 81       	ldd	r25, Z+1	; 0x01
    20ea:	00 97       	sbiw	r24, 0x00	; 0
    20ec:	d1 f6       	brne	.-76     	; 0x20a2 <main+0x3f8>
    20ee:	28 c0       	rjmp	.+80     	; 0x2140 <main+0x496>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f0:	8e 01       	movw	r16, r28
    20f2:	05 5b       	subi	r16, 0xB5	; 181
    20f4:	1f 4f       	sbci	r17, 0xFF	; 255
    20f6:	fe 01       	movw	r30, r28
    20f8:	e3 5b       	subi	r30, 0xB3	; 179
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	60 81       	ld	r22, Z
    20fe:	71 81       	ldd	r23, Z+1	; 0x01
    2100:	82 81       	ldd	r24, Z+2	; 0x02
    2102:	93 81       	ldd	r25, Z+3	; 0x03
    2104:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	f8 01       	movw	r30, r16
    210e:	91 83       	std	Z+1, r25	; 0x01
    2110:	80 83       	st	Z, r24
    2112:	de 01       	movw	r26, r28
    2114:	a9 5b       	subi	r26, 0xB9	; 185
    2116:	bf 4f       	sbci	r27, 0xFF	; 255
    2118:	fe 01       	movw	r30, r28
    211a:	e5 5b       	subi	r30, 0xB5	; 181
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	80 81       	ld	r24, Z
    2120:	91 81       	ldd	r25, Z+1	; 0x01
    2122:	11 96       	adiw	r26, 0x01	; 1
    2124:	9c 93       	st	X, r25
    2126:	8e 93       	st	-X, r24
    2128:	fe 01       	movw	r30, r28
    212a:	e9 5b       	subi	r30, 0xB9	; 185
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	80 81       	ld	r24, Z
    2130:	91 81       	ldd	r25, Z+1	; 0x01
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <main+0x488>
    2136:	fe 01       	movw	r30, r28
    2138:	e9 5b       	subi	r30, 0xB9	; 185
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	91 83       	std	Z+1, r25	; 0x01
    213e:	80 83       	st	Z, r24
			_delay_ms(500);
			if(data == '\n' || index >= 8)
    2140:	fe 01       	movw	r30, r28
    2142:	e4 5a       	subi	r30, 0xA4	; 164
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	80 81       	ld	r24, Z
    2148:	8a 30       	cpi	r24, 0x0A	; 10
    214a:	39 f0       	breq	.+14     	; 0x215a <main+0x4b0>
    214c:	fe 01       	movw	r30, r28
    214e:	e5 5a       	subi	r30, 0xA5	; 165
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	80 81       	ld	r24, Z
    2154:	88 30       	cpi	r24, 0x08	; 8
    2156:	08 f4       	brcc	.+2      	; 0x215a <main+0x4b0>
    2158:	1a c3       	rjmp	.+1588   	; 0x278e <main+0xae4>
			{
				str[index]= '\0';
    215a:	fe 01       	movw	r30, r28
    215c:	e5 5a       	subi	r30, 0xA5	; 165
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	80 81       	ld	r24, Z
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	ce 01       	movw	r24, r28
    2168:	83 5a       	subi	r24, 0xA3	; 163
    216a:	9f 4f       	sbci	r25, 0xFF	; 255
    216c:	fc 01       	movw	r30, r24
    216e:	e2 0f       	add	r30, r18
    2170:	f3 1f       	adc	r31, r19
    2172:	10 82       	st	Z, r1
				unsigned int hexa_value;
				sscanf(str,"%8x",&hexa_value);
    2174:	00 d0       	rcall	.+0      	; 0x2176 <main+0x4cc>
    2176:	00 d0       	rcall	.+0      	; 0x2178 <main+0x4ce>
    2178:	00 d0       	rcall	.+0      	; 0x217a <main+0x4d0>
    217a:	ed b7       	in	r30, 0x3d	; 61
    217c:	fe b7       	in	r31, 0x3e	; 62
    217e:	31 96       	adiw	r30, 0x01	; 1
    2180:	ce 01       	movw	r24, r28
    2182:	83 5a       	subi	r24, 0xA3	; 163
    2184:	9f 4f       	sbci	r25, 0xFF	; 255
    2186:	91 83       	std	Z+1, r25	; 0x01
    2188:	80 83       	st	Z, r24
    218a:	85 e6       	ldi	r24, 0x65	; 101
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	93 83       	std	Z+3, r25	; 0x03
    2190:	82 83       	std	Z+2, r24	; 0x02
    2192:	ce 01       	movw	r24, r28
    2194:	8a 57       	subi	r24, 0x7A	; 122
    2196:	9f 4f       	sbci	r25, 0xFF	; 255
    2198:	95 83       	std	Z+5, r25	; 0x05
    219a:	84 83       	std	Z+4, r24	; 0x04
    219c:	0e 94 8c 19 	call	0x3318	; 0x3318 <sscanf>
    21a0:	8d b7       	in	r24, 0x3d	; 61
    21a2:	9e b7       	in	r25, 0x3e	; 62
    21a4:	06 96       	adiw	r24, 0x06	; 6
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	9e bf       	out	0x3e, r25	; 62
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	8d bf       	out	0x3d, r24	; 61
				index=0;
    21b0:	fe 01       	movw	r30, r28
    21b2:	e5 5a       	subi	r30, 0xA5	; 165
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	10 82       	st	Z, r1

				strupr(str);
    21b8:	ce 01       	movw	r24, r28
    21ba:	83 5a       	subi	r24, 0xA3	; 163
    21bc:	9f 4f       	sbci	r25, 0xFF	; 255
    21be:	0e 94 51 19 	call	0x32a2	; 0x32a2 <strupr>
				strupr(request1);
    21c2:	ce 01       	movw	r24, r28
    21c4:	8a 59       	subi	r24, 0x9A	; 154
    21c6:	9f 4f       	sbci	r25, 0xFF	; 255
    21c8:	0e 94 51 19 	call	0x32a2	; 0x32a2 <strupr>
				strupr(request3);
    21cc:	ce 01       	movw	r24, r28
    21ce:	88 58       	subi	r24, 0x88	; 136
    21d0:	9f 4f       	sbci	r25, 0xFF	; 255
    21d2:	0e 94 51 19 	call	0x32a2	; 0x32a2 <strupr>



				if(strcmp(str,request1) == 0)
    21d6:	ce 01       	movw	r24, r28
    21d8:	83 5a       	subi	r24, 0xA3	; 163
    21da:	9f 4f       	sbci	r25, 0xFF	; 255
    21dc:	9e 01       	movw	r18, r28
    21de:	2a 59       	subi	r18, 0x9A	; 154
    21e0:	3f 4f       	sbci	r19, 0xFF	; 255
    21e2:	b9 01       	movw	r22, r18
    21e4:	0e 94 48 19 	call	0x3290	; 0x3290 <strcmp>
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	09 f0       	breq	.+2      	; 0x21ee <main+0x544>
    21ec:	24 c1       	rjmp	.+584    	; 0x2436 <main+0x78c>
				{
					if(flag == 0)
    21ee:	80 91 da 00 	lds	r24, 0x00DA
    21f2:	88 23       	and	r24, r24
    21f4:	09 f0       	breq	.+2      	; 0x21f8 <main+0x54e>
    21f6:	90 c0       	rjmp	.+288    	; 0x2318 <main+0x66e>
					{
						CLCD_Void_LCDClear();
    21f8:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <CLCD_Void_LCDClear>
						CLCD_GoTOXY(0,1);
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	61 e0       	ldi	r22, 0x01	; 1
    2200:	0e 94 30 0c 	call	0x1860	; 0x1860 <CLCD_GoTOXY>
						CLCD_voidSendString("NRC 7F3135");
    2204:	89 e6       	ldi	r24, 0x69	; 105
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <CLCD_voidSendString>
    220c:	fe 01       	movw	r30, r28
    220e:	ed 5b       	subi	r30, 0xBD	; 189
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	a8 e4       	ldi	r26, 0x48	; 72
    2218:	b3 e4       	ldi	r27, 0x43	; 67
    221a:	80 83       	st	Z, r24
    221c:	91 83       	std	Z+1, r25	; 0x01
    221e:	a2 83       	std	Z+2, r26	; 0x02
    2220:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2222:	8e 01       	movw	r16, r28
    2224:	01 5c       	subi	r16, 0xC1	; 193
    2226:	1f 4f       	sbci	r17, 0xFF	; 255
    2228:	fe 01       	movw	r30, r28
    222a:	ed 5b       	subi	r30, 0xBD	; 189
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	60 81       	ld	r22, Z
    2230:	71 81       	ldd	r23, Z+1	; 0x01
    2232:	82 81       	ldd	r24, Z+2	; 0x02
    2234:	93 81       	ldd	r25, Z+3	; 0x03
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	4a ef       	ldi	r20, 0xFA	; 250
    223c:	54 e4       	ldi	r21, 0x44	; 68
    223e:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	f8 01       	movw	r30, r16
    2248:	80 83       	st	Z, r24
    224a:	91 83       	std	Z+1, r25	; 0x01
    224c:	a2 83       	std	Z+2, r26	; 0x02
    224e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2250:	fe 01       	movw	r30, r28
    2252:	ff 96       	adiw	r30, 0x3f	; 63
    2254:	60 81       	ld	r22, Z
    2256:	71 81       	ldd	r23, Z+1	; 0x01
    2258:	82 81       	ldd	r24, Z+2	; 0x02
    225a:	93 81       	ldd	r25, Z+3	; 0x03
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	40 e8       	ldi	r20, 0x80	; 128
    2262:	5f e3       	ldi	r21, 0x3F	; 63
    2264:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    2268:	88 23       	and	r24, r24
    226a:	2c f4       	brge	.+10     	; 0x2276 <main+0x5cc>
		__ticks = 1;
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	9e af       	std	Y+62, r25	; 0x3e
    2272:	8d af       	std	Y+61, r24	; 0x3d
    2274:	46 c0       	rjmp	.+140    	; 0x2302 <main+0x658>
	else if (__tmp > 65535)
    2276:	fe 01       	movw	r30, r28
    2278:	ff 96       	adiw	r30, 0x3f	; 63
    227a:	60 81       	ld	r22, Z
    227c:	71 81       	ldd	r23, Z+1	; 0x01
    227e:	82 81       	ldd	r24, Z+2	; 0x02
    2280:	93 81       	ldd	r25, Z+3	; 0x03
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	3f ef       	ldi	r19, 0xFF	; 255
    2286:	4f e7       	ldi	r20, 0x7F	; 127
    2288:	57 e4       	ldi	r21, 0x47	; 71
    228a:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    228e:	18 16       	cp	r1, r24
    2290:	64 f5       	brge	.+88     	; 0x22ea <main+0x640>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2292:	fe 01       	movw	r30, r28
    2294:	ed 5b       	subi	r30, 0xBD	; 189
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	60 81       	ld	r22, Z
    229a:	71 81       	ldd	r23, Z+1	; 0x01
    229c:	82 81       	ldd	r24, Z+2	; 0x02
    229e:	93 81       	ldd	r25, Z+3	; 0x03
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e2       	ldi	r20, 0x20	; 32
    22a6:	51 e4       	ldi	r21, 0x41	; 65
    22a8:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	bc 01       	movw	r22, r24
    22b2:	cd 01       	movw	r24, r26
    22b4:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	9e af       	std	Y+62, r25	; 0x3e
    22be:	8d af       	std	Y+61, r24	; 0x3d
    22c0:	0f c0       	rjmp	.+30     	; 0x22e0 <main+0x636>
    22c2:	88 ec       	ldi	r24, 0xC8	; 200
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	9c af       	std	Y+60, r25	; 0x3c
    22c8:	8b af       	std	Y+59, r24	; 0x3b
    22ca:	8b ad       	ldd	r24, Y+59	; 0x3b
    22cc:	9c ad       	ldd	r25, Y+60	; 0x3c
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	f1 f7       	brne	.-4      	; 0x22ce <main+0x624>
    22d2:	9c af       	std	Y+60, r25	; 0x3c
    22d4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    22d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	9e af       	std	Y+62, r25	; 0x3e
    22de:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    22e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    22e4:	00 97       	sbiw	r24, 0x00	; 0
    22e6:	69 f7       	brne	.-38     	; 0x22c2 <main+0x618>
    22e8:	48 c2       	rjmp	.+1168   	; 0x277a <main+0xad0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ea:	fe 01       	movw	r30, r28
    22ec:	ff 96       	adiw	r30, 0x3f	; 63
    22ee:	60 81       	ld	r22, Z
    22f0:	71 81       	ldd	r23, Z+1	; 0x01
    22f2:	82 81       	ldd	r24, Z+2	; 0x02
    22f4:	93 81       	ldd	r25, Z+3	; 0x03
    22f6:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	9e af       	std	Y+62, r25	; 0x3e
    2300:	8d af       	std	Y+61, r24	; 0x3d
    2302:	8d ad       	ldd	r24, Y+61	; 0x3d
    2304:	9e ad       	ldd	r25, Y+62	; 0x3e
    2306:	9a af       	std	Y+58, r25	; 0x3a
    2308:	89 af       	std	Y+57, r24	; 0x39
    230a:	89 ad       	ldd	r24, Y+57	; 0x39
    230c:	9a ad       	ldd	r25, Y+58	; 0x3a
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	f1 f7       	brne	.-4      	; 0x230e <main+0x664>
    2312:	9a af       	std	Y+58, r25	; 0x3a
    2314:	89 af       	std	Y+57, r24	; 0x39
    2316:	31 c2       	rjmp	.+1122   	; 0x277a <main+0xad0>
						_delay_ms(200);
					}
					else if(flag == 1)
    2318:	80 91 da 00 	lds	r24, 0x00DA
    231c:	81 30       	cpi	r24, 0x01	; 1
    231e:	09 f0       	breq	.+2      	; 0x2322 <main+0x678>
    2320:	2c c2       	rjmp	.+1112   	; 0x277a <main+0xad0>
					{
						CLCD_Void_LCDClear();
    2322:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <CLCD_Void_LCDClear>
						CLCD_GoTOXY(0,1);
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	61 e0       	ldi	r22, 0x01	; 1
    232a:	0e 94 30 0c 	call	0x1860	; 0x1860 <CLCD_GoTOXY>
						CLCD_voidSendString("7101AA00");
    232e:	84 e7       	ldi	r24, 0x74	; 116
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <CLCD_voidSendString>
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	a8 e4       	ldi	r26, 0x48	; 72
    233c:	b3 e4       	ldi	r27, 0x43	; 67
    233e:	8d ab       	std	Y+53, r24	; 0x35
    2340:	9e ab       	std	Y+54, r25	; 0x36
    2342:	af ab       	std	Y+55, r26	; 0x37
    2344:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2346:	6d a9       	ldd	r22, Y+53	; 0x35
    2348:	7e a9       	ldd	r23, Y+54	; 0x36
    234a:	8f a9       	ldd	r24, Y+55	; 0x37
    234c:	98 ad       	ldd	r25, Y+56	; 0x38
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	4a ef       	ldi	r20, 0xFA	; 250
    2354:	54 e4       	ldi	r21, 0x44	; 68
    2356:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	89 ab       	std	Y+49, r24	; 0x31
    2360:	9a ab       	std	Y+50, r25	; 0x32
    2362:	ab ab       	std	Y+51, r26	; 0x33
    2364:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2366:	69 a9       	ldd	r22, Y+49	; 0x31
    2368:	7a a9       	ldd	r23, Y+50	; 0x32
    236a:	8b a9       	ldd	r24, Y+51	; 0x33
    236c:	9c a9       	ldd	r25, Y+52	; 0x34
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e8       	ldi	r20, 0x80	; 128
    2374:	5f e3       	ldi	r21, 0x3F	; 63
    2376:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    237a:	88 23       	and	r24, r24
    237c:	2c f4       	brge	.+10     	; 0x2388 <main+0x6de>
		__ticks = 1;
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	98 ab       	std	Y+48, r25	; 0x30
    2384:	8f a7       	std	Y+47, r24	; 0x2f
    2386:	3f c0       	rjmp	.+126    	; 0x2406 <main+0x75c>
	else if (__tmp > 65535)
    2388:	69 a9       	ldd	r22, Y+49	; 0x31
    238a:	7a a9       	ldd	r23, Y+50	; 0x32
    238c:	8b a9       	ldd	r24, Y+51	; 0x33
    238e:	9c a9       	ldd	r25, Y+52	; 0x34
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	3f ef       	ldi	r19, 0xFF	; 255
    2394:	4f e7       	ldi	r20, 0x7F	; 127
    2396:	57 e4       	ldi	r21, 0x47	; 71
    2398:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    239c:	18 16       	cp	r1, r24
    239e:	4c f5       	brge	.+82     	; 0x23f2 <main+0x748>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a0:	6d a9       	ldd	r22, Y+53	; 0x35
    23a2:	7e a9       	ldd	r23, Y+54	; 0x36
    23a4:	8f a9       	ldd	r24, Y+55	; 0x37
    23a6:	98 ad       	ldd	r25, Y+56	; 0x38
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	40 e2       	ldi	r20, 0x20	; 32
    23ae:	51 e4       	ldi	r21, 0x41	; 65
    23b0:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	bc 01       	movw	r22, r24
    23ba:	cd 01       	movw	r24, r26
    23bc:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	98 ab       	std	Y+48, r25	; 0x30
    23c6:	8f a7       	std	Y+47, r24	; 0x2f
    23c8:	0f c0       	rjmp	.+30     	; 0x23e8 <main+0x73e>
    23ca:	88 ec       	ldi	r24, 0xC8	; 200
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	9e a7       	std	Y+46, r25	; 0x2e
    23d0:	8d a7       	std	Y+45, r24	; 0x2d
    23d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    23d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	f1 f7       	brne	.-4      	; 0x23d6 <main+0x72c>
    23da:	9e a7       	std	Y+46, r25	; 0x2e
    23dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23de:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e0:	98 a9       	ldd	r25, Y+48	; 0x30
    23e2:	01 97       	sbiw	r24, 0x01	; 1
    23e4:	98 ab       	std	Y+48, r25	; 0x30
    23e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    23ea:	98 a9       	ldd	r25, Y+48	; 0x30
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	69 f7       	brne	.-38     	; 0x23ca <main+0x720>
    23f0:	14 c0       	rjmp	.+40     	; 0x241a <main+0x770>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f2:	69 a9       	ldd	r22, Y+49	; 0x31
    23f4:	7a a9       	ldd	r23, Y+50	; 0x32
    23f6:	8b a9       	ldd	r24, Y+51	; 0x33
    23f8:	9c a9       	ldd	r25, Y+52	; 0x34
    23fa:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	98 ab       	std	Y+48, r25	; 0x30
    2404:	8f a7       	std	Y+47, r24	; 0x2f
    2406:	8f a5       	ldd	r24, Y+47	; 0x2f
    2408:	98 a9       	ldd	r25, Y+48	; 0x30
    240a:	9c a7       	std	Y+44, r25	; 0x2c
    240c:	8b a7       	std	Y+43, r24	; 0x2b
    240e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2410:	9c a5       	ldd	r25, Y+44	; 0x2c
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	f1 f7       	brne	.-4      	; 0x2412 <main+0x768>
    2416:	9c a7       	std	Y+44, r25	; 0x2c
    2418:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(200);
						CLCD_GoTOXY(1,1);
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	61 e0       	ldi	r22, 0x01	; 1
    241e:	0e 94 30 0c 	call	0x1860	; 0x1860 <CLCD_GoTOXY>
						CLCD_voidSendString("LED IS ON");
    2422:	8d e7       	ldi	r24, 0x7D	; 125
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <CLCD_voidSendString>
						DIO_SetPinValue(PORT_C,PIN_1,PIN_HIGH);
    242a:	82 e0       	ldi	r24, 0x02	; 2
    242c:	61 e0       	ldi	r22, 0x01	; 1
    242e:	41 e0       	ldi	r20, 0x01	; 1
    2430:	0e 94 09 15 	call	0x2a12	; 0x2a12 <DIO_SetPinValue>
    2434:	a2 c1       	rjmp	.+836    	; 0x277a <main+0xad0>



				}

				else if(strcmp(str,request2) == 0)
    2436:	ce 01       	movw	r24, r28
    2438:	83 5a       	subi	r24, 0xA3	; 163
    243a:	9f 4f       	sbci	r25, 0xFF	; 255
    243c:	9e 01       	movw	r18, r28
    243e:	21 59       	subi	r18, 0x91	; 145
    2440:	3f 4f       	sbci	r19, 0xFF	; 255
    2442:	b9 01       	movw	r22, r18
    2444:	0e 94 48 19 	call	0x3290	; 0x3290 <strcmp>
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	09 f0       	breq	.+2      	; 0x244e <main+0x7a4>
    244c:	f8 c0       	rjmp	.+496    	; 0x263e <main+0x994>
				{
					CLCD_Void_LCDClear();
    244e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <CLCD_Void_LCDClear>
					CLCD_GoTOXY(0,1);
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	61 e0       	ldi	r22, 0x01	; 1
    2456:	0e 94 30 0c 	call	0x1860	; 0x1860 <CLCD_GoTOXY>
					CLCD_voidSendString("6701");
    245a:	87 e8       	ldi	r24, 0x87	; 135
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <CLCD_voidSendString>
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	a8 e4       	ldi	r26, 0x48	; 72
    2468:	b3 e4       	ldi	r27, 0x43	; 67
    246a:	8f a3       	std	Y+39, r24	; 0x27
    246c:	98 a7       	std	Y+40, r25	; 0x28
    246e:	a9 a7       	std	Y+41, r26	; 0x29
    2470:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2472:	6f a1       	ldd	r22, Y+39	; 0x27
    2474:	78 a5       	ldd	r23, Y+40	; 0x28
    2476:	89 a5       	ldd	r24, Y+41	; 0x29
    2478:	9a a5       	ldd	r25, Y+42	; 0x2a
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	4a ef       	ldi	r20, 0xFA	; 250
    2480:	54 e4       	ldi	r21, 0x44	; 68
    2482:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	8b a3       	std	Y+35, r24	; 0x23
    248c:	9c a3       	std	Y+36, r25	; 0x24
    248e:	ad a3       	std	Y+37, r26	; 0x25
    2490:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2492:	6b a1       	ldd	r22, Y+35	; 0x23
    2494:	7c a1       	ldd	r23, Y+36	; 0x24
    2496:	8d a1       	ldd	r24, Y+37	; 0x25
    2498:	9e a1       	ldd	r25, Y+38	; 0x26
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e8       	ldi	r20, 0x80	; 128
    24a0:	5f e3       	ldi	r21, 0x3F	; 63
    24a2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    24a6:	88 23       	and	r24, r24
    24a8:	2c f4       	brge	.+10     	; 0x24b4 <main+0x80a>
		__ticks = 1;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	9a a3       	std	Y+34, r25	; 0x22
    24b0:	89 a3       	std	Y+33, r24	; 0x21
    24b2:	3f c0       	rjmp	.+126    	; 0x2532 <main+0x888>
	else if (__tmp > 65535)
    24b4:	6b a1       	ldd	r22, Y+35	; 0x23
    24b6:	7c a1       	ldd	r23, Y+36	; 0x24
    24b8:	8d a1       	ldd	r24, Y+37	; 0x25
    24ba:	9e a1       	ldd	r25, Y+38	; 0x26
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	3f ef       	ldi	r19, 0xFF	; 255
    24c0:	4f e7       	ldi	r20, 0x7F	; 127
    24c2:	57 e4       	ldi	r21, 0x47	; 71
    24c4:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    24c8:	18 16       	cp	r1, r24
    24ca:	4c f5       	brge	.+82     	; 0x251e <main+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24cc:	6f a1       	ldd	r22, Y+39	; 0x27
    24ce:	78 a5       	ldd	r23, Y+40	; 0x28
    24d0:	89 a5       	ldd	r24, Y+41	; 0x29
    24d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e2       	ldi	r20, 0x20	; 32
    24da:	51 e4       	ldi	r21, 0x41	; 65
    24dc:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	bc 01       	movw	r22, r24
    24e6:	cd 01       	movw	r24, r26
    24e8:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	9a a3       	std	Y+34, r25	; 0x22
    24f2:	89 a3       	std	Y+33, r24	; 0x21
    24f4:	0f c0       	rjmp	.+30     	; 0x2514 <main+0x86a>
    24f6:	88 ec       	ldi	r24, 0xC8	; 200
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	98 a3       	std	Y+32, r25	; 0x20
    24fc:	8f 8f       	std	Y+31, r24	; 0x1f
    24fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2500:	98 a1       	ldd	r25, Y+32	; 0x20
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <main+0x858>
    2506:	98 a3       	std	Y+32, r25	; 0x20
    2508:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250a:	89 a1       	ldd	r24, Y+33	; 0x21
    250c:	9a a1       	ldd	r25, Y+34	; 0x22
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	9a a3       	std	Y+34, r25	; 0x22
    2512:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2514:	89 a1       	ldd	r24, Y+33	; 0x21
    2516:	9a a1       	ldd	r25, Y+34	; 0x22
    2518:	00 97       	sbiw	r24, 0x00	; 0
    251a:	69 f7       	brne	.-38     	; 0x24f6 <main+0x84c>
    251c:	14 c0       	rjmp	.+40     	; 0x2546 <main+0x89c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251e:	6b a1       	ldd	r22, Y+35	; 0x23
    2520:	7c a1       	ldd	r23, Y+36	; 0x24
    2522:	8d a1       	ldd	r24, Y+37	; 0x25
    2524:	9e a1       	ldd	r25, Y+38	; 0x26
    2526:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	9a a3       	std	Y+34, r25	; 0x22
    2530:	89 a3       	std	Y+33, r24	; 0x21
    2532:	89 a1       	ldd	r24, Y+33	; 0x21
    2534:	9a a1       	ldd	r25, Y+34	; 0x22
    2536:	9e 8f       	std	Y+30, r25	; 0x1e
    2538:	8d 8f       	std	Y+29, r24	; 0x1d
    253a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    253c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <main+0x894>
    2542:	9e 8f       	std	Y+30, r25	; 0x1e
    2544:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(200);
					CLCD_GoTOXY(0,5);
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	65 e0       	ldi	r22, 0x05	; 5
    254a:	0e 94 30 0c 	call	0x1860	; 0x1860 <CLCD_GoTOXY>
					CLCD_voidSendString(hex_string);
    254e:	ce 01       	movw	r24, r28
    2550:	8f 57       	subi	r24, 0x7F	; 127
    2552:	9f 4f       	sbci	r25, 0xFF	; 255
    2554:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <CLCD_voidSendString>
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	a8 e4       	ldi	r26, 0x48	; 72
    255e:	b3 e4       	ldi	r27, 0x43	; 67
    2560:	89 8f       	std	Y+25, r24	; 0x19
    2562:	9a 8f       	std	Y+26, r25	; 0x1a
    2564:	ab 8f       	std	Y+27, r26	; 0x1b
    2566:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2568:	69 8d       	ldd	r22, Y+25	; 0x19
    256a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    256c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    256e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	4a ef       	ldi	r20, 0xFA	; 250
    2576:	54 e4       	ldi	r21, 0x44	; 68
    2578:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	8d 8b       	std	Y+21, r24	; 0x15
    2582:	9e 8b       	std	Y+22, r25	; 0x16
    2584:	af 8b       	std	Y+23, r26	; 0x17
    2586:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2588:	6d 89       	ldd	r22, Y+21	; 0x15
    258a:	7e 89       	ldd	r23, Y+22	; 0x16
    258c:	8f 89       	ldd	r24, Y+23	; 0x17
    258e:	98 8d       	ldd	r25, Y+24	; 0x18
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 e8       	ldi	r20, 0x80	; 128
    2596:	5f e3       	ldi	r21, 0x3F	; 63
    2598:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    259c:	88 23       	and	r24, r24
    259e:	2c f4       	brge	.+10     	; 0x25aa <main+0x900>
		__ticks = 1;
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	9c 8b       	std	Y+20, r25	; 0x14
    25a6:	8b 8b       	std	Y+19, r24	; 0x13
    25a8:	3f c0       	rjmp	.+126    	; 0x2628 <main+0x97e>
	else if (__tmp > 65535)
    25aa:	6d 89       	ldd	r22, Y+21	; 0x15
    25ac:	7e 89       	ldd	r23, Y+22	; 0x16
    25ae:	8f 89       	ldd	r24, Y+23	; 0x17
    25b0:	98 8d       	ldd	r25, Y+24	; 0x18
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	3f ef       	ldi	r19, 0xFF	; 255
    25b6:	4f e7       	ldi	r20, 0x7F	; 127
    25b8:	57 e4       	ldi	r21, 0x47	; 71
    25ba:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    25be:	18 16       	cp	r1, r24
    25c0:	4c f5       	brge	.+82     	; 0x2614 <main+0x96a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c2:	69 8d       	ldd	r22, Y+25	; 0x19
    25c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	40 e2       	ldi	r20, 0x20	; 32
    25d0:	51 e4       	ldi	r21, 0x41	; 65
    25d2:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	bc 01       	movw	r22, r24
    25dc:	cd 01       	movw	r24, r26
    25de:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	9c 8b       	std	Y+20, r25	; 0x14
    25e8:	8b 8b       	std	Y+19, r24	; 0x13
    25ea:	0f c0       	rjmp	.+30     	; 0x260a <main+0x960>
    25ec:	88 ec       	ldi	r24, 0xC8	; 200
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	9a 8b       	std	Y+18, r25	; 0x12
    25f2:	89 8b       	std	Y+17, r24	; 0x11
    25f4:	89 89       	ldd	r24, Y+17	; 0x11
    25f6:	9a 89       	ldd	r25, Y+18	; 0x12
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <main+0x94e>
    25fc:	9a 8b       	std	Y+18, r25	; 0x12
    25fe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2600:	8b 89       	ldd	r24, Y+19	; 0x13
    2602:	9c 89       	ldd	r25, Y+20	; 0x14
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	9c 8b       	std	Y+20, r25	; 0x14
    2608:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260a:	8b 89       	ldd	r24, Y+19	; 0x13
    260c:	9c 89       	ldd	r25, Y+20	; 0x14
    260e:	00 97       	sbiw	r24, 0x00	; 0
    2610:	69 f7       	brne	.-38     	; 0x25ec <main+0x942>
    2612:	b3 c0       	rjmp	.+358    	; 0x277a <main+0xad0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2614:	6d 89       	ldd	r22, Y+21	; 0x15
    2616:	7e 89       	ldd	r23, Y+22	; 0x16
    2618:	8f 89       	ldd	r24, Y+23	; 0x17
    261a:	98 8d       	ldd	r25, Y+24	; 0x18
    261c:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	9c 8b       	std	Y+20, r25	; 0x14
    2626:	8b 8b       	std	Y+19, r24	; 0x13
    2628:	8b 89       	ldd	r24, Y+19	; 0x13
    262a:	9c 89       	ldd	r25, Y+20	; 0x14
    262c:	98 8b       	std	Y+16, r25	; 0x10
    262e:	8f 87       	std	Y+15, r24	; 0x0f
    2630:	8f 85       	ldd	r24, Y+15	; 0x0f
    2632:	98 89       	ldd	r25, Y+16	; 0x10
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <main+0x98a>
    2638:	98 8b       	std	Y+16, r25	; 0x10
    263a:	8f 87       	std	Y+15, r24	; 0x0f
    263c:	9e c0       	rjmp	.+316    	; 0x277a <main+0xad0>
					_delay_ms(200);
				}
				else if(strcmp(str,request3) == 0)
    263e:	ce 01       	movw	r24, r28
    2640:	83 5a       	subi	r24, 0xA3	; 163
    2642:	9f 4f       	sbci	r25, 0xFF	; 255
    2644:	9e 01       	movw	r18, r28
    2646:	28 58       	subi	r18, 0x88	; 136
    2648:	3f 4f       	sbci	r19, 0xFF	; 255
    264a:	b9 01       	movw	r22, r18
    264c:	0e 94 48 19 	call	0x3290	; 0x3290 <strcmp>
    2650:	00 97       	sbiw	r24, 0x00	; 0
    2652:	09 f0       	breq	.+2      	; 0x2656 <main+0x9ac>
    2654:	88 c0       	rjmp	.+272    	; 0x2766 <main+0xabc>
				{
					CLCD_Void_LCDClear();
    2656:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <CLCD_Void_LCDClear>
					CLCD_GoTOXY(0,1);
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	61 e0       	ldi	r22, 0x01	; 1
    265e:	0e 94 30 0c 	call	0x1860	; 0x1860 <CLCD_GoTOXY>
					CLCD_voidSendString("6702");
    2662:	8c e8       	ldi	r24, 0x8C	; 140
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <CLCD_voidSendString>
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	a8 e4       	ldi	r26, 0x48	; 72
    2670:	b3 e4       	ldi	r27, 0x43	; 67
    2672:	8b 87       	std	Y+11, r24	; 0x0b
    2674:	9c 87       	std	Y+12, r25	; 0x0c
    2676:	ad 87       	std	Y+13, r26	; 0x0d
    2678:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267a:	6b 85       	ldd	r22, Y+11	; 0x0b
    267c:	7c 85       	ldd	r23, Y+12	; 0x0c
    267e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2680:	9e 85       	ldd	r25, Y+14	; 0x0e
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	4a ef       	ldi	r20, 0xFA	; 250
    2688:	54 e4       	ldi	r21, 0x44	; 68
    268a:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	8f 83       	std	Y+7, r24	; 0x07
    2694:	98 87       	std	Y+8, r25	; 0x08
    2696:	a9 87       	std	Y+9, r26	; 0x09
    2698:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    269a:	6f 81       	ldd	r22, Y+7	; 0x07
    269c:	78 85       	ldd	r23, Y+8	; 0x08
    269e:	89 85       	ldd	r24, Y+9	; 0x09
    26a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e8       	ldi	r20, 0x80	; 128
    26a8:	5f e3       	ldi	r21, 0x3F	; 63
    26aa:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__ltsf2>
    26ae:	88 23       	and	r24, r24
    26b0:	2c f4       	brge	.+10     	; 0x26bc <main+0xa12>
		__ticks = 1;
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	9e 83       	std	Y+6, r25	; 0x06
    26b8:	8d 83       	std	Y+5, r24	; 0x05
    26ba:	3f c0       	rjmp	.+126    	; 0x273a <main+0xa90>
	else if (__tmp > 65535)
    26bc:	6f 81       	ldd	r22, Y+7	; 0x07
    26be:	78 85       	ldd	r23, Y+8	; 0x08
    26c0:	89 85       	ldd	r24, Y+9	; 0x09
    26c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	3f ef       	ldi	r19, 0xFF	; 255
    26c8:	4f e7       	ldi	r20, 0x7F	; 127
    26ca:	57 e4       	ldi	r21, 0x47	; 71
    26cc:	0e 94 1f 03 	call	0x63e	; 0x63e <__gtsf2>
    26d0:	18 16       	cp	r1, r24
    26d2:	4c f5       	brge	.+82     	; 0x2726 <main+0xa7c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26da:	9e 85       	ldd	r25, Y+14	; 0x0e
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e2       	ldi	r20, 0x20	; 32
    26e2:	51 e4       	ldi	r21, 0x41	; 65
    26e4:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	bc 01       	movw	r22, r24
    26ee:	cd 01       	movw	r24, r26
    26f0:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	9e 83       	std	Y+6, r25	; 0x06
    26fa:	8d 83       	std	Y+5, r24	; 0x05
    26fc:	0f c0       	rjmp	.+30     	; 0x271c <main+0xa72>
    26fe:	88 ec       	ldi	r24, 0xC8	; 200
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	9c 83       	std	Y+4, r25	; 0x04
    2704:	8b 83       	std	Y+3, r24	; 0x03
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	9c 81       	ldd	r25, Y+4	; 0x04
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <main+0xa60>
    270e:	9c 83       	std	Y+4, r25	; 0x04
    2710:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2712:	8d 81       	ldd	r24, Y+5	; 0x05
    2714:	9e 81       	ldd	r25, Y+6	; 0x06
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	9e 83       	std	Y+6, r25	; 0x06
    271a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271c:	8d 81       	ldd	r24, Y+5	; 0x05
    271e:	9e 81       	ldd	r25, Y+6	; 0x06
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	69 f7       	brne	.-38     	; 0x26fe <main+0xa54>
    2724:	14 c0       	rjmp	.+40     	; 0x274e <main+0xaa4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2726:	6f 81       	ldd	r22, Y+7	; 0x07
    2728:	78 85       	ldd	r23, Y+8	; 0x08
    272a:	89 85       	ldd	r24, Y+9	; 0x09
    272c:	9a 85       	ldd	r25, Y+10	; 0x0a
    272e:	0e 94 4f 00 	call	0x9e	; 0x9e <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	9e 83       	std	Y+6, r25	; 0x06
    2738:	8d 83       	std	Y+5, r24	; 0x05
    273a:	8d 81       	ldd	r24, Y+5	; 0x05
    273c:	9e 81       	ldd	r25, Y+6	; 0x06
    273e:	9a 83       	std	Y+2, r25	; 0x02
    2740:	89 83       	std	Y+1, r24	; 0x01
    2742:	89 81       	ldd	r24, Y+1	; 0x01
    2744:	9a 81       	ldd	r25, Y+2	; 0x02
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <main+0xa9c>
    274a:	9a 83       	std	Y+2, r25	; 0x02
    274c:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(200);
					CLCD_GoTOXY(1,1);
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	61 e0       	ldi	r22, 0x01	; 1
    2752:	0e 94 30 0c 	call	0x1860	; 0x1860 <CLCD_GoTOXY>
					CLCD_voidSendString("7F2735");
    2756:	81 e9       	ldi	r24, 0x91	; 145
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <CLCD_voidSendString>

					flag=1;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	80 93 da 00 	sts	0x00DA, r24
    2764:	0a c0       	rjmp	.+20     	; 0x277a <main+0xad0>

				}
				else
				{
					CLCD_Void_LCDClear();
    2766:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <CLCD_Void_LCDClear>
					CLCD_GoTOXY(0,1);
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	61 e0       	ldi	r22, 0x01	; 1
    276e:	0e 94 30 0c 	call	0x1860	; 0x1860 <CLCD_GoTOXY>
					CLCD_voidSendString("ERROR");
    2772:	88 e9       	ldi	r24, 0x98	; 152
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <CLCD_voidSendString>
				}
				// Clear the buffer
				memset(str, 0, sizeof(str));
    277a:	ce 01       	movw	r24, r28
    277c:	83 5a       	subi	r24, 0xA3	; 163
    277e:	9f 4f       	sbci	r25, 0xFF	; 255
    2780:	60 e0       	ldi	r22, 0x00	; 0
    2782:	70 e0       	ldi	r23, 0x00	; 0
    2784:	49 e0       	ldi	r20, 0x09	; 9
    2786:	50 e0       	ldi	r21, 0x00	; 0
    2788:	0e 94 41 19 	call	0x3282	; 0x3282 <memset>
    278c:	1a c0       	rjmp	.+52     	; 0x27c2 <main+0xb18>
			}

			else
			{
				str[index]=data;
    278e:	fe 01       	movw	r30, r28
    2790:	e5 5a       	subi	r30, 0xA5	; 165
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	80 81       	ld	r24, Z
    2796:	28 2f       	mov	r18, r24
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	ce 01       	movw	r24, r28
    279c:	83 5a       	subi	r24, 0xA3	; 163
    279e:	9f 4f       	sbci	r25, 0xFF	; 255
    27a0:	dc 01       	movw	r26, r24
    27a2:	a2 0f       	add	r26, r18
    27a4:	b3 1f       	adc	r27, r19
    27a6:	fe 01       	movw	r30, r28
    27a8:	e4 5a       	subi	r30, 0xA4	; 164
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	80 81       	ld	r24, Z
    27ae:	8c 93       	st	X, r24
				index ++ ;
    27b0:	de 01       	movw	r26, r28
    27b2:	a5 5a       	subi	r26, 0xA5	; 165
    27b4:	bf 4f       	sbci	r27, 0xFF	; 255
    27b6:	fe 01       	movw	r30, r28
    27b8:	e5 5a       	subi	r30, 0xA5	; 165
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	80 81       	ld	r24, Z
    27be:	8f 5f       	subi	r24, 0xFF	; 255
    27c0:	8c 93       	st	X, r24

				for(int i=0;i<4;i++)
				{
					request3[i+4]= (hex_string[i]+ 1);
				}
		for(int i=0;i<3; i++)
    27c2:	de 01       	movw	r26, r28
    27c4:	ab 5a       	subi	r26, 0xAB	; 171
    27c6:	bf 4f       	sbci	r27, 0xFF	; 255
    27c8:	fe 01       	movw	r30, r28
    27ca:	eb 5a       	subi	r30, 0xAB	; 171
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	80 81       	ld	r24, Z
    27d0:	91 81       	ldd	r25, Z+1	; 0x01
    27d2:	01 96       	adiw	r24, 0x01	; 1
    27d4:	11 96       	adiw	r26, 0x01	; 1
    27d6:	9c 93       	st	X, r25
    27d8:	8e 93       	st	-X, r24
    27da:	fe 01       	movw	r30, r28
    27dc:	eb 5a       	subi	r30, 0xAB	; 171
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	80 81       	ld	r24, Z
    27e2:	91 81       	ldd	r25, Z+1	; 0x01
    27e4:	83 30       	cpi	r24, 0x03	; 3
    27e6:	91 05       	cpc	r25, r1
    27e8:	0c f4       	brge	.+2      	; 0x27ec <main+0xb42>
    27ea:	f0 cb       	rjmp	.-2080   	; 0x1fcc <main+0x322>
    27ec:	79 cb       	rjmp	.-2318   	; 0x1ee0 <main+0x236>

000027ee <DIO_INIT>:
#include "init.h"
#include "config.h"


u8int_t  DIO_INIT  (u8int_t PortName, u8int_t PinNum,u8int_t Direction)
{
    27ee:	df 93       	push	r29
    27f0:	cf 93       	push	r28
    27f2:	cd b7       	in	r28, 0x3d	; 61
    27f4:	de b7       	in	r29, 0x3e	; 62
    27f6:	28 97       	sbiw	r28, 0x08	; 8
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	de bf       	out	0x3e, r29	; 62
    27fe:	0f be       	out	0x3f, r0	; 63
    2800:	cd bf       	out	0x3d, r28	; 61
    2802:	8a 83       	std	Y+2, r24	; 0x02
    2804:	6b 83       	std	Y+3, r22	; 0x03
    2806:	4c 83       	std	Y+4, r20	; 0x04
	u8int_t Local_u8ERRStatus=OK;
    2808:	19 82       	std	Y+1, r1	; 0x01

	if(PinNum>=0 && PinNum<=7)
    280a:	8b 81       	ldd	r24, Y+3	; 0x03
    280c:	88 30       	cpi	r24, 0x08	; 8
    280e:	08 f0       	brcs	.+2      	; 0x2812 <DIO_INIT+0x24>
    2810:	f4 c0       	rjmp	.+488    	; 0x29fa <DIO_INIT+0x20c>
	{
		if(Direction == PIN_INPUT)
    2812:	8c 81       	ldd	r24, Y+4	; 0x04
    2814:	88 23       	and	r24, r24
    2816:	09 f0       	breq	.+2      	; 0x281a <DIO_INIT+0x2c>
    2818:	77 c0       	rjmp	.+238    	; 0x2908 <DIO_INIT+0x11a>
		{

			switch(PortName)
    281a:	8a 81       	ldd	r24, Y+2	; 0x02
    281c:	28 2f       	mov	r18, r24
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	38 87       	std	Y+8, r19	; 0x08
    2822:	2f 83       	std	Y+7, r18	; 0x07
    2824:	8f 81       	ldd	r24, Y+7	; 0x07
    2826:	98 85       	ldd	r25, Y+8	; 0x08
    2828:	81 30       	cpi	r24, 0x01	; 1
    282a:	91 05       	cpc	r25, r1
    282c:	59 f1       	breq	.+86     	; 0x2884 <DIO_INIT+0x96>
    282e:	2f 81       	ldd	r18, Y+7	; 0x07
    2830:	38 85       	ldd	r19, Y+8	; 0x08
    2832:	22 30       	cpi	r18, 0x02	; 2
    2834:	31 05       	cpc	r19, r1
    2836:	2c f4       	brge	.+10     	; 0x2842 <DIO_INIT+0x54>
    2838:	8f 81       	ldd	r24, Y+7	; 0x07
    283a:	98 85       	ldd	r25, Y+8	; 0x08
    283c:	00 97       	sbiw	r24, 0x00	; 0
    283e:	69 f0       	breq	.+26     	; 0x285a <DIO_INIT+0x6c>
    2840:	60 c0       	rjmp	.+192    	; 0x2902 <DIO_INIT+0x114>
    2842:	2f 81       	ldd	r18, Y+7	; 0x07
    2844:	38 85       	ldd	r19, Y+8	; 0x08
    2846:	22 30       	cpi	r18, 0x02	; 2
    2848:	31 05       	cpc	r19, r1
    284a:	89 f1       	breq	.+98     	; 0x28ae <DIO_INIT+0xc0>
    284c:	8f 81       	ldd	r24, Y+7	; 0x07
    284e:	98 85       	ldd	r25, Y+8	; 0x08
    2850:	83 30       	cpi	r24, 0x03	; 3
    2852:	91 05       	cpc	r25, r1
    2854:	09 f4       	brne	.+2      	; 0x2858 <DIO_INIT+0x6a>
    2856:	40 c0       	rjmp	.+128    	; 0x28d8 <DIO_INIT+0xea>
    2858:	54 c0       	rjmp	.+168    	; 0x2902 <DIO_INIT+0x114>
			{


			case(PORT_A):  CLR_BIT(DDRA_REG,PinNum);break;
    285a:	aa e3       	ldi	r26, 0x3A	; 58
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	ea e3       	ldi	r30, 0x3A	; 58
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	48 2f       	mov	r20, r24
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	28 2f       	mov	r18, r24
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	02 2e       	mov	r0, r18
    2872:	02 c0       	rjmp	.+4      	; 0x2878 <DIO_INIT+0x8a>
    2874:	88 0f       	add	r24, r24
    2876:	99 1f       	adc	r25, r25
    2878:	0a 94       	dec	r0
    287a:	e2 f7       	brpl	.-8      	; 0x2874 <DIO_INIT+0x86>
    287c:	80 95       	com	r24
    287e:	84 23       	and	r24, r20
    2880:	8c 93       	st	X, r24
    2882:	bd c0       	rjmp	.+378    	; 0x29fe <DIO_INIT+0x210>
			case(PORT_B): CLR_BIT(DDRB_REG,PinNum);break;
    2884:	a7 e3       	ldi	r26, 0x37	; 55
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	e7 e3       	ldi	r30, 0x37	; 55
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	48 2f       	mov	r20, r24
    2890:	8b 81       	ldd	r24, Y+3	; 0x03
    2892:	28 2f       	mov	r18, r24
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	02 2e       	mov	r0, r18
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <DIO_INIT+0xb4>
    289e:	88 0f       	add	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	0a 94       	dec	r0
    28a4:	e2 f7       	brpl	.-8      	; 0x289e <DIO_INIT+0xb0>
    28a6:	80 95       	com	r24
    28a8:	84 23       	and	r24, r20
    28aa:	8c 93       	st	X, r24
    28ac:	a8 c0       	rjmp	.+336    	; 0x29fe <DIO_INIT+0x210>
			case(PORT_C): CLR_BIT(DDRC_REG,PinNum);break;
    28ae:	a4 e3       	ldi	r26, 0x34	; 52
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	e4 e3       	ldi	r30, 0x34	; 52
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
    28b8:	48 2f       	mov	r20, r24
    28ba:	8b 81       	ldd	r24, Y+3	; 0x03
    28bc:	28 2f       	mov	r18, r24
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	02 2e       	mov	r0, r18
    28c6:	02 c0       	rjmp	.+4      	; 0x28cc <DIO_INIT+0xde>
    28c8:	88 0f       	add	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	0a 94       	dec	r0
    28ce:	e2 f7       	brpl	.-8      	; 0x28c8 <DIO_INIT+0xda>
    28d0:	80 95       	com	r24
    28d2:	84 23       	and	r24, r20
    28d4:	8c 93       	st	X, r24
    28d6:	93 c0       	rjmp	.+294    	; 0x29fe <DIO_INIT+0x210>
			case(PORT_D):CLR_BIT(DDRD_REG,PinNum);break;
    28d8:	a1 e3       	ldi	r26, 0x31	; 49
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	e1 e3       	ldi	r30, 0x31	; 49
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	48 2f       	mov	r20, r24
    28e4:	8b 81       	ldd	r24, Y+3	; 0x03
    28e6:	28 2f       	mov	r18, r24
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	02 2e       	mov	r0, r18
    28f0:	02 c0       	rjmp	.+4      	; 0x28f6 <DIO_INIT+0x108>
    28f2:	88 0f       	add	r24, r24
    28f4:	99 1f       	adc	r25, r25
    28f6:	0a 94       	dec	r0
    28f8:	e2 f7       	brpl	.-8      	; 0x28f2 <DIO_INIT+0x104>
    28fa:	80 95       	com	r24
    28fc:	84 23       	and	r24, r20
    28fe:	8c 93       	st	X, r24
    2900:	7e c0       	rjmp	.+252    	; 0x29fe <DIO_INIT+0x210>

			default: Local_u8ERRStatus=NOK;
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	89 83       	std	Y+1, r24	; 0x01
    2906:	7b c0       	rjmp	.+246    	; 0x29fe <DIO_INIT+0x210>
			break;
			}

		}

		else if(Direction == PIN_OUTPUT)
    2908:	8c 81       	ldd	r24, Y+4	; 0x04
    290a:	81 30       	cpi	r24, 0x01	; 1
    290c:	09 f0       	breq	.+2      	; 0x2910 <DIO_INIT+0x122>
    290e:	72 c0       	rjmp	.+228    	; 0x29f4 <DIO_INIT+0x206>
		{
			switch(PortName)
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	3e 83       	std	Y+6, r19	; 0x06
    2918:	2d 83       	std	Y+5, r18	; 0x05
    291a:	8d 81       	ldd	r24, Y+5	; 0x05
    291c:	9e 81       	ldd	r25, Y+6	; 0x06
    291e:	81 30       	cpi	r24, 0x01	; 1
    2920:	91 05       	cpc	r25, r1
    2922:	49 f1       	breq	.+82     	; 0x2976 <DIO_INIT+0x188>
    2924:	2d 81       	ldd	r18, Y+5	; 0x05
    2926:	3e 81       	ldd	r19, Y+6	; 0x06
    2928:	22 30       	cpi	r18, 0x02	; 2
    292a:	31 05       	cpc	r19, r1
    292c:	2c f4       	brge	.+10     	; 0x2938 <DIO_INIT+0x14a>
    292e:	8d 81       	ldd	r24, Y+5	; 0x05
    2930:	9e 81       	ldd	r25, Y+6	; 0x06
    2932:	00 97       	sbiw	r24, 0x00	; 0
    2934:	61 f0       	breq	.+24     	; 0x294e <DIO_INIT+0x160>
    2936:	5b c0       	rjmp	.+182    	; 0x29ee <DIO_INIT+0x200>
    2938:	2d 81       	ldd	r18, Y+5	; 0x05
    293a:	3e 81       	ldd	r19, Y+6	; 0x06
    293c:	22 30       	cpi	r18, 0x02	; 2
    293e:	31 05       	cpc	r19, r1
    2940:	71 f1       	breq	.+92     	; 0x299e <DIO_INIT+0x1b0>
    2942:	8d 81       	ldd	r24, Y+5	; 0x05
    2944:	9e 81       	ldd	r25, Y+6	; 0x06
    2946:	83 30       	cpi	r24, 0x03	; 3
    2948:	91 05       	cpc	r25, r1
    294a:	e9 f1       	breq	.+122    	; 0x29c6 <DIO_INIT+0x1d8>
    294c:	50 c0       	rjmp	.+160    	; 0x29ee <DIO_INIT+0x200>
			{


			case(PORT_A): SET_BIT(DDRA_REG,PinNum);break;
    294e:	aa e3       	ldi	r26, 0x3A	; 58
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	ea e3       	ldi	r30, 0x3A	; 58
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	48 2f       	mov	r20, r24
    295a:	8b 81       	ldd	r24, Y+3	; 0x03
    295c:	28 2f       	mov	r18, r24
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	02 2e       	mov	r0, r18
    2966:	02 c0       	rjmp	.+4      	; 0x296c <DIO_INIT+0x17e>
    2968:	88 0f       	add	r24, r24
    296a:	99 1f       	adc	r25, r25
    296c:	0a 94       	dec	r0
    296e:	e2 f7       	brpl	.-8      	; 0x2968 <DIO_INIT+0x17a>
    2970:	84 2b       	or	r24, r20
    2972:	8c 93       	st	X, r24
    2974:	44 c0       	rjmp	.+136    	; 0x29fe <DIO_INIT+0x210>
			case(PORT_B): SET_BIT(DDRB_REG,PinNum);break;
    2976:	a7 e3       	ldi	r26, 0x37	; 55
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	e7 e3       	ldi	r30, 0x37	; 55
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	48 2f       	mov	r20, r24
    2982:	8b 81       	ldd	r24, Y+3	; 0x03
    2984:	28 2f       	mov	r18, r24
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	02 2e       	mov	r0, r18
    298e:	02 c0       	rjmp	.+4      	; 0x2994 <DIO_INIT+0x1a6>
    2990:	88 0f       	add	r24, r24
    2992:	99 1f       	adc	r25, r25
    2994:	0a 94       	dec	r0
    2996:	e2 f7       	brpl	.-8      	; 0x2990 <DIO_INIT+0x1a2>
    2998:	84 2b       	or	r24, r20
    299a:	8c 93       	st	X, r24
    299c:	30 c0       	rjmp	.+96     	; 0x29fe <DIO_INIT+0x210>
			case(PORT_C): SET_BIT(DDRC_REG,PinNum);break;
    299e:	a4 e3       	ldi	r26, 0x34	; 52
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	e4 e3       	ldi	r30, 0x34	; 52
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	48 2f       	mov	r20, r24
    29aa:	8b 81       	ldd	r24, Y+3	; 0x03
    29ac:	28 2f       	mov	r18, r24
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	02 2e       	mov	r0, r18
    29b6:	02 c0       	rjmp	.+4      	; 0x29bc <DIO_INIT+0x1ce>
    29b8:	88 0f       	add	r24, r24
    29ba:	99 1f       	adc	r25, r25
    29bc:	0a 94       	dec	r0
    29be:	e2 f7       	brpl	.-8      	; 0x29b8 <DIO_INIT+0x1ca>
    29c0:	84 2b       	or	r24, r20
    29c2:	8c 93       	st	X, r24
    29c4:	1c c0       	rjmp	.+56     	; 0x29fe <DIO_INIT+0x210>
			case(PORT_D):SET_BIT(DDRD_REG,PinNum);break;
    29c6:	a1 e3       	ldi	r26, 0x31	; 49
    29c8:	b0 e0       	ldi	r27, 0x00	; 0
    29ca:	e1 e3       	ldi	r30, 0x31	; 49
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	80 81       	ld	r24, Z
    29d0:	48 2f       	mov	r20, r24
    29d2:	8b 81       	ldd	r24, Y+3	; 0x03
    29d4:	28 2f       	mov	r18, r24
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	02 2e       	mov	r0, r18
    29de:	02 c0       	rjmp	.+4      	; 0x29e4 <DIO_INIT+0x1f6>
    29e0:	88 0f       	add	r24, r24
    29e2:	99 1f       	adc	r25, r25
    29e4:	0a 94       	dec	r0
    29e6:	e2 f7       	brpl	.-8      	; 0x29e0 <DIO_INIT+0x1f2>
    29e8:	84 2b       	or	r24, r20
    29ea:	8c 93       	st	X, r24
    29ec:	08 c0       	rjmp	.+16     	; 0x29fe <DIO_INIT+0x210>
			default: Local_u8ERRStatus=NOK;
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	89 83       	std	Y+1, r24	; 0x01
    29f2:	05 c0       	rjmp	.+10     	; 0x29fe <DIO_INIT+0x210>
			}
		}

		else
		{
			Local_u8ERRStatus=NOK;
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	89 83       	std	Y+1, r24	; 0x01
    29f8:	02 c0       	rjmp	.+4      	; 0x29fe <DIO_INIT+0x210>
		}
	}
	else
	{
		Local_u8ERRStatus=NOK;
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_u8ERRStatus;
    29fe:	89 81       	ldd	r24, Y+1	; 0x01

}
    2a00:	28 96       	adiw	r28, 0x08	; 8
    2a02:	0f b6       	in	r0, 0x3f	; 63
    2a04:	f8 94       	cli
    2a06:	de bf       	out	0x3e, r29	; 62
    2a08:	0f be       	out	0x3f, r0	; 63
    2a0a:	cd bf       	out	0x3d, r28	; 61
    2a0c:	cf 91       	pop	r28
    2a0e:	df 91       	pop	r29
    2a10:	08 95       	ret

00002a12 <DIO_SetPinValue>:
u8int_t  DIO_SetPinValue (u8int_t PortName, u8int_t PinNum,u8int_t Value)
{
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	28 97       	sbiw	r28, 0x08	; 8
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	cd bf       	out	0x3d, r28	; 61
    2a26:	8a 83       	std	Y+2, r24	; 0x02
    2a28:	6b 83       	std	Y+3, r22	; 0x03
    2a2a:	4c 83       	std	Y+4, r20	; 0x04
	u8int_t ErrorState=OK ;
    2a2c:	19 82       	std	Y+1, r1	; 0x01

	if(PinNum>=0 && PinNum<=7 )
    2a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a30:	88 30       	cpi	r24, 0x08	; 8
    2a32:	08 f0       	brcs	.+2      	; 0x2a36 <DIO_SetPinValue+0x24>
    2a34:	f0 c0       	rjmp	.+480    	; 0x2c16 <DIO_SetPinValue+0x204>
	{
		if(Value== PIN_HIGH)
    2a36:	8c 81       	ldd	r24, Y+4	; 0x04
    2a38:	81 30       	cpi	r24, 0x01	; 1
    2a3a:	09 f0       	breq	.+2      	; 0x2a3e <DIO_SetPinValue+0x2c>
    2a3c:	6e c0       	rjmp	.+220    	; 0x2b1a <DIO_SetPinValue+0x108>
		{

			switch(PortName){
    2a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a40:	28 2f       	mov	r18, r24
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	38 87       	std	Y+8, r19	; 0x08
    2a46:	2f 83       	std	Y+7, r18	; 0x07
    2a48:	8f 81       	ldd	r24, Y+7	; 0x07
    2a4a:	98 85       	ldd	r25, Y+8	; 0x08
    2a4c:	81 30       	cpi	r24, 0x01	; 1
    2a4e:	91 05       	cpc	r25, r1
    2a50:	49 f1       	breq	.+82     	; 0x2aa4 <DIO_SetPinValue+0x92>
    2a52:	2f 81       	ldd	r18, Y+7	; 0x07
    2a54:	38 85       	ldd	r19, Y+8	; 0x08
    2a56:	22 30       	cpi	r18, 0x02	; 2
    2a58:	31 05       	cpc	r19, r1
    2a5a:	2c f4       	brge	.+10     	; 0x2a66 <DIO_SetPinValue+0x54>
    2a5c:	8f 81       	ldd	r24, Y+7	; 0x07
    2a5e:	98 85       	ldd	r25, Y+8	; 0x08
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	61 f0       	breq	.+24     	; 0x2a7c <DIO_SetPinValue+0x6a>
    2a64:	5a c0       	rjmp	.+180    	; 0x2b1a <DIO_SetPinValue+0x108>
    2a66:	2f 81       	ldd	r18, Y+7	; 0x07
    2a68:	38 85       	ldd	r19, Y+8	; 0x08
    2a6a:	22 30       	cpi	r18, 0x02	; 2
    2a6c:	31 05       	cpc	r19, r1
    2a6e:	71 f1       	breq	.+92     	; 0x2acc <DIO_SetPinValue+0xba>
    2a70:	8f 81       	ldd	r24, Y+7	; 0x07
    2a72:	98 85       	ldd	r25, Y+8	; 0x08
    2a74:	83 30       	cpi	r24, 0x03	; 3
    2a76:	91 05       	cpc	r25, r1
    2a78:	e9 f1       	breq	.+122    	; 0x2af4 <DIO_SetPinValue+0xe2>
    2a7a:	4f c0       	rjmp	.+158    	; 0x2b1a <DIO_SetPinValue+0x108>

			case (PORT_A): SET_BIT(PORTA_REG,PinNum);break;
    2a7c:	ab e3       	ldi	r26, 0x3B	; 59
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	eb e3       	ldi	r30, 0x3B	; 59
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	80 81       	ld	r24, Z
    2a86:	48 2f       	mov	r20, r24
    2a88:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8a:	28 2f       	mov	r18, r24
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	02 2e       	mov	r0, r18
    2a94:	02 c0       	rjmp	.+4      	; 0x2a9a <DIO_SetPinValue+0x88>
    2a96:	88 0f       	add	r24, r24
    2a98:	99 1f       	adc	r25, r25
    2a9a:	0a 94       	dec	r0
    2a9c:	e2 f7       	brpl	.-8      	; 0x2a96 <DIO_SetPinValue+0x84>
    2a9e:	84 2b       	or	r24, r20
    2aa0:	8c 93       	st	X, r24
    2aa2:	3b c0       	rjmp	.+118    	; 0x2b1a <DIO_SetPinValue+0x108>
			case (PORT_B): SET_BIT(PORTB_REG,PinNum);;break;
    2aa4:	a8 e3       	ldi	r26, 0x38	; 56
    2aa6:	b0 e0       	ldi	r27, 0x00	; 0
    2aa8:	e8 e3       	ldi	r30, 0x38	; 56
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	48 2f       	mov	r20, r24
    2ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab2:	28 2f       	mov	r18, r24
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	02 2e       	mov	r0, r18
    2abc:	02 c0       	rjmp	.+4      	; 0x2ac2 <DIO_SetPinValue+0xb0>
    2abe:	88 0f       	add	r24, r24
    2ac0:	99 1f       	adc	r25, r25
    2ac2:	0a 94       	dec	r0
    2ac4:	e2 f7       	brpl	.-8      	; 0x2abe <DIO_SetPinValue+0xac>
    2ac6:	84 2b       	or	r24, r20
    2ac8:	8c 93       	st	X, r24
    2aca:	27 c0       	rjmp	.+78     	; 0x2b1a <DIO_SetPinValue+0x108>
			case (PORT_C): SET_BIT(PORTC_REG,PinNum);break;
    2acc:	a5 e3       	ldi	r26, 0x35	; 53
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	e5 e3       	ldi	r30, 0x35	; 53
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	48 2f       	mov	r20, r24
    2ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ada:	28 2f       	mov	r18, r24
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	02 2e       	mov	r0, r18
    2ae4:	02 c0       	rjmp	.+4      	; 0x2aea <DIO_SetPinValue+0xd8>
    2ae6:	88 0f       	add	r24, r24
    2ae8:	99 1f       	adc	r25, r25
    2aea:	0a 94       	dec	r0
    2aec:	e2 f7       	brpl	.-8      	; 0x2ae6 <DIO_SetPinValue+0xd4>
    2aee:	84 2b       	or	r24, r20
    2af0:	8c 93       	st	X, r24
    2af2:	13 c0       	rjmp	.+38     	; 0x2b1a <DIO_SetPinValue+0x108>
			case (PORT_D): SET_BIT(PORTD_REG,PinNum);break;
    2af4:	a2 e3       	ldi	r26, 0x32	; 50
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	e2 e3       	ldi	r30, 0x32	; 50
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	48 2f       	mov	r20, r24
    2b00:	8b 81       	ldd	r24, Y+3	; 0x03
    2b02:	28 2f       	mov	r18, r24
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	02 2e       	mov	r0, r18
    2b0c:	02 c0       	rjmp	.+4      	; 0x2b12 <DIO_SetPinValue+0x100>
    2b0e:	88 0f       	add	r24, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	0a 94       	dec	r0
    2b14:	e2 f7       	brpl	.-8      	; 0x2b0e <DIO_SetPinValue+0xfc>
    2b16:	84 2b       	or	r24, r20
    2b18:	8c 93       	st	X, r24
			default:break;

			}
		}
		if(Value== PIN_LOW)
    2b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b1c:	88 23       	and	r24, r24
    2b1e:	09 f0       	breq	.+2      	; 0x2b22 <DIO_SetPinValue+0x110>
    2b20:	77 c0       	rjmp	.+238    	; 0x2c10 <DIO_SetPinValue+0x1fe>
		{

			switch(PortName){
    2b22:	8a 81       	ldd	r24, Y+2	; 0x02
    2b24:	28 2f       	mov	r18, r24
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	3e 83       	std	Y+6, r19	; 0x06
    2b2a:	2d 83       	std	Y+5, r18	; 0x05
    2b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b30:	81 30       	cpi	r24, 0x01	; 1
    2b32:	91 05       	cpc	r25, r1
    2b34:	59 f1       	breq	.+86     	; 0x2b8c <DIO_SetPinValue+0x17a>
    2b36:	2d 81       	ldd	r18, Y+5	; 0x05
    2b38:	3e 81       	ldd	r19, Y+6	; 0x06
    2b3a:	22 30       	cpi	r18, 0x02	; 2
    2b3c:	31 05       	cpc	r19, r1
    2b3e:	2c f4       	brge	.+10     	; 0x2b4a <DIO_SetPinValue+0x138>
    2b40:	8d 81       	ldd	r24, Y+5	; 0x05
    2b42:	9e 81       	ldd	r25, Y+6	; 0x06
    2b44:	00 97       	sbiw	r24, 0x00	; 0
    2b46:	69 f0       	breq	.+26     	; 0x2b62 <DIO_SetPinValue+0x150>
    2b48:	60 c0       	rjmp	.+192    	; 0x2c0a <DIO_SetPinValue+0x1f8>
    2b4a:	2d 81       	ldd	r18, Y+5	; 0x05
    2b4c:	3e 81       	ldd	r19, Y+6	; 0x06
    2b4e:	22 30       	cpi	r18, 0x02	; 2
    2b50:	31 05       	cpc	r19, r1
    2b52:	89 f1       	breq	.+98     	; 0x2bb6 <DIO_SetPinValue+0x1a4>
    2b54:	8d 81       	ldd	r24, Y+5	; 0x05
    2b56:	9e 81       	ldd	r25, Y+6	; 0x06
    2b58:	83 30       	cpi	r24, 0x03	; 3
    2b5a:	91 05       	cpc	r25, r1
    2b5c:	09 f4       	brne	.+2      	; 0x2b60 <DIO_SetPinValue+0x14e>
    2b5e:	40 c0       	rjmp	.+128    	; 0x2be0 <DIO_SetPinValue+0x1ce>
    2b60:	54 c0       	rjmp	.+168    	; 0x2c0a <DIO_SetPinValue+0x1f8>

			case (PORT_A): CLR_BIT(PORTA_REG,PinNum);break;
    2b62:	ab e3       	ldi	r26, 0x3B	; 59
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	eb e3       	ldi	r30, 0x3B	; 59
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	80 81       	ld	r24, Z
    2b6c:	48 2f       	mov	r20, r24
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	28 2f       	mov	r18, r24
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	81 e0       	ldi	r24, 0x01	; 1
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	02 2e       	mov	r0, r18
    2b7a:	02 c0       	rjmp	.+4      	; 0x2b80 <DIO_SetPinValue+0x16e>
    2b7c:	88 0f       	add	r24, r24
    2b7e:	99 1f       	adc	r25, r25
    2b80:	0a 94       	dec	r0
    2b82:	e2 f7       	brpl	.-8      	; 0x2b7c <DIO_SetPinValue+0x16a>
    2b84:	80 95       	com	r24
    2b86:	84 23       	and	r24, r20
    2b88:	8c 93       	st	X, r24
    2b8a:	47 c0       	rjmp	.+142    	; 0x2c1a <DIO_SetPinValue+0x208>
			case (PORT_B): CLR_BIT(PORTB_REG,PinNum);;break;
    2b8c:	a8 e3       	ldi	r26, 0x38	; 56
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	e8 e3       	ldi	r30, 0x38	; 56
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	48 2f       	mov	r20, r24
    2b98:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9a:	28 2f       	mov	r18, r24
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	02 2e       	mov	r0, r18
    2ba4:	02 c0       	rjmp	.+4      	; 0x2baa <DIO_SetPinValue+0x198>
    2ba6:	88 0f       	add	r24, r24
    2ba8:	99 1f       	adc	r25, r25
    2baa:	0a 94       	dec	r0
    2bac:	e2 f7       	brpl	.-8      	; 0x2ba6 <DIO_SetPinValue+0x194>
    2bae:	80 95       	com	r24
    2bb0:	84 23       	and	r24, r20
    2bb2:	8c 93       	st	X, r24
    2bb4:	32 c0       	rjmp	.+100    	; 0x2c1a <DIO_SetPinValue+0x208>
			case (PORT_C): CLR_BIT(PORTC_REG,PinNum);break;
    2bb6:	a5 e3       	ldi	r26, 0x35	; 53
    2bb8:	b0 e0       	ldi	r27, 0x00	; 0
    2bba:	e5 e3       	ldi	r30, 0x35	; 53
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	80 81       	ld	r24, Z
    2bc0:	48 2f       	mov	r20, r24
    2bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc4:	28 2f       	mov	r18, r24
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	02 2e       	mov	r0, r18
    2bce:	02 c0       	rjmp	.+4      	; 0x2bd4 <DIO_SetPinValue+0x1c2>
    2bd0:	88 0f       	add	r24, r24
    2bd2:	99 1f       	adc	r25, r25
    2bd4:	0a 94       	dec	r0
    2bd6:	e2 f7       	brpl	.-8      	; 0x2bd0 <DIO_SetPinValue+0x1be>
    2bd8:	80 95       	com	r24
    2bda:	84 23       	and	r24, r20
    2bdc:	8c 93       	st	X, r24
    2bde:	1d c0       	rjmp	.+58     	; 0x2c1a <DIO_SetPinValue+0x208>
			case (PORT_D): CLR_BIT(PORTD_REG,PinNum);break;
    2be0:	a2 e3       	ldi	r26, 0x32	; 50
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	e2 e3       	ldi	r30, 0x32	; 50
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	48 2f       	mov	r20, r24
    2bec:	8b 81       	ldd	r24, Y+3	; 0x03
    2bee:	28 2f       	mov	r18, r24
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	02 2e       	mov	r0, r18
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <DIO_SetPinValue+0x1ec>
    2bfa:	88 0f       	add	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	0a 94       	dec	r0
    2c00:	e2 f7       	brpl	.-8      	; 0x2bfa <DIO_SetPinValue+0x1e8>
    2c02:	80 95       	com	r24
    2c04:	84 23       	and	r24, r20
    2c06:	8c 93       	st	X, r24
    2c08:	08 c0       	rjmp	.+16     	; 0x2c1a <DIO_SetPinValue+0x208>
			default:ErrorState=NOK;break;
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	89 83       	std	Y+1, r24	; 0x01
    2c0e:	05 c0       	rjmp	.+10     	; 0x2c1a <DIO_SetPinValue+0x208>

			}
		}
		else
		{
			ErrorState =NOK;
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	89 83       	std	Y+1, r24	; 0x01
    2c14:	02 c0       	rjmp	.+4      	; 0x2c1a <DIO_SetPinValue+0x208>
		}

	}
	else
	{
		ErrorState=NOK;
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	89 83       	std	Y+1, r24	; 0x01
	}



	return ErrorState;
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c1c:	28 96       	adiw	r28, 0x08	; 8
    2c1e:	0f b6       	in	r0, 0x3f	; 63
    2c20:	f8 94       	cli
    2c22:	de bf       	out	0x3e, r29	; 62
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	cd bf       	out	0x3d, r28	; 61
    2c28:	cf 91       	pop	r28
    2c2a:	df 91       	pop	r29
    2c2c:	08 95       	ret

00002c2e <DIO_ReadPin>:
u8int_t DIO_ReadPin (u8int_t PortName, u8int_t PinNum, u8int_t *Value)
{
    2c2e:	df 93       	push	r29
    2c30:	cf 93       	push	r28
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
    2c36:	27 97       	sbiw	r28, 0x07	; 7
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	de bf       	out	0x3e, r29	; 62
    2c3e:	0f be       	out	0x3f, r0	; 63
    2c40:	cd bf       	out	0x3d, r28	; 61
    2c42:	8a 83       	std	Y+2, r24	; 0x02
    2c44:	6b 83       	std	Y+3, r22	; 0x03
    2c46:	5d 83       	std	Y+5, r21	; 0x05
    2c48:	4c 83       	std	Y+4, r20	; 0x04
	u8int_t ErrorState=OK;
    2c4a:	19 82       	std	Y+1, r1	; 0x01

	if(PinNum>=0 && PinNum<=7)
    2c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4e:	88 30       	cpi	r24, 0x08	; 8
    2c50:	08 f0       	brcs	.+2      	; 0x2c54 <DIO_ReadPin+0x26>
    2c52:	74 c0       	rjmp	.+232    	; 0x2d3c <DIO_ReadPin+0x10e>
	{
		switch(PortName){
    2c54:	8a 81       	ldd	r24, Y+2	; 0x02
    2c56:	28 2f       	mov	r18, r24
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	3f 83       	std	Y+7, r19	; 0x07
    2c5c:	2e 83       	std	Y+6, r18	; 0x06
    2c5e:	4e 81       	ldd	r20, Y+6	; 0x06
    2c60:	5f 81       	ldd	r21, Y+7	; 0x07
    2c62:	41 30       	cpi	r20, 0x01	; 1
    2c64:	51 05       	cpc	r21, r1
    2c66:	59 f1       	breq	.+86     	; 0x2cbe <DIO_ReadPin+0x90>
    2c68:	8e 81       	ldd	r24, Y+6	; 0x06
    2c6a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c6c:	82 30       	cpi	r24, 0x02	; 2
    2c6e:	91 05       	cpc	r25, r1
    2c70:	34 f4       	brge	.+12     	; 0x2c7e <DIO_ReadPin+0x50>
    2c72:	2e 81       	ldd	r18, Y+6	; 0x06
    2c74:	3f 81       	ldd	r19, Y+7	; 0x07
    2c76:	21 15       	cp	r18, r1
    2c78:	31 05       	cpc	r19, r1
    2c7a:	69 f0       	breq	.+26     	; 0x2c96 <DIO_ReadPin+0x68>
    2c7c:	5c c0       	rjmp	.+184    	; 0x2d36 <DIO_ReadPin+0x108>
    2c7e:	4e 81       	ldd	r20, Y+6	; 0x06
    2c80:	5f 81       	ldd	r21, Y+7	; 0x07
    2c82:	42 30       	cpi	r20, 0x02	; 2
    2c84:	51 05       	cpc	r21, r1
    2c86:	79 f1       	breq	.+94     	; 0x2ce6 <DIO_ReadPin+0xb8>
    2c88:	8e 81       	ldd	r24, Y+6	; 0x06
    2c8a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c8c:	83 30       	cpi	r24, 0x03	; 3
    2c8e:	91 05       	cpc	r25, r1
    2c90:	09 f4       	brne	.+2      	; 0x2c94 <DIO_ReadPin+0x66>
    2c92:	3d c0       	rjmp	.+122    	; 0x2d0e <DIO_ReadPin+0xe0>
    2c94:	50 c0       	rjmp	.+160    	; 0x2d36 <DIO_ReadPin+0x108>

		case PORT_A:    *Value=GET_BIT(PINA_REG,PinNum);break;
    2c96:	e9 e3       	ldi	r30, 0x39	; 57
    2c98:	f0 e0       	ldi	r31, 0x00	; 0
    2c9a:	80 81       	ld	r24, Z
    2c9c:	28 2f       	mov	r18, r24
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca2:	88 2f       	mov	r24, r24
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	a9 01       	movw	r20, r18
    2ca8:	02 c0       	rjmp	.+4      	; 0x2cae <DIO_ReadPin+0x80>
    2caa:	55 95       	asr	r21
    2cac:	47 95       	ror	r20
    2cae:	8a 95       	dec	r24
    2cb0:	e2 f7       	brpl	.-8      	; 0x2caa <DIO_ReadPin+0x7c>
    2cb2:	ca 01       	movw	r24, r20
    2cb4:	81 70       	andi	r24, 0x01	; 1
    2cb6:	ec 81       	ldd	r30, Y+4	; 0x04
    2cb8:	fd 81       	ldd	r31, Y+5	; 0x05
    2cba:	80 83       	st	Z, r24
    2cbc:	41 c0       	rjmp	.+130    	; 0x2d40 <DIO_ReadPin+0x112>
		case PORT_B:    *Value=GET_BIT(PINB_REG,PinNum);break;
    2cbe:	e6 e3       	ldi	r30, 0x36	; 54
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	28 2f       	mov	r18, r24
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cca:	88 2f       	mov	r24, r24
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	a9 01       	movw	r20, r18
    2cd0:	02 c0       	rjmp	.+4      	; 0x2cd6 <DIO_ReadPin+0xa8>
    2cd2:	55 95       	asr	r21
    2cd4:	47 95       	ror	r20
    2cd6:	8a 95       	dec	r24
    2cd8:	e2 f7       	brpl	.-8      	; 0x2cd2 <DIO_ReadPin+0xa4>
    2cda:	ca 01       	movw	r24, r20
    2cdc:	81 70       	andi	r24, 0x01	; 1
    2cde:	ec 81       	ldd	r30, Y+4	; 0x04
    2ce0:	fd 81       	ldd	r31, Y+5	; 0x05
    2ce2:	80 83       	st	Z, r24
    2ce4:	2d c0       	rjmp	.+90     	; 0x2d40 <DIO_ReadPin+0x112>
		case PORT_C:    *Value=GET_BIT(PINC_REG,PinNum);break;
    2ce6:	e3 e3       	ldi	r30, 0x33	; 51
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	28 2f       	mov	r18, r24
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf2:	88 2f       	mov	r24, r24
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	a9 01       	movw	r20, r18
    2cf8:	02 c0       	rjmp	.+4      	; 0x2cfe <DIO_ReadPin+0xd0>
    2cfa:	55 95       	asr	r21
    2cfc:	47 95       	ror	r20
    2cfe:	8a 95       	dec	r24
    2d00:	e2 f7       	brpl	.-8      	; 0x2cfa <DIO_ReadPin+0xcc>
    2d02:	ca 01       	movw	r24, r20
    2d04:	81 70       	andi	r24, 0x01	; 1
    2d06:	ec 81       	ldd	r30, Y+4	; 0x04
    2d08:	fd 81       	ldd	r31, Y+5	; 0x05
    2d0a:	80 83       	st	Z, r24
    2d0c:	19 c0       	rjmp	.+50     	; 0x2d40 <DIO_ReadPin+0x112>
		case PORT_D:    *Value=GET_BIT(PIND_REG,PinNum);break;
    2d0e:	e0 e3       	ldi	r30, 0x30	; 48
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	80 81       	ld	r24, Z
    2d14:	28 2f       	mov	r18, r24
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1a:	88 2f       	mov	r24, r24
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	a9 01       	movw	r20, r18
    2d20:	02 c0       	rjmp	.+4      	; 0x2d26 <DIO_ReadPin+0xf8>
    2d22:	55 95       	asr	r21
    2d24:	47 95       	ror	r20
    2d26:	8a 95       	dec	r24
    2d28:	e2 f7       	brpl	.-8      	; 0x2d22 <DIO_ReadPin+0xf4>
    2d2a:	ca 01       	movw	r24, r20
    2d2c:	81 70       	andi	r24, 0x01	; 1
    2d2e:	ec 81       	ldd	r30, Y+4	; 0x04
    2d30:	fd 81       	ldd	r31, Y+5	; 0x05
    2d32:	80 83       	st	Z, r24
    2d34:	05 c0       	rjmp	.+10     	; 0x2d40 <DIO_ReadPin+0x112>
		default:ErrorState=NOK;break;
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	89 83       	std	Y+1, r24	; 0x01
    2d3a:	02 c0       	rjmp	.+4      	; 0x2d40 <DIO_ReadPin+0x112>

		}
	}
	else
	{
		ErrorState=NOK;
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    2d40:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d42:	27 96       	adiw	r28, 0x07	; 7
    2d44:	0f b6       	in	r0, 0x3f	; 63
    2d46:	f8 94       	cli
    2d48:	de bf       	out	0x3e, r29	; 62
    2d4a:	0f be       	out	0x3f, r0	; 63
    2d4c:	cd bf       	out	0x3d, r28	; 61
    2d4e:	cf 91       	pop	r28
    2d50:	df 91       	pop	r29
    2d52:	08 95       	ret

00002d54 <TogglePin>:

u8int_t TogglePin(u8int_t PortId,u8int_t PinId)
{
    2d54:	df 93       	push	r29
    2d56:	cf 93       	push	r28
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <TogglePin+0x6>
    2d5a:	00 d0       	rcall	.+0      	; 0x2d5c <TogglePin+0x8>
    2d5c:	0f 92       	push	r0
    2d5e:	cd b7       	in	r28, 0x3d	; 61
    2d60:	de b7       	in	r29, 0x3e	; 62
    2d62:	8a 83       	std	Y+2, r24	; 0x02
    2d64:	6b 83       	std	Y+3, r22	; 0x03
	u8int_t ErrorState=OK;
    2d66:	19 82       	std	Y+1, r1	; 0x01
	switch(PortId){
    2d68:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6a:	28 2f       	mov	r18, r24
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	3d 83       	std	Y+5, r19	; 0x05
    2d70:	2c 83       	std	Y+4, r18	; 0x04
    2d72:	8c 81       	ldd	r24, Y+4	; 0x04
    2d74:	9d 81       	ldd	r25, Y+5	; 0x05
    2d76:	81 30       	cpi	r24, 0x01	; 1
    2d78:	91 05       	cpc	r25, r1
    2d7a:	09 f4       	brne	.+2      	; 0x2d7e <TogglePin+0x2a>
    2d7c:	3d c0       	rjmp	.+122    	; 0x2df8 <TogglePin+0xa4>
    2d7e:	2c 81       	ldd	r18, Y+4	; 0x04
    2d80:	3d 81       	ldd	r19, Y+5	; 0x05
    2d82:	22 30       	cpi	r18, 0x02	; 2
    2d84:	31 05       	cpc	r19, r1
    2d86:	2c f4       	brge	.+10     	; 0x2d92 <TogglePin+0x3e>
    2d88:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d8c:	00 97       	sbiw	r24, 0x00	; 0
    2d8e:	71 f0       	breq	.+28     	; 0x2dac <TogglePin+0x58>
    2d90:	a5 c0       	rjmp	.+330    	; 0x2edc <TogglePin+0x188>
    2d92:	2c 81       	ldd	r18, Y+4	; 0x04
    2d94:	3d 81       	ldd	r19, Y+5	; 0x05
    2d96:	22 30       	cpi	r18, 0x02	; 2
    2d98:	31 05       	cpc	r19, r1
    2d9a:	09 f4       	brne	.+2      	; 0x2d9e <TogglePin+0x4a>
    2d9c:	53 c0       	rjmp	.+166    	; 0x2e44 <TogglePin+0xf0>
    2d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2da0:	9d 81       	ldd	r25, Y+5	; 0x05
    2da2:	83 30       	cpi	r24, 0x03	; 3
    2da4:	91 05       	cpc	r25, r1
    2da6:	09 f4       	brne	.+2      	; 0x2daa <TogglePin+0x56>
    2da8:	73 c0       	rjmp	.+230    	; 0x2e90 <TogglePin+0x13c>
    2daa:	98 c0       	rjmp	.+304    	; 0x2edc <TogglePin+0x188>
	case PORT_A: SET_BIT(DDRA_REG,PinId);TOG_BIT(PORTA_REG,PinId);break;
    2dac:	aa e3       	ldi	r26, 0x3A	; 58
    2dae:	b0 e0       	ldi	r27, 0x00	; 0
    2db0:	ea e3       	ldi	r30, 0x3A	; 58
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	80 81       	ld	r24, Z
    2db6:	48 2f       	mov	r20, r24
    2db8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dba:	28 2f       	mov	r18, r24
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	02 c0       	rjmp	.+4      	; 0x2dc8 <TogglePin+0x74>
    2dc4:	88 0f       	add	r24, r24
    2dc6:	99 1f       	adc	r25, r25
    2dc8:	2a 95       	dec	r18
    2dca:	e2 f7       	brpl	.-8      	; 0x2dc4 <TogglePin+0x70>
    2dcc:	84 2b       	or	r24, r20
    2dce:	8c 93       	st	X, r24
    2dd0:	ab e3       	ldi	r26, 0x3B	; 59
    2dd2:	b0 e0       	ldi	r27, 0x00	; 0
    2dd4:	eb e3       	ldi	r30, 0x3B	; 59
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	80 81       	ld	r24, Z
    2dda:	48 2f       	mov	r20, r24
    2ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dde:	28 2f       	mov	r18, r24
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	02 2e       	mov	r0, r18
    2de8:	02 c0       	rjmp	.+4      	; 0x2dee <TogglePin+0x9a>
    2dea:	88 0f       	add	r24, r24
    2dec:	99 1f       	adc	r25, r25
    2dee:	0a 94       	dec	r0
    2df0:	e2 f7       	brpl	.-8      	; 0x2dea <TogglePin+0x96>
    2df2:	84 27       	eor	r24, r20
    2df4:	8c 93       	st	X, r24
    2df6:	74 c0       	rjmp	.+232    	; 0x2ee0 <TogglePin+0x18c>
	case PORT_B: SET_BIT(DDRB_REG,PinId);TOG_BIT(PORTB_REG,PinId);break;
    2df8:	a7 e3       	ldi	r26, 0x37	; 55
    2dfa:	b0 e0       	ldi	r27, 0x00	; 0
    2dfc:	e7 e3       	ldi	r30, 0x37	; 55
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 81       	ld	r24, Z
    2e02:	48 2f       	mov	r20, r24
    2e04:	8b 81       	ldd	r24, Y+3	; 0x03
    2e06:	28 2f       	mov	r18, r24
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	02 c0       	rjmp	.+4      	; 0x2e14 <TogglePin+0xc0>
    2e10:	88 0f       	add	r24, r24
    2e12:	99 1f       	adc	r25, r25
    2e14:	2a 95       	dec	r18
    2e16:	e2 f7       	brpl	.-8      	; 0x2e10 <TogglePin+0xbc>
    2e18:	84 2b       	or	r24, r20
    2e1a:	8c 93       	st	X, r24
    2e1c:	a8 e3       	ldi	r26, 0x38	; 56
    2e1e:	b0 e0       	ldi	r27, 0x00	; 0
    2e20:	e8 e3       	ldi	r30, 0x38	; 56
    2e22:	f0 e0       	ldi	r31, 0x00	; 0
    2e24:	80 81       	ld	r24, Z
    2e26:	48 2f       	mov	r20, r24
    2e28:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2a:	28 2f       	mov	r18, r24
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	02 2e       	mov	r0, r18
    2e34:	02 c0       	rjmp	.+4      	; 0x2e3a <TogglePin+0xe6>
    2e36:	88 0f       	add	r24, r24
    2e38:	99 1f       	adc	r25, r25
    2e3a:	0a 94       	dec	r0
    2e3c:	e2 f7       	brpl	.-8      	; 0x2e36 <TogglePin+0xe2>
    2e3e:	84 27       	eor	r24, r20
    2e40:	8c 93       	st	X, r24
    2e42:	4e c0       	rjmp	.+156    	; 0x2ee0 <TogglePin+0x18c>
	case PORT_C: SET_BIT(DDRC_REG,PinId);TOG_BIT(PORTC_REG,PinId);break;
    2e44:	a4 e3       	ldi	r26, 0x34	; 52
    2e46:	b0 e0       	ldi	r27, 0x00	; 0
    2e48:	e4 e3       	ldi	r30, 0x34	; 52
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	80 81       	ld	r24, Z
    2e4e:	48 2f       	mov	r20, r24
    2e50:	8b 81       	ldd	r24, Y+3	; 0x03
    2e52:	28 2f       	mov	r18, r24
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	02 c0       	rjmp	.+4      	; 0x2e60 <TogglePin+0x10c>
    2e5c:	88 0f       	add	r24, r24
    2e5e:	99 1f       	adc	r25, r25
    2e60:	2a 95       	dec	r18
    2e62:	e2 f7       	brpl	.-8      	; 0x2e5c <TogglePin+0x108>
    2e64:	84 2b       	or	r24, r20
    2e66:	8c 93       	st	X, r24
    2e68:	a5 e3       	ldi	r26, 0x35	; 53
    2e6a:	b0 e0       	ldi	r27, 0x00	; 0
    2e6c:	e5 e3       	ldi	r30, 0x35	; 53
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	80 81       	ld	r24, Z
    2e72:	48 2f       	mov	r20, r24
    2e74:	8b 81       	ldd	r24, Y+3	; 0x03
    2e76:	28 2f       	mov	r18, r24
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	02 2e       	mov	r0, r18
    2e80:	02 c0       	rjmp	.+4      	; 0x2e86 <TogglePin+0x132>
    2e82:	88 0f       	add	r24, r24
    2e84:	99 1f       	adc	r25, r25
    2e86:	0a 94       	dec	r0
    2e88:	e2 f7       	brpl	.-8      	; 0x2e82 <TogglePin+0x12e>
    2e8a:	84 27       	eor	r24, r20
    2e8c:	8c 93       	st	X, r24
    2e8e:	28 c0       	rjmp	.+80     	; 0x2ee0 <TogglePin+0x18c>
	case PORT_D: SET_BIT(DDRD_REG,PinId);TOG_BIT(PORTD_REG,PinId);break;
    2e90:	a1 e3       	ldi	r26, 0x31	; 49
    2e92:	b0 e0       	ldi	r27, 0x00	; 0
    2e94:	e1 e3       	ldi	r30, 0x31	; 49
    2e96:	f0 e0       	ldi	r31, 0x00	; 0
    2e98:	80 81       	ld	r24, Z
    2e9a:	48 2f       	mov	r20, r24
    2e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9e:	28 2f       	mov	r18, r24
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	02 c0       	rjmp	.+4      	; 0x2eac <TogglePin+0x158>
    2ea8:	88 0f       	add	r24, r24
    2eaa:	99 1f       	adc	r25, r25
    2eac:	2a 95       	dec	r18
    2eae:	e2 f7       	brpl	.-8      	; 0x2ea8 <TogglePin+0x154>
    2eb0:	84 2b       	or	r24, r20
    2eb2:	8c 93       	st	X, r24
    2eb4:	a2 e3       	ldi	r26, 0x32	; 50
    2eb6:	b0 e0       	ldi	r27, 0x00	; 0
    2eb8:	e2 e3       	ldi	r30, 0x32	; 50
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	80 81       	ld	r24, Z
    2ebe:	48 2f       	mov	r20, r24
    2ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec2:	28 2f       	mov	r18, r24
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	02 2e       	mov	r0, r18
    2ecc:	02 c0       	rjmp	.+4      	; 0x2ed2 <TogglePin+0x17e>
    2ece:	88 0f       	add	r24, r24
    2ed0:	99 1f       	adc	r25, r25
    2ed2:	0a 94       	dec	r0
    2ed4:	e2 f7       	brpl	.-8      	; 0x2ece <TogglePin+0x17a>
    2ed6:	84 27       	eor	r24, r20
    2ed8:	8c 93       	st	X, r24
    2eda:	02 c0       	rjmp	.+4      	; 0x2ee0 <TogglePin+0x18c>
	default:ErrorState=NOK;break;
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	89 83       	std	Y+1, r24	; 0x01

	}
	return ErrorState;
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ee2:	0f 90       	pop	r0
    2ee4:	0f 90       	pop	r0
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	08 95       	ret

00002ef2 <DIO_SetPortDirection>:

u8int_t DIO_SetPortDirection(u8int_t PortId, u8int_t PortDir)
{
    2ef2:	df 93       	push	r29
    2ef4:	cf 93       	push	r28
    2ef6:	cd b7       	in	r28, 0x3d	; 61
    2ef8:	de b7       	in	r29, 0x3e	; 62
    2efa:	27 97       	sbiw	r28, 0x07	; 7
    2efc:	0f b6       	in	r0, 0x3f	; 63
    2efe:	f8 94       	cli
    2f00:	de bf       	out	0x3e, r29	; 62
    2f02:	0f be       	out	0x3f, r0	; 63
    2f04:	cd bf       	out	0x3d, r28	; 61
    2f06:	8a 83       	std	Y+2, r24	; 0x02
    2f08:	6b 83       	std	Y+3, r22	; 0x03
	u8int_t ErrState=OK;
    2f0a:	19 82       	std	Y+1, r1	; 0x01
	if(PortDir == PORT_IN)
    2f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0e:	88 23       	and	r24, r24
    2f10:	91 f5       	brne	.+100    	; 0x2f76 <DIO_SetPortDirection+0x84>
	{
		switch(PortId){
    2f12:	8a 81       	ldd	r24, Y+2	; 0x02
    2f14:	28 2f       	mov	r18, r24
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	3f 83       	std	Y+7, r19	; 0x07
    2f1a:	2e 83       	std	Y+6, r18	; 0x06
    2f1c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f1e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f20:	81 30       	cpi	r24, 0x01	; 1
    2f22:	91 05       	cpc	r25, r1
    2f24:	c9 f0       	breq	.+50     	; 0x2f58 <DIO_SetPortDirection+0x66>
    2f26:	2e 81       	ldd	r18, Y+6	; 0x06
    2f28:	3f 81       	ldd	r19, Y+7	; 0x07
    2f2a:	22 30       	cpi	r18, 0x02	; 2
    2f2c:	31 05       	cpc	r19, r1
    2f2e:	2c f4       	brge	.+10     	; 0x2f3a <DIO_SetPortDirection+0x48>
    2f30:	8e 81       	ldd	r24, Y+6	; 0x06
    2f32:	9f 81       	ldd	r25, Y+7	; 0x07
    2f34:	00 97       	sbiw	r24, 0x00	; 0
    2f36:	61 f0       	breq	.+24     	; 0x2f50 <DIO_SetPortDirection+0x5e>
    2f38:	1b c0       	rjmp	.+54     	; 0x2f70 <DIO_SetPortDirection+0x7e>
    2f3a:	2e 81       	ldd	r18, Y+6	; 0x06
    2f3c:	3f 81       	ldd	r19, Y+7	; 0x07
    2f3e:	22 30       	cpi	r18, 0x02	; 2
    2f40:	31 05       	cpc	r19, r1
    2f42:	71 f0       	breq	.+28     	; 0x2f60 <DIO_SetPortDirection+0x6e>
    2f44:	8e 81       	ldd	r24, Y+6	; 0x06
    2f46:	9f 81       	ldd	r25, Y+7	; 0x07
    2f48:	83 30       	cpi	r24, 0x03	; 3
    2f4a:	91 05       	cpc	r25, r1
    2f4c:	69 f0       	breq	.+26     	; 0x2f68 <DIO_SetPortDirection+0x76>
    2f4e:	10 c0       	rjmp	.+32     	; 0x2f70 <DIO_SetPortDirection+0x7e>
		case PORT_A: DDRA_REG=PORT_IN;break;
    2f50:	ea e3       	ldi	r30, 0x3A	; 58
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	10 82       	st	Z, r1
    2f56:	4a c0       	rjmp	.+148    	; 0x2fec <DIO_SetPortDirection+0xfa>
		case PORT_B: DDRA_REG=PORT_IN;break;
    2f58:	ea e3       	ldi	r30, 0x3A	; 58
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	10 82       	st	Z, r1
    2f5e:	46 c0       	rjmp	.+140    	; 0x2fec <DIO_SetPortDirection+0xfa>
		case PORT_C: DDRA_REG=PORT_IN;break;
    2f60:	ea e3       	ldi	r30, 0x3A	; 58
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	10 82       	st	Z, r1
    2f66:	42 c0       	rjmp	.+132    	; 0x2fec <DIO_SetPortDirection+0xfa>
		case PORT_D: DDRA_REG=PORT_IN;break;
    2f68:	ea e3       	ldi	r30, 0x3A	; 58
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	10 82       	st	Z, r1
    2f6e:	3e c0       	rjmp	.+124    	; 0x2fec <DIO_SetPortDirection+0xfa>
		default:ErrState=NOK;break;
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	89 83       	std	Y+1, r24	; 0x01
    2f74:	3b c0       	rjmp	.+118    	; 0x2fec <DIO_SetPortDirection+0xfa>

		}
	}
	else if (PortDir == PORT_OUT)
    2f76:	8b 81       	ldd	r24, Y+3	; 0x03
    2f78:	8f 3f       	cpi	r24, 0xFF	; 255
    2f7a:	b1 f5       	brne	.+108    	; 0x2fe8 <DIO_SetPortDirection+0xf6>
	{
		switch(PortId){
    2f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7e:	28 2f       	mov	r18, r24
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	3d 83       	std	Y+5, r19	; 0x05
    2f84:	2c 83       	std	Y+4, r18	; 0x04
    2f86:	8c 81       	ldd	r24, Y+4	; 0x04
    2f88:	9d 81       	ldd	r25, Y+5	; 0x05
    2f8a:	81 30       	cpi	r24, 0x01	; 1
    2f8c:	91 05       	cpc	r25, r1
    2f8e:	d1 f0       	breq	.+52     	; 0x2fc4 <DIO_SetPortDirection+0xd2>
    2f90:	2c 81       	ldd	r18, Y+4	; 0x04
    2f92:	3d 81       	ldd	r19, Y+5	; 0x05
    2f94:	22 30       	cpi	r18, 0x02	; 2
    2f96:	31 05       	cpc	r19, r1
    2f98:	2c f4       	brge	.+10     	; 0x2fa4 <DIO_SetPortDirection+0xb2>
    2f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f9e:	00 97       	sbiw	r24, 0x00	; 0
    2fa0:	61 f0       	breq	.+24     	; 0x2fba <DIO_SetPortDirection+0xc8>
    2fa2:	1f c0       	rjmp	.+62     	; 0x2fe2 <DIO_SetPortDirection+0xf0>
    2fa4:	2c 81       	ldd	r18, Y+4	; 0x04
    2fa6:	3d 81       	ldd	r19, Y+5	; 0x05
    2fa8:	22 30       	cpi	r18, 0x02	; 2
    2faa:	31 05       	cpc	r19, r1
    2fac:	81 f0       	breq	.+32     	; 0x2fce <DIO_SetPortDirection+0xdc>
    2fae:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb0:	9d 81       	ldd	r25, Y+5	; 0x05
    2fb2:	83 30       	cpi	r24, 0x03	; 3
    2fb4:	91 05       	cpc	r25, r1
    2fb6:	81 f0       	breq	.+32     	; 0x2fd8 <DIO_SetPortDirection+0xe6>
    2fb8:	14 c0       	rjmp	.+40     	; 0x2fe2 <DIO_SetPortDirection+0xf0>
		case PORT_A: DDRA_REG=PORT_OUT;break;
    2fba:	ea e3       	ldi	r30, 0x3A	; 58
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	8f ef       	ldi	r24, 0xFF	; 255
    2fc0:	80 83       	st	Z, r24
    2fc2:	14 c0       	rjmp	.+40     	; 0x2fec <DIO_SetPortDirection+0xfa>
		case PORT_B: DDRA_REG=PORT_OUT;break;
    2fc4:	ea e3       	ldi	r30, 0x3A	; 58
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	8f ef       	ldi	r24, 0xFF	; 255
    2fca:	80 83       	st	Z, r24
    2fcc:	0f c0       	rjmp	.+30     	; 0x2fec <DIO_SetPortDirection+0xfa>
		case PORT_C: DDRA_REG=PORT_OUT;break;
    2fce:	ea e3       	ldi	r30, 0x3A	; 58
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	8f ef       	ldi	r24, 0xFF	; 255
    2fd4:	80 83       	st	Z, r24
    2fd6:	0a c0       	rjmp	.+20     	; 0x2fec <DIO_SetPortDirection+0xfa>
		case PORT_D: DDRA_REG=PORT_OUT;break;
    2fd8:	ea e3       	ldi	r30, 0x3A	; 58
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	8f ef       	ldi	r24, 0xFF	; 255
    2fde:	80 83       	st	Z, r24
    2fe0:	05 c0       	rjmp	.+10     	; 0x2fec <DIO_SetPortDirection+0xfa>
		default:ErrState=NOK;break;
    2fe2:	81 e0       	ldi	r24, 0x01	; 1
    2fe4:	89 83       	std	Y+1, r24	; 0x01
    2fe6:	02 c0       	rjmp	.+4      	; 0x2fec <DIO_SetPortDirection+0xfa>
		}
	}

	else
	{
		ErrState=NOK;
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrState;
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fee:	27 96       	adiw	r28, 0x07	; 7
    2ff0:	0f b6       	in	r0, 0x3f	; 63
    2ff2:	f8 94       	cli
    2ff4:	de bf       	out	0x3e, r29	; 62
    2ff6:	0f be       	out	0x3f, r0	; 63
    2ff8:	cd bf       	out	0x3d, r28	; 61
    2ffa:	cf 91       	pop	r28
    2ffc:	df 91       	pop	r29
    2ffe:	08 95       	ret

00003000 <DIO_SetPortValue>:
u8int_t DIO_SetPortValue(u8int_t PortId, u8int_t PortVal)
{
    3000:	df 93       	push	r29
    3002:	cf 93       	push	r28
    3004:	cd b7       	in	r28, 0x3d	; 61
    3006:	de b7       	in	r29, 0x3e	; 62
    3008:	27 97       	sbiw	r28, 0x07	; 7
    300a:	0f b6       	in	r0, 0x3f	; 63
    300c:	f8 94       	cli
    300e:	de bf       	out	0x3e, r29	; 62
    3010:	0f be       	out	0x3f, r0	; 63
    3012:	cd bf       	out	0x3d, r28	; 61
    3014:	8a 83       	std	Y+2, r24	; 0x02
    3016:	6b 83       	std	Y+3, r22	; 0x03
	u8int_t ErrorState=OK;
    3018:	19 82       	std	Y+1, r1	; 0x01
	if(PortVal == PORT_HIGH)
    301a:	8b 81       	ldd	r24, Y+3	; 0x03
    301c:	8f 3f       	cpi	r24, 0xFF	; 255
    301e:	b1 f5       	brne	.+108    	; 0x308c <DIO_SetPortValue+0x8c>
	{
		switch(PortId){
    3020:	8a 81       	ldd	r24, Y+2	; 0x02
    3022:	28 2f       	mov	r18, r24
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	3f 83       	std	Y+7, r19	; 0x07
    3028:	2e 83       	std	Y+6, r18	; 0x06
    302a:	8e 81       	ldd	r24, Y+6	; 0x06
    302c:	9f 81       	ldd	r25, Y+7	; 0x07
    302e:	81 30       	cpi	r24, 0x01	; 1
    3030:	91 05       	cpc	r25, r1
    3032:	d1 f0       	breq	.+52     	; 0x3068 <DIO_SetPortValue+0x68>
    3034:	2e 81       	ldd	r18, Y+6	; 0x06
    3036:	3f 81       	ldd	r19, Y+7	; 0x07
    3038:	22 30       	cpi	r18, 0x02	; 2
    303a:	31 05       	cpc	r19, r1
    303c:	2c f4       	brge	.+10     	; 0x3048 <DIO_SetPortValue+0x48>
    303e:	8e 81       	ldd	r24, Y+6	; 0x06
    3040:	9f 81       	ldd	r25, Y+7	; 0x07
    3042:	00 97       	sbiw	r24, 0x00	; 0
    3044:	61 f0       	breq	.+24     	; 0x305e <DIO_SetPortValue+0x5e>
    3046:	1f c0       	rjmp	.+62     	; 0x3086 <DIO_SetPortValue+0x86>
    3048:	2e 81       	ldd	r18, Y+6	; 0x06
    304a:	3f 81       	ldd	r19, Y+7	; 0x07
    304c:	22 30       	cpi	r18, 0x02	; 2
    304e:	31 05       	cpc	r19, r1
    3050:	81 f0       	breq	.+32     	; 0x3072 <DIO_SetPortValue+0x72>
    3052:	8e 81       	ldd	r24, Y+6	; 0x06
    3054:	9f 81       	ldd	r25, Y+7	; 0x07
    3056:	83 30       	cpi	r24, 0x03	; 3
    3058:	91 05       	cpc	r25, r1
    305a:	81 f0       	breq	.+32     	; 0x307c <DIO_SetPortValue+0x7c>
    305c:	14 c0       	rjmp	.+40     	; 0x3086 <DIO_SetPortValue+0x86>
		case PORT_A: PORTA_REG=PORT_HIGH;break;
    305e:	eb e3       	ldi	r30, 0x3B	; 59
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	8f ef       	ldi	r24, 0xFF	; 255
    3064:	80 83       	st	Z, r24
    3066:	49 c0       	rjmp	.+146    	; 0x30fa <DIO_SetPortValue+0xfa>
		case PORT_B: PORTB_REG=PORT_HIGH;break;
    3068:	e8 e3       	ldi	r30, 0x38	; 56
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	8f ef       	ldi	r24, 0xFF	; 255
    306e:	80 83       	st	Z, r24
    3070:	44 c0       	rjmp	.+136    	; 0x30fa <DIO_SetPortValue+0xfa>
		case PORT_C: PORTC_REG=PORT_HIGH;break;
    3072:	e5 e3       	ldi	r30, 0x35	; 53
    3074:	f0 e0       	ldi	r31, 0x00	; 0
    3076:	8f ef       	ldi	r24, 0xFF	; 255
    3078:	80 83       	st	Z, r24
    307a:	3f c0       	rjmp	.+126    	; 0x30fa <DIO_SetPortValue+0xfa>
		case PORT_D: PORTD_REG=PORT_HIGH;break;
    307c:	e2 e3       	ldi	r30, 0x32	; 50
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	8f ef       	ldi	r24, 0xFF	; 255
    3082:	80 83       	st	Z, r24
    3084:	3a c0       	rjmp	.+116    	; 0x30fa <DIO_SetPortValue+0xfa>
		default:ErrorState=NOK;break;
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	89 83       	std	Y+1, r24	; 0x01
    308a:	37 c0       	rjmp	.+110    	; 0x30fa <DIO_SetPortValue+0xfa>

		}


	}
	else if (PortVal == PORT_LOW)
    308c:	8b 81       	ldd	r24, Y+3	; 0x03
    308e:	88 23       	and	r24, r24
    3090:	91 f5       	brne	.+100    	; 0x30f6 <DIO_SetPortValue+0xf6>
	{
		switch(PortId){
    3092:	8a 81       	ldd	r24, Y+2	; 0x02
    3094:	28 2f       	mov	r18, r24
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	3d 83       	std	Y+5, r19	; 0x05
    309a:	2c 83       	std	Y+4, r18	; 0x04
    309c:	8c 81       	ldd	r24, Y+4	; 0x04
    309e:	9d 81       	ldd	r25, Y+5	; 0x05
    30a0:	81 30       	cpi	r24, 0x01	; 1
    30a2:	91 05       	cpc	r25, r1
    30a4:	c9 f0       	breq	.+50     	; 0x30d8 <DIO_SetPortValue+0xd8>
    30a6:	2c 81       	ldd	r18, Y+4	; 0x04
    30a8:	3d 81       	ldd	r19, Y+5	; 0x05
    30aa:	22 30       	cpi	r18, 0x02	; 2
    30ac:	31 05       	cpc	r19, r1
    30ae:	2c f4       	brge	.+10     	; 0x30ba <DIO_SetPortValue+0xba>
    30b0:	8c 81       	ldd	r24, Y+4	; 0x04
    30b2:	9d 81       	ldd	r25, Y+5	; 0x05
    30b4:	00 97       	sbiw	r24, 0x00	; 0
    30b6:	61 f0       	breq	.+24     	; 0x30d0 <DIO_SetPortValue+0xd0>
    30b8:	1b c0       	rjmp	.+54     	; 0x30f0 <DIO_SetPortValue+0xf0>
    30ba:	2c 81       	ldd	r18, Y+4	; 0x04
    30bc:	3d 81       	ldd	r19, Y+5	; 0x05
    30be:	22 30       	cpi	r18, 0x02	; 2
    30c0:	31 05       	cpc	r19, r1
    30c2:	71 f0       	breq	.+28     	; 0x30e0 <DIO_SetPortValue+0xe0>
    30c4:	8c 81       	ldd	r24, Y+4	; 0x04
    30c6:	9d 81       	ldd	r25, Y+5	; 0x05
    30c8:	83 30       	cpi	r24, 0x03	; 3
    30ca:	91 05       	cpc	r25, r1
    30cc:	69 f0       	breq	.+26     	; 0x30e8 <DIO_SetPortValue+0xe8>
    30ce:	10 c0       	rjmp	.+32     	; 0x30f0 <DIO_SetPortValue+0xf0>
		case PORT_A: PORTA_REG=PORT_LOW;break;
    30d0:	eb e3       	ldi	r30, 0x3B	; 59
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	10 82       	st	Z, r1
    30d6:	11 c0       	rjmp	.+34     	; 0x30fa <DIO_SetPortValue+0xfa>
		case PORT_B: PORTB_REG=PORT_LOW;break;
    30d8:	e8 e3       	ldi	r30, 0x38	; 56
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	10 82       	st	Z, r1
    30de:	0d c0       	rjmp	.+26     	; 0x30fa <DIO_SetPortValue+0xfa>
		case PORT_C: PORTC_REG=PORT_LOW;break;
    30e0:	e5 e3       	ldi	r30, 0x35	; 53
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	10 82       	st	Z, r1
    30e6:	09 c0       	rjmp	.+18     	; 0x30fa <DIO_SetPortValue+0xfa>
		case PORT_D: PORTD_REG=PORT_LOW;break;
    30e8:	e2 e3       	ldi	r30, 0x32	; 50
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	10 82       	st	Z, r1
    30ee:	05 c0       	rjmp	.+10     	; 0x30fa <DIO_SetPortValue+0xfa>
		default:ErrorState=NOK;break;
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	89 83       	std	Y+1, r24	; 0x01
    30f4:	02 c0       	rjmp	.+4      	; 0x30fa <DIO_SetPortValue+0xfa>


	}
	else
	{
		ErrorState=NOK;
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	89 83       	std	Y+1, r24	; 0x01
	}
	return ErrorState;
    30fa:	89 81       	ldd	r24, Y+1	; 0x01

}
    30fc:	27 96       	adiw	r28, 0x07	; 7
    30fe:	0f b6       	in	r0, 0x3f	; 63
    3100:	f8 94       	cli
    3102:	de bf       	out	0x3e, r29	; 62
    3104:	0f be       	out	0x3f, r0	; 63
    3106:	cd bf       	out	0x3d, r28	; 61
    3108:	cf 91       	pop	r28
    310a:	df 91       	pop	r29
    310c:	08 95       	ret

0000310e <__udivmodsi4>:
    310e:	a1 e2       	ldi	r26, 0x21	; 33
    3110:	1a 2e       	mov	r1, r26
    3112:	aa 1b       	sub	r26, r26
    3114:	bb 1b       	sub	r27, r27
    3116:	fd 01       	movw	r30, r26
    3118:	0d c0       	rjmp	.+26     	; 0x3134 <__udivmodsi4_ep>

0000311a <__udivmodsi4_loop>:
    311a:	aa 1f       	adc	r26, r26
    311c:	bb 1f       	adc	r27, r27
    311e:	ee 1f       	adc	r30, r30
    3120:	ff 1f       	adc	r31, r31
    3122:	a2 17       	cp	r26, r18
    3124:	b3 07       	cpc	r27, r19
    3126:	e4 07       	cpc	r30, r20
    3128:	f5 07       	cpc	r31, r21
    312a:	20 f0       	brcs	.+8      	; 0x3134 <__udivmodsi4_ep>
    312c:	a2 1b       	sub	r26, r18
    312e:	b3 0b       	sbc	r27, r19
    3130:	e4 0b       	sbc	r30, r20
    3132:	f5 0b       	sbc	r31, r21

00003134 <__udivmodsi4_ep>:
    3134:	66 1f       	adc	r22, r22
    3136:	77 1f       	adc	r23, r23
    3138:	88 1f       	adc	r24, r24
    313a:	99 1f       	adc	r25, r25
    313c:	1a 94       	dec	r1
    313e:	69 f7       	brne	.-38     	; 0x311a <__udivmodsi4_loop>
    3140:	60 95       	com	r22
    3142:	70 95       	com	r23
    3144:	80 95       	com	r24
    3146:	90 95       	com	r25
    3148:	9b 01       	movw	r18, r22
    314a:	ac 01       	movw	r20, r24
    314c:	bd 01       	movw	r22, r26
    314e:	cf 01       	movw	r24, r30
    3150:	08 95       	ret

00003152 <__prologue_saves__>:
    3152:	2f 92       	push	r2
    3154:	3f 92       	push	r3
    3156:	4f 92       	push	r4
    3158:	5f 92       	push	r5
    315a:	6f 92       	push	r6
    315c:	7f 92       	push	r7
    315e:	8f 92       	push	r8
    3160:	9f 92       	push	r9
    3162:	af 92       	push	r10
    3164:	bf 92       	push	r11
    3166:	cf 92       	push	r12
    3168:	df 92       	push	r13
    316a:	ef 92       	push	r14
    316c:	ff 92       	push	r15
    316e:	0f 93       	push	r16
    3170:	1f 93       	push	r17
    3172:	cf 93       	push	r28
    3174:	df 93       	push	r29
    3176:	cd b7       	in	r28, 0x3d	; 61
    3178:	de b7       	in	r29, 0x3e	; 62
    317a:	ca 1b       	sub	r28, r26
    317c:	db 0b       	sbc	r29, r27
    317e:	0f b6       	in	r0, 0x3f	; 63
    3180:	f8 94       	cli
    3182:	de bf       	out	0x3e, r29	; 62
    3184:	0f be       	out	0x3f, r0	; 63
    3186:	cd bf       	out	0x3d, r28	; 61
    3188:	09 94       	ijmp

0000318a <__epilogue_restores__>:
    318a:	2a 88       	ldd	r2, Y+18	; 0x12
    318c:	39 88       	ldd	r3, Y+17	; 0x11
    318e:	48 88       	ldd	r4, Y+16	; 0x10
    3190:	5f 84       	ldd	r5, Y+15	; 0x0f
    3192:	6e 84       	ldd	r6, Y+14	; 0x0e
    3194:	7d 84       	ldd	r7, Y+13	; 0x0d
    3196:	8c 84       	ldd	r8, Y+12	; 0x0c
    3198:	9b 84       	ldd	r9, Y+11	; 0x0b
    319a:	aa 84       	ldd	r10, Y+10	; 0x0a
    319c:	b9 84       	ldd	r11, Y+9	; 0x09
    319e:	c8 84       	ldd	r12, Y+8	; 0x08
    31a0:	df 80       	ldd	r13, Y+7	; 0x07
    31a2:	ee 80       	ldd	r14, Y+6	; 0x06
    31a4:	fd 80       	ldd	r15, Y+5	; 0x05
    31a6:	0c 81       	ldd	r16, Y+4	; 0x04
    31a8:	1b 81       	ldd	r17, Y+3	; 0x03
    31aa:	aa 81       	ldd	r26, Y+2	; 0x02
    31ac:	b9 81       	ldd	r27, Y+1	; 0x01
    31ae:	ce 0f       	add	r28, r30
    31b0:	d1 1d       	adc	r29, r1
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	f8 94       	cli
    31b6:	de bf       	out	0x3e, r29	; 62
    31b8:	0f be       	out	0x3f, r0	; 63
    31ba:	cd bf       	out	0x3d, r28	; 61
    31bc:	ed 01       	movw	r28, r26
    31be:	08 95       	ret

000031c0 <do_rand>:
    31c0:	a0 e0       	ldi	r26, 0x00	; 0
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	e6 ee       	ldi	r30, 0xE6	; 230
    31c6:	f8 e1       	ldi	r31, 0x18	; 24
    31c8:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__prologue_saves__+0x10>
    31cc:	ec 01       	movw	r28, r24
    31ce:	a8 80       	ld	r10, Y
    31d0:	b9 80       	ldd	r11, Y+1	; 0x01
    31d2:	ca 80       	ldd	r12, Y+2	; 0x02
    31d4:	db 80       	ldd	r13, Y+3	; 0x03
    31d6:	a1 14       	cp	r10, r1
    31d8:	b1 04       	cpc	r11, r1
    31da:	c1 04       	cpc	r12, r1
    31dc:	d1 04       	cpc	r13, r1
    31de:	41 f4       	brne	.+16     	; 0x31f0 <do_rand+0x30>
    31e0:	84 e2       	ldi	r24, 0x24	; 36
    31e2:	a8 2e       	mov	r10, r24
    31e4:	89 ed       	ldi	r24, 0xD9	; 217
    31e6:	b8 2e       	mov	r11, r24
    31e8:	8b e5       	ldi	r24, 0x5B	; 91
    31ea:	c8 2e       	mov	r12, r24
    31ec:	87 e0       	ldi	r24, 0x07	; 7
    31ee:	d8 2e       	mov	r13, r24
    31f0:	c6 01       	movw	r24, r12
    31f2:	b5 01       	movw	r22, r10
    31f4:	2d e1       	ldi	r18, 0x1D	; 29
    31f6:	33 ef       	ldi	r19, 0xF3	; 243
    31f8:	41 e0       	ldi	r20, 0x01	; 1
    31fa:	50 e0       	ldi	r21, 0x00	; 0
    31fc:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__divmodsi4>
    3200:	27 ea       	ldi	r18, 0xA7	; 167
    3202:	31 e4       	ldi	r19, 0x41	; 65
    3204:	40 e0       	ldi	r20, 0x00	; 0
    3206:	50 e0       	ldi	r21, 0x00	; 0
    3208:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <__mulsi3>
    320c:	7b 01       	movw	r14, r22
    320e:	8c 01       	movw	r16, r24
    3210:	c6 01       	movw	r24, r12
    3212:	b5 01       	movw	r22, r10
    3214:	2d e1       	ldi	r18, 0x1D	; 29
    3216:	33 ef       	ldi	r19, 0xF3	; 243
    3218:	41 e0       	ldi	r20, 0x01	; 1
    321a:	50 e0       	ldi	r21, 0x00	; 0
    321c:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__divmodsi4>
    3220:	ca 01       	movw	r24, r20
    3222:	b9 01       	movw	r22, r18
    3224:	2c ee       	ldi	r18, 0xEC	; 236
    3226:	34 ef       	ldi	r19, 0xF4	; 244
    3228:	4f ef       	ldi	r20, 0xFF	; 255
    322a:	5f ef       	ldi	r21, 0xFF	; 255
    322c:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <__mulsi3>
    3230:	6e 0d       	add	r22, r14
    3232:	7f 1d       	adc	r23, r15
    3234:	80 1f       	adc	r24, r16
    3236:	91 1f       	adc	r25, r17
    3238:	97 ff       	sbrs	r25, 7
    323a:	04 c0       	rjmp	.+8      	; 0x3244 <do_rand+0x84>
    323c:	61 50       	subi	r22, 0x01	; 1
    323e:	70 40       	sbci	r23, 0x00	; 0
    3240:	80 40       	sbci	r24, 0x00	; 0
    3242:	90 48       	sbci	r25, 0x80	; 128
    3244:	68 83       	st	Y, r22
    3246:	79 83       	std	Y+1, r23	; 0x01
    3248:	8a 83       	std	Y+2, r24	; 0x02
    324a:	9b 83       	std	Y+3, r25	; 0x03
    324c:	9b 01       	movw	r18, r22
    324e:	3f 77       	andi	r19, 0x7F	; 127
    3250:	c9 01       	movw	r24, r18
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	ea e0       	ldi	r30, 0x0A	; 10
    3258:	0c 94 cd 18 	jmp	0x319a	; 0x319a <__epilogue_restores__+0x10>

0000325c <rand_r>:
    325c:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <do_rand>
    3260:	08 95       	ret

00003262 <rand>:
    3262:	81 ec       	ldi	r24, 0xC1	; 193
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <do_rand>
    326a:	08 95       	ret

0000326c <srand>:
    326c:	a0 e0       	ldi	r26, 0x00	; 0
    326e:	b0 e0       	ldi	r27, 0x00	; 0
    3270:	80 93 c1 00 	sts	0x00C1, r24
    3274:	90 93 c2 00 	sts	0x00C2, r25
    3278:	a0 93 c3 00 	sts	0x00C3, r26
    327c:	b0 93 c4 00 	sts	0x00C4, r27
    3280:	08 95       	ret

00003282 <memset>:
    3282:	dc 01       	movw	r26, r24
    3284:	01 c0       	rjmp	.+2      	; 0x3288 <memset+0x6>
    3286:	6d 93       	st	X+, r22
    3288:	41 50       	subi	r20, 0x01	; 1
    328a:	50 40       	sbci	r21, 0x00	; 0
    328c:	e0 f7       	brcc	.-8      	; 0x3286 <memset+0x4>
    328e:	08 95       	ret

00003290 <strcmp>:
    3290:	fb 01       	movw	r30, r22
    3292:	dc 01       	movw	r26, r24
    3294:	8d 91       	ld	r24, X+
    3296:	01 90       	ld	r0, Z+
    3298:	80 19       	sub	r24, r0
    329a:	01 10       	cpse	r0, r1
    329c:	d9 f3       	breq	.-10     	; 0x3294 <strcmp+0x4>
    329e:	99 0b       	sbc	r25, r25
    32a0:	08 95       	ret

000032a2 <strupr>:
    32a2:	dc 01       	movw	r26, r24
    32a4:	6c 91       	ld	r22, X
    32a6:	61 56       	subi	r22, 0x61	; 97
    32a8:	6a 31       	cpi	r22, 0x1A	; 26
    32aa:	08 f0       	brcs	.+2      	; 0x32ae <strupr+0xc>
    32ac:	60 5e       	subi	r22, 0xE0	; 224
    32ae:	6f 5b       	subi	r22, 0xBF	; 191
    32b0:	6d 93       	st	X+, r22
    32b2:	c1 f7       	brne	.-16     	; 0x32a4 <strupr+0x2>
    32b4:	08 95       	ret

000032b6 <snprintf>:
    32b6:	ae e0       	ldi	r26, 0x0E	; 14
    32b8:	b0 e0       	ldi	r27, 0x00	; 0
    32ba:	e1 e6       	ldi	r30, 0x61	; 97
    32bc:	f9 e1       	ldi	r31, 0x19	; 25
    32be:	0c 94 b7 18 	jmp	0x316e	; 0x316e <__prologue_saves__+0x1c>
    32c2:	0d 89       	ldd	r16, Y+21	; 0x15
    32c4:	1e 89       	ldd	r17, Y+22	; 0x16
    32c6:	8f 89       	ldd	r24, Y+23	; 0x17
    32c8:	98 8d       	ldd	r25, Y+24	; 0x18
    32ca:	97 ff       	sbrs	r25, 7
    32cc:	02 c0       	rjmp	.+4      	; 0x32d2 <snprintf+0x1c>
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	90 e8       	ldi	r25, 0x80	; 128
    32d2:	01 97       	sbiw	r24, 0x01	; 1
    32d4:	9e 83       	std	Y+6, r25	; 0x06
    32d6:	8d 83       	std	Y+5, r24	; 0x05
    32d8:	1a 83       	std	Y+2, r17	; 0x02
    32da:	09 83       	std	Y+1, r16	; 0x01
    32dc:	86 e0       	ldi	r24, 0x06	; 6
    32de:	8c 83       	std	Y+4, r24	; 0x04
    32e0:	9e 01       	movw	r18, r28
    32e2:	25 5e       	subi	r18, 0xE5	; 229
    32e4:	3f 4f       	sbci	r19, 0xFF	; 255
    32e6:	ce 01       	movw	r24, r28
    32e8:	01 96       	adiw	r24, 0x01	; 1
    32ea:	69 8d       	ldd	r22, Y+25	; 0x19
    32ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32ee:	a9 01       	movw	r20, r18
    32f0:	0e 94 a6 19 	call	0x334c	; 0x334c <vfprintf>
    32f4:	4d 81       	ldd	r20, Y+5	; 0x05
    32f6:	5e 81       	ldd	r21, Y+6	; 0x06
    32f8:	57 fd       	sbrc	r21, 7
    32fa:	0a c0       	rjmp	.+20     	; 0x3310 <snprintf+0x5a>
    32fc:	2f 81       	ldd	r18, Y+7	; 0x07
    32fe:	38 85       	ldd	r19, Y+8	; 0x08
    3300:	42 17       	cp	r20, r18
    3302:	53 07       	cpc	r21, r19
    3304:	0c f4       	brge	.+2      	; 0x3308 <snprintf+0x52>
    3306:	9a 01       	movw	r18, r20
    3308:	02 0f       	add	r16, r18
    330a:	13 1f       	adc	r17, r19
    330c:	f8 01       	movw	r30, r16
    330e:	10 82       	st	Z, r1
    3310:	2e 96       	adiw	r28, 0x0e	; 14
    3312:	e4 e0       	ldi	r30, 0x04	; 4
    3314:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <__epilogue_restores__+0x1c>

00003318 <sscanf>:
    3318:	ae e0       	ldi	r26, 0x0E	; 14
    331a:	b0 e0       	ldi	r27, 0x00	; 0
    331c:	e2 e9       	ldi	r30, 0x92	; 146
    331e:	f9 e1       	ldi	r31, 0x19	; 25
    3320:	0c 94 b9 18 	jmp	0x3172	; 0x3172 <__prologue_saves__+0x20>
    3324:	85 e0       	ldi	r24, 0x05	; 5
    3326:	8c 83       	std	Y+4, r24	; 0x04
    3328:	8b 89       	ldd	r24, Y+19	; 0x13
    332a:	9c 89       	ldd	r25, Y+20	; 0x14
    332c:	9a 83       	std	Y+2, r25	; 0x02
    332e:	89 83       	std	Y+1, r24	; 0x01
    3330:	9e 01       	movw	r18, r28
    3332:	29 5e       	subi	r18, 0xE9	; 233
    3334:	3f 4f       	sbci	r19, 0xFF	; 255
    3336:	ce 01       	movw	r24, r28
    3338:	01 96       	adiw	r24, 0x01	; 1
    333a:	6d 89       	ldd	r22, Y+21	; 0x15
    333c:	7e 89       	ldd	r23, Y+22	; 0x16
    333e:	a9 01       	movw	r20, r18
    3340:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <vfscanf>
    3344:	2e 96       	adiw	r28, 0x0e	; 14
    3346:	e2 e0       	ldi	r30, 0x02	; 2
    3348:	0c 94 d5 18 	jmp	0x31aa	; 0x31aa <__epilogue_restores__+0x20>

0000334c <vfprintf>:
    334c:	ab e0       	ldi	r26, 0x0B	; 11
    334e:	b0 e0       	ldi	r27, 0x00	; 0
    3350:	ec ea       	ldi	r30, 0xAC	; 172
    3352:	f9 e1       	ldi	r31, 0x19	; 25
    3354:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <__prologue_saves__>
    3358:	3c 01       	movw	r6, r24
    335a:	2b 01       	movw	r4, r22
    335c:	5a 01       	movw	r10, r20
    335e:	fc 01       	movw	r30, r24
    3360:	17 82       	std	Z+7, r1	; 0x07
    3362:	16 82       	std	Z+6, r1	; 0x06
    3364:	83 81       	ldd	r24, Z+3	; 0x03
    3366:	81 fd       	sbrc	r24, 1
    3368:	03 c0       	rjmp	.+6      	; 0x3370 <vfprintf+0x24>
    336a:	6f ef       	ldi	r22, 0xFF	; 255
    336c:	7f ef       	ldi	r23, 0xFF	; 255
    336e:	c6 c1       	rjmp	.+908    	; 0x36fc <vfprintf+0x3b0>
    3370:	9a e0       	ldi	r25, 0x0A	; 10
    3372:	89 2e       	mov	r8, r25
    3374:	1e 01       	movw	r2, r28
    3376:	08 94       	sec
    3378:	21 1c       	adc	r2, r1
    337a:	31 1c       	adc	r3, r1
    337c:	f3 01       	movw	r30, r6
    337e:	23 81       	ldd	r18, Z+3	; 0x03
    3380:	f2 01       	movw	r30, r4
    3382:	23 fd       	sbrc	r18, 3
    3384:	85 91       	lpm	r24, Z+
    3386:	23 ff       	sbrs	r18, 3
    3388:	81 91       	ld	r24, Z+
    338a:	2f 01       	movw	r4, r30
    338c:	88 23       	and	r24, r24
    338e:	09 f4       	brne	.+2      	; 0x3392 <vfprintf+0x46>
    3390:	b2 c1       	rjmp	.+868    	; 0x36f6 <vfprintf+0x3aa>
    3392:	85 32       	cpi	r24, 0x25	; 37
    3394:	39 f4       	brne	.+14     	; 0x33a4 <vfprintf+0x58>
    3396:	23 fd       	sbrc	r18, 3
    3398:	85 91       	lpm	r24, Z+
    339a:	23 ff       	sbrs	r18, 3
    339c:	81 91       	ld	r24, Z+
    339e:	2f 01       	movw	r4, r30
    33a0:	85 32       	cpi	r24, 0x25	; 37
    33a2:	29 f4       	brne	.+10     	; 0x33ae <vfprintf+0x62>
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	b3 01       	movw	r22, r6
    33a8:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <fputc>
    33ac:	e7 cf       	rjmp	.-50     	; 0x337c <vfprintf+0x30>
    33ae:	98 2f       	mov	r25, r24
    33b0:	ff 24       	eor	r15, r15
    33b2:	ee 24       	eor	r14, r14
    33b4:	99 24       	eor	r9, r9
    33b6:	ff e1       	ldi	r31, 0x1F	; 31
    33b8:	ff 15       	cp	r31, r15
    33ba:	d0 f0       	brcs	.+52     	; 0x33f0 <vfprintf+0xa4>
    33bc:	9b 32       	cpi	r25, 0x2B	; 43
    33be:	69 f0       	breq	.+26     	; 0x33da <vfprintf+0x8e>
    33c0:	9c 32       	cpi	r25, 0x2C	; 44
    33c2:	28 f4       	brcc	.+10     	; 0x33ce <vfprintf+0x82>
    33c4:	90 32       	cpi	r25, 0x20	; 32
    33c6:	59 f0       	breq	.+22     	; 0x33de <vfprintf+0x92>
    33c8:	93 32       	cpi	r25, 0x23	; 35
    33ca:	91 f4       	brne	.+36     	; 0x33f0 <vfprintf+0xa4>
    33cc:	0e c0       	rjmp	.+28     	; 0x33ea <vfprintf+0x9e>
    33ce:	9d 32       	cpi	r25, 0x2D	; 45
    33d0:	49 f0       	breq	.+18     	; 0x33e4 <vfprintf+0x98>
    33d2:	90 33       	cpi	r25, 0x30	; 48
    33d4:	69 f4       	brne	.+26     	; 0x33f0 <vfprintf+0xa4>
    33d6:	41 e0       	ldi	r20, 0x01	; 1
    33d8:	24 c0       	rjmp	.+72     	; 0x3422 <vfprintf+0xd6>
    33da:	52 e0       	ldi	r21, 0x02	; 2
    33dc:	f5 2a       	or	r15, r21
    33de:	84 e0       	ldi	r24, 0x04	; 4
    33e0:	f8 2a       	or	r15, r24
    33e2:	28 c0       	rjmp	.+80     	; 0x3434 <vfprintf+0xe8>
    33e4:	98 e0       	ldi	r25, 0x08	; 8
    33e6:	f9 2a       	or	r15, r25
    33e8:	25 c0       	rjmp	.+74     	; 0x3434 <vfprintf+0xe8>
    33ea:	e0 e1       	ldi	r30, 0x10	; 16
    33ec:	fe 2a       	or	r15, r30
    33ee:	22 c0       	rjmp	.+68     	; 0x3434 <vfprintf+0xe8>
    33f0:	f7 fc       	sbrc	r15, 7
    33f2:	29 c0       	rjmp	.+82     	; 0x3446 <vfprintf+0xfa>
    33f4:	89 2f       	mov	r24, r25
    33f6:	80 53       	subi	r24, 0x30	; 48
    33f8:	8a 30       	cpi	r24, 0x0A	; 10
    33fa:	70 f4       	brcc	.+28     	; 0x3418 <vfprintf+0xcc>
    33fc:	f6 fe       	sbrs	r15, 6
    33fe:	05 c0       	rjmp	.+10     	; 0x340a <vfprintf+0xbe>
    3400:	98 9c       	mul	r9, r8
    3402:	90 2c       	mov	r9, r0
    3404:	11 24       	eor	r1, r1
    3406:	98 0e       	add	r9, r24
    3408:	15 c0       	rjmp	.+42     	; 0x3434 <vfprintf+0xe8>
    340a:	e8 9c       	mul	r14, r8
    340c:	e0 2c       	mov	r14, r0
    340e:	11 24       	eor	r1, r1
    3410:	e8 0e       	add	r14, r24
    3412:	f0 e2       	ldi	r31, 0x20	; 32
    3414:	ff 2a       	or	r15, r31
    3416:	0e c0       	rjmp	.+28     	; 0x3434 <vfprintf+0xe8>
    3418:	9e 32       	cpi	r25, 0x2E	; 46
    341a:	29 f4       	brne	.+10     	; 0x3426 <vfprintf+0xda>
    341c:	f6 fc       	sbrc	r15, 6
    341e:	6b c1       	rjmp	.+726    	; 0x36f6 <vfprintf+0x3aa>
    3420:	40 e4       	ldi	r20, 0x40	; 64
    3422:	f4 2a       	or	r15, r20
    3424:	07 c0       	rjmp	.+14     	; 0x3434 <vfprintf+0xe8>
    3426:	9c 36       	cpi	r25, 0x6C	; 108
    3428:	19 f4       	brne	.+6      	; 0x3430 <vfprintf+0xe4>
    342a:	50 e8       	ldi	r21, 0x80	; 128
    342c:	f5 2a       	or	r15, r21
    342e:	02 c0       	rjmp	.+4      	; 0x3434 <vfprintf+0xe8>
    3430:	98 36       	cpi	r25, 0x68	; 104
    3432:	49 f4       	brne	.+18     	; 0x3446 <vfprintf+0xfa>
    3434:	f2 01       	movw	r30, r4
    3436:	23 fd       	sbrc	r18, 3
    3438:	95 91       	lpm	r25, Z+
    343a:	23 ff       	sbrs	r18, 3
    343c:	91 91       	ld	r25, Z+
    343e:	2f 01       	movw	r4, r30
    3440:	99 23       	and	r25, r25
    3442:	09 f0       	breq	.+2      	; 0x3446 <vfprintf+0xfa>
    3444:	b8 cf       	rjmp	.-144    	; 0x33b6 <vfprintf+0x6a>
    3446:	89 2f       	mov	r24, r25
    3448:	85 54       	subi	r24, 0x45	; 69
    344a:	83 30       	cpi	r24, 0x03	; 3
    344c:	18 f0       	brcs	.+6      	; 0x3454 <vfprintf+0x108>
    344e:	80 52       	subi	r24, 0x20	; 32
    3450:	83 30       	cpi	r24, 0x03	; 3
    3452:	38 f4       	brcc	.+14     	; 0x3462 <vfprintf+0x116>
    3454:	44 e0       	ldi	r20, 0x04	; 4
    3456:	50 e0       	ldi	r21, 0x00	; 0
    3458:	a4 0e       	add	r10, r20
    345a:	b5 1e       	adc	r11, r21
    345c:	5f e3       	ldi	r21, 0x3F	; 63
    345e:	59 83       	std	Y+1, r21	; 0x01
    3460:	0f c0       	rjmp	.+30     	; 0x3480 <vfprintf+0x134>
    3462:	93 36       	cpi	r25, 0x63	; 99
    3464:	31 f0       	breq	.+12     	; 0x3472 <vfprintf+0x126>
    3466:	93 37       	cpi	r25, 0x73	; 115
    3468:	79 f0       	breq	.+30     	; 0x3488 <vfprintf+0x13c>
    346a:	93 35       	cpi	r25, 0x53	; 83
    346c:	09 f0       	breq	.+2      	; 0x3470 <vfprintf+0x124>
    346e:	56 c0       	rjmp	.+172    	; 0x351c <vfprintf+0x1d0>
    3470:	20 c0       	rjmp	.+64     	; 0x34b2 <vfprintf+0x166>
    3472:	f5 01       	movw	r30, r10
    3474:	80 81       	ld	r24, Z
    3476:	89 83       	std	Y+1, r24	; 0x01
    3478:	42 e0       	ldi	r20, 0x02	; 2
    347a:	50 e0       	ldi	r21, 0x00	; 0
    347c:	a4 0e       	add	r10, r20
    347e:	b5 1e       	adc	r11, r21
    3480:	61 01       	movw	r12, r2
    3482:	01 e0       	ldi	r16, 0x01	; 1
    3484:	10 e0       	ldi	r17, 0x00	; 0
    3486:	12 c0       	rjmp	.+36     	; 0x34ac <vfprintf+0x160>
    3488:	f5 01       	movw	r30, r10
    348a:	c0 80       	ld	r12, Z
    348c:	d1 80       	ldd	r13, Z+1	; 0x01
    348e:	f6 fc       	sbrc	r15, 6
    3490:	03 c0       	rjmp	.+6      	; 0x3498 <vfprintf+0x14c>
    3492:	6f ef       	ldi	r22, 0xFF	; 255
    3494:	7f ef       	ldi	r23, 0xFF	; 255
    3496:	02 c0       	rjmp	.+4      	; 0x349c <vfprintf+0x150>
    3498:	69 2d       	mov	r22, r9
    349a:	70 e0       	ldi	r23, 0x00	; 0
    349c:	42 e0       	ldi	r20, 0x02	; 2
    349e:	50 e0       	ldi	r21, 0x00	; 0
    34a0:	a4 0e       	add	r10, r20
    34a2:	b5 1e       	adc	r11, r21
    34a4:	c6 01       	movw	r24, r12
    34a6:	0e 94 41 1e 	call	0x3c82	; 0x3c82 <strnlen>
    34aa:	8c 01       	movw	r16, r24
    34ac:	5f e7       	ldi	r21, 0x7F	; 127
    34ae:	f5 22       	and	r15, r21
    34b0:	14 c0       	rjmp	.+40     	; 0x34da <vfprintf+0x18e>
    34b2:	f5 01       	movw	r30, r10
    34b4:	c0 80       	ld	r12, Z
    34b6:	d1 80       	ldd	r13, Z+1	; 0x01
    34b8:	f6 fc       	sbrc	r15, 6
    34ba:	03 c0       	rjmp	.+6      	; 0x34c2 <vfprintf+0x176>
    34bc:	6f ef       	ldi	r22, 0xFF	; 255
    34be:	7f ef       	ldi	r23, 0xFF	; 255
    34c0:	02 c0       	rjmp	.+4      	; 0x34c6 <vfprintf+0x17a>
    34c2:	69 2d       	mov	r22, r9
    34c4:	70 e0       	ldi	r23, 0x00	; 0
    34c6:	42 e0       	ldi	r20, 0x02	; 2
    34c8:	50 e0       	ldi	r21, 0x00	; 0
    34ca:	a4 0e       	add	r10, r20
    34cc:	b5 1e       	adc	r11, r21
    34ce:	c6 01       	movw	r24, r12
    34d0:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <strnlen_P>
    34d4:	8c 01       	movw	r16, r24
    34d6:	50 e8       	ldi	r21, 0x80	; 128
    34d8:	f5 2a       	or	r15, r21
    34da:	f3 fe       	sbrs	r15, 3
    34dc:	07 c0       	rjmp	.+14     	; 0x34ec <vfprintf+0x1a0>
    34de:	1a c0       	rjmp	.+52     	; 0x3514 <vfprintf+0x1c8>
    34e0:	80 e2       	ldi	r24, 0x20	; 32
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	b3 01       	movw	r22, r6
    34e6:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <fputc>
    34ea:	ea 94       	dec	r14
    34ec:	8e 2d       	mov	r24, r14
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	08 17       	cp	r16, r24
    34f2:	19 07       	cpc	r17, r25
    34f4:	a8 f3       	brcs	.-22     	; 0x34e0 <vfprintf+0x194>
    34f6:	0e c0       	rjmp	.+28     	; 0x3514 <vfprintf+0x1c8>
    34f8:	f6 01       	movw	r30, r12
    34fa:	f7 fc       	sbrc	r15, 7
    34fc:	85 91       	lpm	r24, Z+
    34fe:	f7 fe       	sbrs	r15, 7
    3500:	81 91       	ld	r24, Z+
    3502:	6f 01       	movw	r12, r30
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	b3 01       	movw	r22, r6
    3508:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <fputc>
    350c:	e1 10       	cpse	r14, r1
    350e:	ea 94       	dec	r14
    3510:	01 50       	subi	r16, 0x01	; 1
    3512:	10 40       	sbci	r17, 0x00	; 0
    3514:	01 15       	cp	r16, r1
    3516:	11 05       	cpc	r17, r1
    3518:	79 f7       	brne	.-34     	; 0x34f8 <vfprintf+0x1ac>
    351a:	ea c0       	rjmp	.+468    	; 0x36f0 <vfprintf+0x3a4>
    351c:	94 36       	cpi	r25, 0x64	; 100
    351e:	11 f0       	breq	.+4      	; 0x3524 <vfprintf+0x1d8>
    3520:	99 36       	cpi	r25, 0x69	; 105
    3522:	69 f5       	brne	.+90     	; 0x357e <vfprintf+0x232>
    3524:	f7 fe       	sbrs	r15, 7
    3526:	08 c0       	rjmp	.+16     	; 0x3538 <vfprintf+0x1ec>
    3528:	f5 01       	movw	r30, r10
    352a:	20 81       	ld	r18, Z
    352c:	31 81       	ldd	r19, Z+1	; 0x01
    352e:	42 81       	ldd	r20, Z+2	; 0x02
    3530:	53 81       	ldd	r21, Z+3	; 0x03
    3532:	84 e0       	ldi	r24, 0x04	; 4
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	0a c0       	rjmp	.+20     	; 0x354c <vfprintf+0x200>
    3538:	f5 01       	movw	r30, r10
    353a:	80 81       	ld	r24, Z
    353c:	91 81       	ldd	r25, Z+1	; 0x01
    353e:	9c 01       	movw	r18, r24
    3540:	44 27       	eor	r20, r20
    3542:	37 fd       	sbrc	r19, 7
    3544:	40 95       	com	r20
    3546:	54 2f       	mov	r21, r20
    3548:	82 e0       	ldi	r24, 0x02	; 2
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	a8 0e       	add	r10, r24
    354e:	b9 1e       	adc	r11, r25
    3550:	9f e6       	ldi	r25, 0x6F	; 111
    3552:	f9 22       	and	r15, r25
    3554:	57 ff       	sbrs	r21, 7
    3556:	09 c0       	rjmp	.+18     	; 0x356a <vfprintf+0x21e>
    3558:	50 95       	com	r21
    355a:	40 95       	com	r20
    355c:	30 95       	com	r19
    355e:	21 95       	neg	r18
    3560:	3f 4f       	sbci	r19, 0xFF	; 255
    3562:	4f 4f       	sbci	r20, 0xFF	; 255
    3564:	5f 4f       	sbci	r21, 0xFF	; 255
    3566:	e0 e8       	ldi	r30, 0x80	; 128
    3568:	fe 2a       	or	r15, r30
    356a:	ca 01       	movw	r24, r20
    356c:	b9 01       	movw	r22, r18
    356e:	a1 01       	movw	r20, r2
    3570:	2a e0       	ldi	r18, 0x0A	; 10
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <__ultoa_invert>
    3578:	d8 2e       	mov	r13, r24
    357a:	d2 18       	sub	r13, r2
    357c:	40 c0       	rjmp	.+128    	; 0x35fe <vfprintf+0x2b2>
    357e:	95 37       	cpi	r25, 0x75	; 117
    3580:	29 f4       	brne	.+10     	; 0x358c <vfprintf+0x240>
    3582:	1f 2d       	mov	r17, r15
    3584:	1f 7e       	andi	r17, 0xEF	; 239
    3586:	2a e0       	ldi	r18, 0x0A	; 10
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	1d c0       	rjmp	.+58     	; 0x35c6 <vfprintf+0x27a>
    358c:	1f 2d       	mov	r17, r15
    358e:	19 7f       	andi	r17, 0xF9	; 249
    3590:	9f 36       	cpi	r25, 0x6F	; 111
    3592:	61 f0       	breq	.+24     	; 0x35ac <vfprintf+0x260>
    3594:	90 37       	cpi	r25, 0x70	; 112
    3596:	20 f4       	brcc	.+8      	; 0x35a0 <vfprintf+0x254>
    3598:	98 35       	cpi	r25, 0x58	; 88
    359a:	09 f0       	breq	.+2      	; 0x359e <vfprintf+0x252>
    359c:	ac c0       	rjmp	.+344    	; 0x36f6 <vfprintf+0x3aa>
    359e:	0f c0       	rjmp	.+30     	; 0x35be <vfprintf+0x272>
    35a0:	90 37       	cpi	r25, 0x70	; 112
    35a2:	39 f0       	breq	.+14     	; 0x35b2 <vfprintf+0x266>
    35a4:	98 37       	cpi	r25, 0x78	; 120
    35a6:	09 f0       	breq	.+2      	; 0x35aa <vfprintf+0x25e>
    35a8:	a6 c0       	rjmp	.+332    	; 0x36f6 <vfprintf+0x3aa>
    35aa:	04 c0       	rjmp	.+8      	; 0x35b4 <vfprintf+0x268>
    35ac:	28 e0       	ldi	r18, 0x08	; 8
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	0a c0       	rjmp	.+20     	; 0x35c6 <vfprintf+0x27a>
    35b2:	10 61       	ori	r17, 0x10	; 16
    35b4:	14 fd       	sbrc	r17, 4
    35b6:	14 60       	ori	r17, 0x04	; 4
    35b8:	20 e1       	ldi	r18, 0x10	; 16
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	04 c0       	rjmp	.+8      	; 0x35c6 <vfprintf+0x27a>
    35be:	14 fd       	sbrc	r17, 4
    35c0:	16 60       	ori	r17, 0x06	; 6
    35c2:	20 e1       	ldi	r18, 0x10	; 16
    35c4:	32 e0       	ldi	r19, 0x02	; 2
    35c6:	17 ff       	sbrs	r17, 7
    35c8:	08 c0       	rjmp	.+16     	; 0x35da <vfprintf+0x28e>
    35ca:	f5 01       	movw	r30, r10
    35cc:	60 81       	ld	r22, Z
    35ce:	71 81       	ldd	r23, Z+1	; 0x01
    35d0:	82 81       	ldd	r24, Z+2	; 0x02
    35d2:	93 81       	ldd	r25, Z+3	; 0x03
    35d4:	44 e0       	ldi	r20, 0x04	; 4
    35d6:	50 e0       	ldi	r21, 0x00	; 0
    35d8:	08 c0       	rjmp	.+16     	; 0x35ea <vfprintf+0x29e>
    35da:	f5 01       	movw	r30, r10
    35dc:	80 81       	ld	r24, Z
    35de:	91 81       	ldd	r25, Z+1	; 0x01
    35e0:	bc 01       	movw	r22, r24
    35e2:	80 e0       	ldi	r24, 0x00	; 0
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	42 e0       	ldi	r20, 0x02	; 2
    35e8:	50 e0       	ldi	r21, 0x00	; 0
    35ea:	a4 0e       	add	r10, r20
    35ec:	b5 1e       	adc	r11, r21
    35ee:	a1 01       	movw	r20, r2
    35f0:	0e 94 d4 1e 	call	0x3da8	; 0x3da8 <__ultoa_invert>
    35f4:	d8 2e       	mov	r13, r24
    35f6:	d2 18       	sub	r13, r2
    35f8:	8f e7       	ldi	r24, 0x7F	; 127
    35fa:	f8 2e       	mov	r15, r24
    35fc:	f1 22       	and	r15, r17
    35fe:	f6 fe       	sbrs	r15, 6
    3600:	0b c0       	rjmp	.+22     	; 0x3618 <vfprintf+0x2cc>
    3602:	5e ef       	ldi	r21, 0xFE	; 254
    3604:	f5 22       	and	r15, r21
    3606:	d9 14       	cp	r13, r9
    3608:	38 f4       	brcc	.+14     	; 0x3618 <vfprintf+0x2cc>
    360a:	f4 fe       	sbrs	r15, 4
    360c:	07 c0       	rjmp	.+14     	; 0x361c <vfprintf+0x2d0>
    360e:	f2 fc       	sbrc	r15, 2
    3610:	05 c0       	rjmp	.+10     	; 0x361c <vfprintf+0x2d0>
    3612:	8f ee       	ldi	r24, 0xEF	; 239
    3614:	f8 22       	and	r15, r24
    3616:	02 c0       	rjmp	.+4      	; 0x361c <vfprintf+0x2d0>
    3618:	1d 2d       	mov	r17, r13
    361a:	01 c0       	rjmp	.+2      	; 0x361e <vfprintf+0x2d2>
    361c:	19 2d       	mov	r17, r9
    361e:	f4 fe       	sbrs	r15, 4
    3620:	0d c0       	rjmp	.+26     	; 0x363c <vfprintf+0x2f0>
    3622:	fe 01       	movw	r30, r28
    3624:	ed 0d       	add	r30, r13
    3626:	f1 1d       	adc	r31, r1
    3628:	80 81       	ld	r24, Z
    362a:	80 33       	cpi	r24, 0x30	; 48
    362c:	19 f4       	brne	.+6      	; 0x3634 <vfprintf+0x2e8>
    362e:	99 ee       	ldi	r25, 0xE9	; 233
    3630:	f9 22       	and	r15, r25
    3632:	08 c0       	rjmp	.+16     	; 0x3644 <vfprintf+0x2f8>
    3634:	1f 5f       	subi	r17, 0xFF	; 255
    3636:	f2 fe       	sbrs	r15, 2
    3638:	05 c0       	rjmp	.+10     	; 0x3644 <vfprintf+0x2f8>
    363a:	03 c0       	rjmp	.+6      	; 0x3642 <vfprintf+0x2f6>
    363c:	8f 2d       	mov	r24, r15
    363e:	86 78       	andi	r24, 0x86	; 134
    3640:	09 f0       	breq	.+2      	; 0x3644 <vfprintf+0x2f8>
    3642:	1f 5f       	subi	r17, 0xFF	; 255
    3644:	0f 2d       	mov	r16, r15
    3646:	f3 fc       	sbrc	r15, 3
    3648:	14 c0       	rjmp	.+40     	; 0x3672 <vfprintf+0x326>
    364a:	f0 fe       	sbrs	r15, 0
    364c:	0f c0       	rjmp	.+30     	; 0x366c <vfprintf+0x320>
    364e:	1e 15       	cp	r17, r14
    3650:	10 f0       	brcs	.+4      	; 0x3656 <vfprintf+0x30a>
    3652:	9d 2c       	mov	r9, r13
    3654:	0b c0       	rjmp	.+22     	; 0x366c <vfprintf+0x320>
    3656:	9d 2c       	mov	r9, r13
    3658:	9e 0c       	add	r9, r14
    365a:	91 1a       	sub	r9, r17
    365c:	1e 2d       	mov	r17, r14
    365e:	06 c0       	rjmp	.+12     	; 0x366c <vfprintf+0x320>
    3660:	80 e2       	ldi	r24, 0x20	; 32
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	b3 01       	movw	r22, r6
    3666:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <fputc>
    366a:	1f 5f       	subi	r17, 0xFF	; 255
    366c:	1e 15       	cp	r17, r14
    366e:	c0 f3       	brcs	.-16     	; 0x3660 <vfprintf+0x314>
    3670:	04 c0       	rjmp	.+8      	; 0x367a <vfprintf+0x32e>
    3672:	1e 15       	cp	r17, r14
    3674:	10 f4       	brcc	.+4      	; 0x367a <vfprintf+0x32e>
    3676:	e1 1a       	sub	r14, r17
    3678:	01 c0       	rjmp	.+2      	; 0x367c <vfprintf+0x330>
    367a:	ee 24       	eor	r14, r14
    367c:	04 ff       	sbrs	r16, 4
    367e:	0f c0       	rjmp	.+30     	; 0x369e <vfprintf+0x352>
    3680:	80 e3       	ldi	r24, 0x30	; 48
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	b3 01       	movw	r22, r6
    3686:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <fputc>
    368a:	02 ff       	sbrs	r16, 2
    368c:	1d c0       	rjmp	.+58     	; 0x36c8 <vfprintf+0x37c>
    368e:	01 fd       	sbrc	r16, 1
    3690:	03 c0       	rjmp	.+6      	; 0x3698 <vfprintf+0x34c>
    3692:	88 e7       	ldi	r24, 0x78	; 120
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	0e c0       	rjmp	.+28     	; 0x36b4 <vfprintf+0x368>
    3698:	88 e5       	ldi	r24, 0x58	; 88
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	0b c0       	rjmp	.+22     	; 0x36b4 <vfprintf+0x368>
    369e:	80 2f       	mov	r24, r16
    36a0:	86 78       	andi	r24, 0x86	; 134
    36a2:	91 f0       	breq	.+36     	; 0x36c8 <vfprintf+0x37c>
    36a4:	01 ff       	sbrs	r16, 1
    36a6:	02 c0       	rjmp	.+4      	; 0x36ac <vfprintf+0x360>
    36a8:	8b e2       	ldi	r24, 0x2B	; 43
    36aa:	01 c0       	rjmp	.+2      	; 0x36ae <vfprintf+0x362>
    36ac:	80 e2       	ldi	r24, 0x20	; 32
    36ae:	f7 fc       	sbrc	r15, 7
    36b0:	8d e2       	ldi	r24, 0x2D	; 45
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	b3 01       	movw	r22, r6
    36b6:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <fputc>
    36ba:	06 c0       	rjmp	.+12     	; 0x36c8 <vfprintf+0x37c>
    36bc:	80 e3       	ldi	r24, 0x30	; 48
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	b3 01       	movw	r22, r6
    36c2:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <fputc>
    36c6:	9a 94       	dec	r9
    36c8:	d9 14       	cp	r13, r9
    36ca:	c0 f3       	brcs	.-16     	; 0x36bc <vfprintf+0x370>
    36cc:	da 94       	dec	r13
    36ce:	f1 01       	movw	r30, r2
    36d0:	ed 0d       	add	r30, r13
    36d2:	f1 1d       	adc	r31, r1
    36d4:	80 81       	ld	r24, Z
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	b3 01       	movw	r22, r6
    36da:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <fputc>
    36de:	dd 20       	and	r13, r13
    36e0:	a9 f7       	brne	.-22     	; 0x36cc <vfprintf+0x380>
    36e2:	06 c0       	rjmp	.+12     	; 0x36f0 <vfprintf+0x3a4>
    36e4:	80 e2       	ldi	r24, 0x20	; 32
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	b3 01       	movw	r22, r6
    36ea:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <fputc>
    36ee:	ea 94       	dec	r14
    36f0:	ee 20       	and	r14, r14
    36f2:	c1 f7       	brne	.-16     	; 0x36e4 <vfprintf+0x398>
    36f4:	43 ce       	rjmp	.-890    	; 0x337c <vfprintf+0x30>
    36f6:	f3 01       	movw	r30, r6
    36f8:	66 81       	ldd	r22, Z+6	; 0x06
    36fa:	77 81       	ldd	r23, Z+7	; 0x07
    36fc:	cb 01       	movw	r24, r22
    36fe:	2b 96       	adiw	r28, 0x0b	; 11
    3700:	e2 e1       	ldi	r30, 0x12	; 18
    3702:	0c 94 c5 18 	jmp	0x318a	; 0x318a <__epilogue_restores__>

00003706 <putval>:
    3706:	fc 01       	movw	r30, r24
    3708:	20 fd       	sbrc	r18, 0
    370a:	08 c0       	rjmp	.+16     	; 0x371c <putval+0x16>
    370c:	23 fd       	sbrc	r18, 3
    370e:	05 c0       	rjmp	.+10     	; 0x371a <putval+0x14>
    3710:	22 ff       	sbrs	r18, 2
    3712:	02 c0       	rjmp	.+4      	; 0x3718 <putval+0x12>
    3714:	73 83       	std	Z+3, r23	; 0x03
    3716:	62 83       	std	Z+2, r22	; 0x02
    3718:	51 83       	std	Z+1, r21	; 0x01
    371a:	40 83       	st	Z, r20
    371c:	08 95       	ret

0000371e <mulacc>:
    371e:	ef 92       	push	r14
    3720:	ff 92       	push	r15
    3722:	0f 93       	push	r16
    3724:	1f 93       	push	r17
    3726:	44 ff       	sbrs	r20, 4
    3728:	02 c0       	rjmp	.+4      	; 0x372e <mulacc+0x10>
    372a:	33 e0       	ldi	r19, 0x03	; 3
    372c:	11 c0       	rjmp	.+34     	; 0x3750 <mulacc+0x32>
    372e:	46 ff       	sbrs	r20, 6
    3730:	02 c0       	rjmp	.+4      	; 0x3736 <mulacc+0x18>
    3732:	34 e0       	ldi	r19, 0x04	; 4
    3734:	0d c0       	rjmp	.+26     	; 0x3750 <mulacc+0x32>
    3736:	db 01       	movw	r26, r22
    3738:	fc 01       	movw	r30, r24
    373a:	aa 0f       	add	r26, r26
    373c:	bb 1f       	adc	r27, r27
    373e:	ee 1f       	adc	r30, r30
    3740:	ff 1f       	adc	r31, r31
    3742:	10 94       	com	r1
    3744:	d1 f7       	brne	.-12     	; 0x373a <mulacc+0x1c>
    3746:	6a 0f       	add	r22, r26
    3748:	7b 1f       	adc	r23, r27
    374a:	8e 1f       	adc	r24, r30
    374c:	9f 1f       	adc	r25, r31
    374e:	31 e0       	ldi	r19, 0x01	; 1
    3750:	66 0f       	add	r22, r22
    3752:	77 1f       	adc	r23, r23
    3754:	88 1f       	adc	r24, r24
    3756:	99 1f       	adc	r25, r25
    3758:	31 50       	subi	r19, 0x01	; 1
    375a:	d1 f7       	brne	.-12     	; 0x3750 <mulacc+0x32>
    375c:	7b 01       	movw	r14, r22
    375e:	8c 01       	movw	r16, r24
    3760:	e2 0e       	add	r14, r18
    3762:	f1 1c       	adc	r15, r1
    3764:	01 1d       	adc	r16, r1
    3766:	11 1d       	adc	r17, r1
    3768:	a8 01       	movw	r20, r16
    376a:	97 01       	movw	r18, r14
    376c:	b7 01       	movw	r22, r14
    376e:	ca 01       	movw	r24, r20
    3770:	1f 91       	pop	r17
    3772:	0f 91       	pop	r16
    3774:	ff 90       	pop	r15
    3776:	ef 90       	pop	r14
    3778:	08 95       	ret

0000377a <skip_spaces>:
    377a:	0f 93       	push	r16
    377c:	1f 93       	push	r17
    377e:	cf 93       	push	r28
    3780:	df 93       	push	r29
    3782:	8c 01       	movw	r16, r24
    3784:	c8 01       	movw	r24, r16
    3786:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <fgetc>
    378a:	ec 01       	movw	r28, r24
    378c:	97 fd       	sbrc	r25, 7
    378e:	08 c0       	rjmp	.+16     	; 0x37a0 <skip_spaces+0x26>
    3790:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <isspace>
    3794:	89 2b       	or	r24, r25
    3796:	b1 f7       	brne	.-20     	; 0x3784 <skip_spaces+0xa>
    3798:	ce 01       	movw	r24, r28
    379a:	b8 01       	movw	r22, r16
    379c:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <ungetc>
    37a0:	ce 01       	movw	r24, r28
    37a2:	df 91       	pop	r29
    37a4:	cf 91       	pop	r28
    37a6:	1f 91       	pop	r17
    37a8:	0f 91       	pop	r16
    37aa:	08 95       	ret

000037ac <conv_int>:
    37ac:	a0 e0       	ldi	r26, 0x00	; 0
    37ae:	b0 e0       	ldi	r27, 0x00	; 0
    37b0:	ec ed       	ldi	r30, 0xDC	; 220
    37b2:	fb e1       	ldi	r31, 0x1B	; 27
    37b4:	0c 94 b1 18 	jmp	0x3162	; 0x3162 <__prologue_saves__+0x10>
    37b8:	ec 01       	movw	r28, r24
    37ba:	c6 2e       	mov	r12, r22
    37bc:	5a 01       	movw	r10, r20
    37be:	12 2f       	mov	r17, r18
    37c0:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <fgetc>
    37c4:	ac 01       	movw	r20, r24
    37c6:	8b 32       	cpi	r24, 0x2B	; 43
    37c8:	19 f0       	breq	.+6      	; 0x37d0 <conv_int+0x24>
    37ca:	8d 32       	cpi	r24, 0x2D	; 45
    37cc:	51 f4       	brne	.+20     	; 0x37e2 <conv_int+0x36>
    37ce:	10 68       	ori	r17, 0x80	; 128
    37d0:	ca 94       	dec	r12
    37d2:	09 f4       	brne	.+2      	; 0x37d6 <conv_int+0x2a>
    37d4:	6d c0       	rjmp	.+218    	; 0x38b0 <conv_int+0x104>
    37d6:	ce 01       	movw	r24, r28
    37d8:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <fgetc>
    37dc:	ac 01       	movw	r20, r24
    37de:	97 fd       	sbrc	r25, 7
    37e0:	67 c0       	rjmp	.+206    	; 0x38b0 <conv_int+0x104>
    37e2:	6d ef       	ldi	r22, 0xFD	; 253
    37e4:	d6 2e       	mov	r13, r22
    37e6:	d1 22       	and	r13, r17
    37e8:	8d 2d       	mov	r24, r13
    37ea:	80 73       	andi	r24, 0x30	; 48
    37ec:	01 f5       	brne	.+64     	; 0x382e <conv_int+0x82>
    37ee:	40 33       	cpi	r20, 0x30	; 48
    37f0:	f1 f4       	brne	.+60     	; 0x382e <conv_int+0x82>
    37f2:	ca 94       	dec	r12
    37f4:	09 f4       	brne	.+2      	; 0x37f8 <conv_int+0x4c>
    37f6:	47 c0       	rjmp	.+142    	; 0x3886 <conv_int+0xda>
    37f8:	ce 01       	movw	r24, r28
    37fa:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <fgetc>
    37fe:	ac 01       	movw	r20, r24
    3800:	97 fd       	sbrc	r25, 7
    3802:	41 c0       	rjmp	.+130    	; 0x3886 <conv_int+0xda>
    3804:	82 e0       	ldi	r24, 0x02	; 2
    3806:	d8 2a       	or	r13, r24
    3808:	48 37       	cpi	r20, 0x78	; 120
    380a:	11 f0       	breq	.+4      	; 0x3810 <conv_int+0x64>
    380c:	48 35       	cpi	r20, 0x58	; 88
    380e:	59 f4       	brne	.+22     	; 0x3826 <conv_int+0x7a>
    3810:	80 e4       	ldi	r24, 0x40	; 64
    3812:	d8 2a       	or	r13, r24
    3814:	ca 94       	dec	r12
    3816:	b9 f1       	breq	.+110    	; 0x3886 <conv_int+0xda>
    3818:	ce 01       	movw	r24, r28
    381a:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <fgetc>
    381e:	ac 01       	movw	r20, r24
    3820:	99 23       	and	r25, r25
    3822:	2c f4       	brge	.+10     	; 0x382e <conv_int+0x82>
    3824:	30 c0       	rjmp	.+96     	; 0x3886 <conv_int+0xda>
    3826:	d6 fc       	sbrc	r13, 6
    3828:	02 c0       	rjmp	.+4      	; 0x382e <conv_int+0x82>
    382a:	80 e1       	ldi	r24, 0x10	; 16
    382c:	d8 2a       	or	r13, r24
    382e:	ee 24       	eor	r14, r14
    3830:	ff 24       	eor	r15, r15
    3832:	87 01       	movw	r16, r14
    3834:	24 2f       	mov	r18, r20
    3836:	20 53       	subi	r18, 0x30	; 48
    3838:	28 30       	cpi	r18, 0x08	; 8
    383a:	88 f0       	brcs	.+34     	; 0x385e <conv_int+0xb2>
    383c:	d4 fc       	sbrc	r13, 4
    383e:	09 c0       	rjmp	.+18     	; 0x3852 <conv_int+0xa6>
    3840:	2a 30       	cpi	r18, 0x0A	; 10
    3842:	68 f0       	brcs	.+26     	; 0x385e <conv_int+0xb2>
    3844:	d6 fe       	sbrs	r13, 6
    3846:	05 c0       	rjmp	.+10     	; 0x3852 <conv_int+0xa6>
    3848:	2f 7d       	andi	r18, 0xDF	; 223
    384a:	82 2f       	mov	r24, r18
    384c:	81 51       	subi	r24, 0x11	; 17
    384e:	86 30       	cpi	r24, 0x06	; 6
    3850:	28 f0       	brcs	.+10     	; 0x385c <conv_int+0xb0>
    3852:	ca 01       	movw	r24, r20
    3854:	be 01       	movw	r22, r28
    3856:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <ungetc>
    385a:	12 c0       	rjmp	.+36     	; 0x3880 <conv_int+0xd4>
    385c:	27 50       	subi	r18, 0x07	; 7
    385e:	c8 01       	movw	r24, r16
    3860:	b7 01       	movw	r22, r14
    3862:	4d 2d       	mov	r20, r13
    3864:	0e 94 8f 1b 	call	0x371e	; 0x371e <mulacc>
    3868:	7b 01       	movw	r14, r22
    386a:	8c 01       	movw	r16, r24
    386c:	82 e0       	ldi	r24, 0x02	; 2
    386e:	d8 2a       	or	r13, r24
    3870:	ca 94       	dec	r12
    3872:	61 f0       	breq	.+24     	; 0x388c <conv_int+0xe0>
    3874:	ce 01       	movw	r24, r28
    3876:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <fgetc>
    387a:	ac 01       	movw	r20, r24
    387c:	97 ff       	sbrs	r25, 7
    387e:	da cf       	rjmp	.-76     	; 0x3834 <conv_int+0x88>
    3880:	d1 fc       	sbrc	r13, 1
    3882:	04 c0       	rjmp	.+8      	; 0x388c <conv_int+0xe0>
    3884:	15 c0       	rjmp	.+42     	; 0x38b0 <conv_int+0x104>
    3886:	ee 24       	eor	r14, r14
    3888:	ff 24       	eor	r15, r15
    388a:	87 01       	movw	r16, r14
    388c:	d7 fe       	sbrs	r13, 7
    388e:	08 c0       	rjmp	.+16     	; 0x38a0 <conv_int+0xf4>
    3890:	10 95       	com	r17
    3892:	00 95       	com	r16
    3894:	f0 94       	com	r15
    3896:	e0 94       	com	r14
    3898:	e1 1c       	adc	r14, r1
    389a:	f1 1c       	adc	r15, r1
    389c:	01 1d       	adc	r16, r1
    389e:	11 1d       	adc	r17, r1
    38a0:	c5 01       	movw	r24, r10
    38a2:	b8 01       	movw	r22, r16
    38a4:	a7 01       	movw	r20, r14
    38a6:	2d 2d       	mov	r18, r13
    38a8:	0e 94 83 1b 	call	0x3706	; 0x3706 <putval>
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	01 c0       	rjmp	.+2      	; 0x38b2 <conv_int+0x106>
    38b0:	80 e0       	ldi	r24, 0x00	; 0
    38b2:	cd b7       	in	r28, 0x3d	; 61
    38b4:	de b7       	in	r29, 0x3e	; 62
    38b6:	ea e0       	ldi	r30, 0x0A	; 10
    38b8:	0c 94 cd 18 	jmp	0x319a	; 0x319a <__epilogue_restores__+0x10>

000038bc <conv_brk>:
    38bc:	a0 e2       	ldi	r26, 0x20	; 32
    38be:	b0 e0       	ldi	r27, 0x00	; 0
    38c0:	e4 e6       	ldi	r30, 0x64	; 100
    38c2:	fc e1       	ldi	r31, 0x1C	; 28
    38c4:	0c 94 ad 18 	jmp	0x315a	; 0x315a <__prologue_saves__+0x8>
    38c8:	6c 01       	movw	r12, r24
    38ca:	a6 2e       	mov	r10, r22
    38cc:	8a 01       	movw	r16, r20
    38ce:	79 01       	movw	r14, r18
    38d0:	fe 01       	movw	r30, r28
    38d2:	31 96       	adiw	r30, 0x01	; 1
    38d4:	80 e2       	ldi	r24, 0x20	; 32
    38d6:	df 01       	movw	r26, r30
    38d8:	1d 92       	st	X+, r1
    38da:	8a 95       	dec	r24
    38dc:	e9 f7       	brne	.-6      	; 0x38d8 <conv_brk+0x1c>
    38de:	70 e0       	ldi	r23, 0x00	; 0
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	60 e0       	ldi	r22, 0x00	; 0
    38e4:	40 e0       	ldi	r20, 0x00	; 0
    38e6:	50 e0       	ldi	r21, 0x00	; 0
    38e8:	4f 01       	movw	r8, r30
    38ea:	a1 e0       	ldi	r26, 0x01	; 1
    38ec:	b0 e0       	ldi	r27, 0x00	; 0
    38ee:	f6 01       	movw	r30, r12
    38f0:	83 81       	ldd	r24, Z+3	; 0x03
    38f2:	f7 01       	movw	r30, r14
    38f4:	83 fd       	sbrc	r24, 3
    38f6:	25 91       	lpm	r18, Z+
    38f8:	83 ff       	sbrs	r24, 3
    38fa:	21 91       	ld	r18, Z+
    38fc:	7f 01       	movw	r14, r30
    38fe:	22 23       	and	r18, r18
    3900:	09 f4       	brne	.+2      	; 0x3904 <conv_brk+0x48>
    3902:	7e c0       	rjmp	.+252    	; 0x3a00 <conv_brk+0x144>
    3904:	2e 35       	cpi	r18, 0x5E	; 94
    3906:	19 f4       	brne	.+6      	; 0x390e <conv_brk+0x52>
    3908:	41 15       	cp	r20, r1
    390a:	51 05       	cpc	r21, r1
    390c:	69 f1       	breq	.+90     	; 0x3968 <conv_brk+0xac>
    390e:	87 2f       	mov	r24, r23
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	84 17       	cp	r24, r20
    3914:	95 07       	cpc	r25, r21
    3916:	44 f4       	brge	.+16     	; 0x3928 <conv_brk+0x6c>
    3918:	2d 35       	cpi	r18, 0x5D	; 93
    391a:	51 f1       	breq	.+84     	; 0x3970 <conv_brk+0xb4>
    391c:	2d 32       	cpi	r18, 0x2D	; 45
    391e:	21 f4       	brne	.+8      	; 0x3928 <conv_brk+0x6c>
    3920:	33 23       	and	r19, r19
    3922:	29 f4       	brne	.+10     	; 0x392e <conv_brk+0x72>
    3924:	31 e0       	ldi	r19, 0x01	; 1
    3926:	21 c0       	rjmp	.+66     	; 0x396a <conv_brk+0xae>
    3928:	33 23       	and	r19, r19
    392a:	09 f4       	brne	.+2      	; 0x392e <conv_brk+0x72>
    392c:	62 2f       	mov	r22, r18
    392e:	32 2f       	mov	r19, r18
    3930:	83 2f       	mov	r24, r19
    3932:	86 95       	lsr	r24
    3934:	86 95       	lsr	r24
    3936:	86 95       	lsr	r24
    3938:	f4 01       	movw	r30, r8
    393a:	e8 0f       	add	r30, r24
    393c:	f1 1d       	adc	r31, r1
    393e:	83 2f       	mov	r24, r19
    3940:	87 70       	andi	r24, 0x07	; 7
    3942:	3d 01       	movw	r6, r26
    3944:	02 c0       	rjmp	.+4      	; 0x394a <conv_brk+0x8e>
    3946:	66 0c       	add	r6, r6
    3948:	77 1c       	adc	r7, r7
    394a:	8a 95       	dec	r24
    394c:	e2 f7       	brpl	.-8      	; 0x3946 <conv_brk+0x8a>
    394e:	20 81       	ld	r18, Z
    3950:	26 29       	or	r18, r6
    3952:	20 83       	st	Z, r18
    3954:	36 17       	cp	r19, r22
    3956:	11 f4       	brne	.+4      	; 0x395c <conv_brk+0xa0>
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	07 c0       	rjmp	.+14     	; 0x396a <conv_brk+0xae>
    395c:	36 17       	cp	r19, r22
    395e:	10 f4       	brcc	.+4      	; 0x3964 <conv_brk+0xa8>
    3960:	3f 5f       	subi	r19, 0xFF	; 255
    3962:	e6 cf       	rjmp	.-52     	; 0x3930 <conv_brk+0x74>
    3964:	31 50       	subi	r19, 0x01	; 1
    3966:	e4 cf       	rjmp	.-56     	; 0x3930 <conv_brk+0x74>
    3968:	71 e0       	ldi	r23, 0x01	; 1
    396a:	4f 5f       	subi	r20, 0xFF	; 255
    396c:	5f 4f       	sbci	r21, 0xFF	; 255
    396e:	bf cf       	rjmp	.-130    	; 0x38ee <conv_brk+0x32>
    3970:	33 23       	and	r19, r19
    3972:	19 f0       	breq	.+6      	; 0x397a <conv_brk+0xbe>
    3974:	8e 81       	ldd	r24, Y+6	; 0x06
    3976:	80 62       	ori	r24, 0x20	; 32
    3978:	8e 83       	std	Y+6, r24	; 0x06
    397a:	77 23       	and	r23, r23
    397c:	59 f0       	breq	.+22     	; 0x3994 <conv_brk+0xd8>
    397e:	fe 01       	movw	r30, r28
    3980:	31 96       	adiw	r30, 0x01	; 1
    3982:	9e 01       	movw	r18, r28
    3984:	2f 5d       	subi	r18, 0xDF	; 223
    3986:	3f 4f       	sbci	r19, 0xFF	; 255
    3988:	80 81       	ld	r24, Z
    398a:	80 95       	com	r24
    398c:	81 93       	st	Z+, r24
    398e:	e2 17       	cp	r30, r18
    3990:	f3 07       	cpc	r31, r19
    3992:	d1 f7       	brne	.-12     	; 0x3988 <conv_brk+0xcc>
    3994:	bb 24       	eor	r11, r11
    3996:	b3 94       	inc	r11
    3998:	4e 01       	movw	r8, r28
    399a:	08 94       	sec
    399c:	81 1c       	adc	r8, r1
    399e:	91 1c       	adc	r9, r1
    39a0:	c6 01       	movw	r24, r12
    39a2:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <fgetc>
    39a6:	ac 01       	movw	r20, r24
    39a8:	97 fd       	sbrc	r25, 7
    39aa:	22 c0       	rjmp	.+68     	; 0x39f0 <conv_brk+0x134>
    39ac:	86 95       	lsr	r24
    39ae:	86 95       	lsr	r24
    39b0:	86 95       	lsr	r24
    39b2:	f4 01       	movw	r30, r8
    39b4:	e8 0f       	add	r30, r24
    39b6:	f1 1d       	adc	r31, r1
    39b8:	80 81       	ld	r24, Z
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	9a 01       	movw	r18, r20
    39be:	27 70       	andi	r18, 0x07	; 7
    39c0:	30 70       	andi	r19, 0x00	; 0
    39c2:	02 c0       	rjmp	.+4      	; 0x39c8 <conv_brk+0x10c>
    39c4:	95 95       	asr	r25
    39c6:	87 95       	ror	r24
    39c8:	2a 95       	dec	r18
    39ca:	e2 f7       	brpl	.-8      	; 0x39c4 <conv_brk+0x108>
    39cc:	80 fd       	sbrc	r24, 0
    39ce:	05 c0       	rjmp	.+10     	; 0x39da <conv_brk+0x11e>
    39d0:	ca 01       	movw	r24, r20
    39d2:	b6 01       	movw	r22, r12
    39d4:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <ungetc>
    39d8:	0b c0       	rjmp	.+22     	; 0x39f0 <conv_brk+0x134>
    39da:	01 15       	cp	r16, r1
    39dc:	11 05       	cpc	r17, r1
    39de:	19 f0       	breq	.+6      	; 0x39e6 <conv_brk+0x12a>
    39e0:	d8 01       	movw	r26, r16
    39e2:	4d 93       	st	X+, r20
    39e4:	8d 01       	movw	r16, r26
    39e6:	aa 94       	dec	r10
    39e8:	bb 24       	eor	r11, r11
    39ea:	aa 20       	and	r10, r10
    39ec:	c9 f6       	brne	.-78     	; 0x39a0 <conv_brk+0xe4>
    39ee:	02 c0       	rjmp	.+4      	; 0x39f4 <conv_brk+0x138>
    39f0:	bb 20       	and	r11, r11
    39f2:	31 f4       	brne	.+12     	; 0x3a00 <conv_brk+0x144>
    39f4:	01 15       	cp	r16, r1
    39f6:	11 05       	cpc	r17, r1
    39f8:	29 f0       	breq	.+10     	; 0x3a04 <conv_brk+0x148>
    39fa:	f8 01       	movw	r30, r16
    39fc:	10 82       	st	Z, r1
    39fe:	02 c0       	rjmp	.+4      	; 0x3a04 <conv_brk+0x148>
    3a00:	ee 24       	eor	r14, r14
    3a02:	ff 24       	eor	r15, r15
    3a04:	c7 01       	movw	r24, r14
    3a06:	a0 96       	adiw	r28, 0x20	; 32
    3a08:	ee e0       	ldi	r30, 0x0E	; 14
    3a0a:	0c 94 c9 18 	jmp	0x3192	; 0x3192 <__epilogue_restores__+0x8>

00003a0e <vfscanf>:
    3a0e:	a0 e0       	ldi	r26, 0x00	; 0
    3a10:	b0 e0       	ldi	r27, 0x00	; 0
    3a12:	ed e0       	ldi	r30, 0x0D	; 13
    3a14:	fd e1       	ldi	r31, 0x1D	; 29
    3a16:	0c 94 ad 18 	jmp	0x315a	; 0x315a <__prologue_saves__+0x8>
    3a1a:	5c 01       	movw	r10, r24
    3a1c:	6b 01       	movw	r12, r22
    3a1e:	3a 01       	movw	r6, r20
    3a20:	fc 01       	movw	r30, r24
    3a22:	17 82       	std	Z+7, r1	; 0x07
    3a24:	16 82       	std	Z+6, r1	; 0x06
    3a26:	88 24       	eor	r8, r8
    3a28:	ea c0       	rjmp	.+468    	; 0x3bfe <vfscanf+0x1f0>
    3a2a:	81 2f       	mov	r24, r17
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <isspace>
    3a32:	89 2b       	or	r24, r25
    3a34:	21 f0       	breq	.+8      	; 0x3a3e <vfscanf+0x30>
    3a36:	c5 01       	movw	r24, r10
    3a38:	0e 94 bd 1b 	call	0x377a	; 0x377a <skip_spaces>
    3a3c:	e0 c0       	rjmp	.+448    	; 0x3bfe <vfscanf+0x1f0>
    3a3e:	15 32       	cpi	r17, 0x25	; 37
    3a40:	49 f4       	brne	.+18     	; 0x3a54 <vfscanf+0x46>
    3a42:	f6 01       	movw	r30, r12
    3a44:	f3 fc       	sbrc	r15, 3
    3a46:	65 91       	lpm	r22, Z+
    3a48:	f3 fe       	sbrs	r15, 3
    3a4a:	61 91       	ld	r22, Z+
    3a4c:	6f 01       	movw	r12, r30
    3a4e:	65 32       	cpi	r22, 0x25	; 37
    3a50:	69 f4       	brne	.+26     	; 0x3a6c <vfscanf+0x5e>
    3a52:	15 e2       	ldi	r17, 0x25	; 37
    3a54:	c5 01       	movw	r24, r10
    3a56:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <fgetc>
    3a5a:	97 fd       	sbrc	r25, 7
    3a5c:	dc c0       	rjmp	.+440    	; 0x3c16 <vfscanf+0x208>
    3a5e:	18 17       	cp	r17, r24
    3a60:	09 f4       	brne	.+2      	; 0x3a64 <vfscanf+0x56>
    3a62:	cd c0       	rjmp	.+410    	; 0x3bfe <vfscanf+0x1f0>
    3a64:	b5 01       	movw	r22, r10
    3a66:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <ungetc>
    3a6a:	da c0       	rjmp	.+436    	; 0x3c20 <vfscanf+0x212>
    3a6c:	6a 32       	cpi	r22, 0x2A	; 42
    3a6e:	19 f0       	breq	.+6      	; 0x3a76 <vfscanf+0x68>
    3a70:	16 2f       	mov	r17, r22
    3a72:	00 e0       	ldi	r16, 0x00	; 0
    3a74:	06 c0       	rjmp	.+12     	; 0x3a82 <vfscanf+0x74>
    3a76:	f3 fc       	sbrc	r15, 3
    3a78:	15 91       	lpm	r17, Z+
    3a7a:	f3 fe       	sbrs	r15, 3
    3a7c:	11 91       	ld	r17, Z+
    3a7e:	6f 01       	movw	r12, r30
    3a80:	01 e0       	ldi	r16, 0x01	; 1
    3a82:	99 24       	eor	r9, r9
    3a84:	0f c0       	rjmp	.+30     	; 0x3aa4 <vfscanf+0x96>
    3a86:	02 60       	ori	r16, 0x02	; 2
    3a88:	69 2d       	mov	r22, r9
    3a8a:	70 e0       	ldi	r23, 0x00	; 0
    3a8c:	80 e0       	ldi	r24, 0x00	; 0
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	40 e2       	ldi	r20, 0x20	; 32
    3a92:	0e 94 8f 1b 	call	0x371e	; 0x371e <mulacc>
    3a96:	96 2e       	mov	r9, r22
    3a98:	f6 01       	movw	r30, r12
    3a9a:	f3 fc       	sbrc	r15, 3
    3a9c:	15 91       	lpm	r17, Z+
    3a9e:	f3 fe       	sbrs	r15, 3
    3aa0:	11 91       	ld	r17, Z+
    3aa2:	6f 01       	movw	r12, r30
    3aa4:	21 2f       	mov	r18, r17
    3aa6:	20 53       	subi	r18, 0x30	; 48
    3aa8:	2a 30       	cpi	r18, 0x0A	; 10
    3aaa:	68 f3       	brcs	.-38     	; 0x3a86 <vfscanf+0x78>
    3aac:	01 fd       	sbrc	r16, 1
    3aae:	03 c0       	rjmp	.+6      	; 0x3ab6 <vfscanf+0xa8>
    3ab0:	99 24       	eor	r9, r9
    3ab2:	9a 94       	dec	r9
    3ab4:	03 c0       	rjmp	.+6      	; 0x3abc <vfscanf+0xae>
    3ab6:	99 20       	and	r9, r9
    3ab8:	09 f4       	brne	.+2      	; 0x3abc <vfscanf+0xae>
    3aba:	b2 c0       	rjmp	.+356    	; 0x3c20 <vfscanf+0x212>
    3abc:	18 36       	cpi	r17, 0x68	; 104
    3abe:	21 f0       	breq	.+8      	; 0x3ac8 <vfscanf+0xba>
    3ac0:	1c 36       	cpi	r17, 0x6C	; 108
    3ac2:	99 f4       	brne	.+38     	; 0x3aea <vfscanf+0xdc>
    3ac4:	f6 01       	movw	r30, r12
    3ac6:	0b c0       	rjmp	.+22     	; 0x3ade <vfscanf+0xd0>
    3ac8:	f6 01       	movw	r30, r12
    3aca:	f3 fc       	sbrc	r15, 3
    3acc:	65 91       	lpm	r22, Z+
    3ace:	f3 fe       	sbrs	r15, 3
    3ad0:	61 91       	ld	r22, Z+
    3ad2:	68 36       	cpi	r22, 0x68	; 104
    3ad4:	19 f0       	breq	.+6      	; 0x3adc <vfscanf+0xce>
    3ad6:	6f 01       	movw	r12, r30
    3ad8:	16 2f       	mov	r17, r22
    3ada:	07 c0       	rjmp	.+14     	; 0x3aea <vfscanf+0xdc>
    3adc:	08 60       	ori	r16, 0x08	; 8
    3ade:	04 60       	ori	r16, 0x04	; 4
    3ae0:	f3 fc       	sbrc	r15, 3
    3ae2:	15 91       	lpm	r17, Z+
    3ae4:	f3 fe       	sbrs	r15, 3
    3ae6:	11 91       	ld	r17, Z+
    3ae8:	6f 01       	movw	r12, r30
    3aea:	11 23       	and	r17, r17
    3aec:	09 f4       	brne	.+2      	; 0x3af0 <vfscanf+0xe2>
    3aee:	98 c0       	rjmp	.+304    	; 0x3c20 <vfscanf+0x212>
    3af0:	84 e5       	ldi	r24, 0x54	; 84
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	61 2f       	mov	r22, r17
    3af6:	70 e0       	ldi	r23, 0x00	; 0
    3af8:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <strchr_P>
    3afc:	89 2b       	or	r24, r25
    3afe:	09 f4       	brne	.+2      	; 0x3b02 <vfscanf+0xf4>
    3b00:	8f c0       	rjmp	.+286    	; 0x3c20 <vfscanf+0x212>
    3b02:	80 2f       	mov	r24, r16
    3b04:	00 ff       	sbrs	r16, 0
    3b06:	03 c0       	rjmp	.+6      	; 0x3b0e <vfscanf+0x100>
    3b08:	ee 24       	eor	r14, r14
    3b0a:	ff 24       	eor	r15, r15
    3b0c:	07 c0       	rjmp	.+14     	; 0x3b1c <vfscanf+0x10e>
    3b0e:	f3 01       	movw	r30, r6
    3b10:	e0 80       	ld	r14, Z
    3b12:	f1 80       	ldd	r15, Z+1	; 0x01
    3b14:	22 e0       	ldi	r18, 0x02	; 2
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	62 0e       	add	r6, r18
    3b1a:	73 1e       	adc	r7, r19
    3b1c:	1e 36       	cpi	r17, 0x6E	; 110
    3b1e:	51 f4       	brne	.+20     	; 0x3b34 <vfscanf+0x126>
    3b20:	f5 01       	movw	r30, r10
    3b22:	46 81       	ldd	r20, Z+6	; 0x06
    3b24:	57 81       	ldd	r21, Z+7	; 0x07
    3b26:	60 e0       	ldi	r22, 0x00	; 0
    3b28:	70 e0       	ldi	r23, 0x00	; 0
    3b2a:	c7 01       	movw	r24, r14
    3b2c:	20 2f       	mov	r18, r16
    3b2e:	0e 94 83 1b 	call	0x3706	; 0x3706 <putval>
    3b32:	65 c0       	rjmp	.+202    	; 0x3bfe <vfscanf+0x1f0>
    3b34:	13 36       	cpi	r17, 0x63	; 99
    3b36:	91 f4       	brne	.+36     	; 0x3b5c <vfscanf+0x14e>
    3b38:	81 fd       	sbrc	r24, 1
    3b3a:	02 c0       	rjmp	.+4      	; 0x3b40 <vfscanf+0x132>
    3b3c:	99 24       	eor	r9, r9
    3b3e:	93 94       	inc	r9
    3b40:	c5 01       	movw	r24, r10
    3b42:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <fgetc>
    3b46:	97 fd       	sbrc	r25, 7
    3b48:	66 c0       	rjmp	.+204    	; 0x3c16 <vfscanf+0x208>
    3b4a:	e1 14       	cp	r14, r1
    3b4c:	f1 04       	cpc	r15, r1
    3b4e:	19 f0       	breq	.+6      	; 0x3b56 <vfscanf+0x148>
    3b50:	f7 01       	movw	r30, r14
    3b52:	81 93       	st	Z+, r24
    3b54:	7f 01       	movw	r14, r30
    3b56:	9a 94       	dec	r9
    3b58:	99 f7       	brne	.-26     	; 0x3b40 <vfscanf+0x132>
    3b5a:	4f c0       	rjmp	.+158    	; 0x3bfa <vfscanf+0x1ec>
    3b5c:	1b 35       	cpi	r17, 0x5B	; 91
    3b5e:	59 f4       	brne	.+22     	; 0x3b76 <vfscanf+0x168>
    3b60:	c5 01       	movw	r24, r10
    3b62:	69 2d       	mov	r22, r9
    3b64:	a7 01       	movw	r20, r14
    3b66:	96 01       	movw	r18, r12
    3b68:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <conv_brk>
    3b6c:	6c 01       	movw	r12, r24
    3b6e:	00 97       	sbiw	r24, 0x00	; 0
    3b70:	09 f0       	breq	.+2      	; 0x3b74 <vfscanf+0x166>
    3b72:	43 c0       	rjmp	.+134    	; 0x3bfa <vfscanf+0x1ec>
    3b74:	3d c0       	rjmp	.+122    	; 0x3bf0 <vfscanf+0x1e2>
    3b76:	c5 01       	movw	r24, r10
    3b78:	0e 94 bd 1b 	call	0x377a	; 0x377a <skip_spaces>
    3b7c:	97 fd       	sbrc	r25, 7
    3b7e:	4b c0       	rjmp	.+150    	; 0x3c16 <vfscanf+0x208>
    3b80:	1f 36       	cpi	r17, 0x6F	; 111
    3b82:	59 f1       	breq	.+86     	; 0x3bda <vfscanf+0x1cc>
    3b84:	10 37       	cpi	r17, 0x70	; 112
    3b86:	28 f4       	brcc	.+10     	; 0x3b92 <vfscanf+0x184>
    3b88:	14 36       	cpi	r17, 0x64	; 100
    3b8a:	29 f1       	breq	.+74     	; 0x3bd6 <vfscanf+0x1c8>
    3b8c:	19 36       	cpi	r17, 0x69	; 105
    3b8e:	39 f5       	brne	.+78     	; 0x3bde <vfscanf+0x1d0>
    3b90:	27 c0       	rjmp	.+78     	; 0x3be0 <vfscanf+0x1d2>
    3b92:	13 37       	cpi	r17, 0x73	; 115
    3b94:	19 f0       	breq	.+6      	; 0x3b9c <vfscanf+0x18e>
    3b96:	15 37       	cpi	r17, 0x75	; 117
    3b98:	11 f5       	brne	.+68     	; 0x3bde <vfscanf+0x1d0>
    3b9a:	1d c0       	rjmp	.+58     	; 0x3bd6 <vfscanf+0x1c8>
    3b9c:	c5 01       	movw	r24, r10
    3b9e:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <fgetc>
    3ba2:	ec 01       	movw	r28, r24
    3ba4:	97 fd       	sbrc	r25, 7
    3ba6:	11 c0       	rjmp	.+34     	; 0x3bca <vfscanf+0x1bc>
    3ba8:	0e 94 23 1e 	call	0x3c46	; 0x3c46 <isspace>
    3bac:	89 2b       	or	r24, r25
    3bae:	29 f0       	breq	.+10     	; 0x3bba <vfscanf+0x1ac>
    3bb0:	ce 01       	movw	r24, r28
    3bb2:	b5 01       	movw	r22, r10
    3bb4:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <ungetc>
    3bb8:	08 c0       	rjmp	.+16     	; 0x3bca <vfscanf+0x1bc>
    3bba:	e1 14       	cp	r14, r1
    3bbc:	f1 04       	cpc	r15, r1
    3bbe:	19 f0       	breq	.+6      	; 0x3bc6 <vfscanf+0x1b8>
    3bc0:	f7 01       	movw	r30, r14
    3bc2:	c1 93       	st	Z+, r28
    3bc4:	7f 01       	movw	r14, r30
    3bc6:	9a 94       	dec	r9
    3bc8:	49 f7       	brne	.-46     	; 0x3b9c <vfscanf+0x18e>
    3bca:	e1 14       	cp	r14, r1
    3bcc:	f1 04       	cpc	r15, r1
    3bce:	a9 f0       	breq	.+42     	; 0x3bfa <vfscanf+0x1ec>
    3bd0:	f7 01       	movw	r30, r14
    3bd2:	10 82       	st	Z, r1
    3bd4:	12 c0       	rjmp	.+36     	; 0x3bfa <vfscanf+0x1ec>
    3bd6:	00 62       	ori	r16, 0x20	; 32
    3bd8:	03 c0       	rjmp	.+6      	; 0x3be0 <vfscanf+0x1d2>
    3bda:	00 61       	ori	r16, 0x10	; 16
    3bdc:	01 c0       	rjmp	.+2      	; 0x3be0 <vfscanf+0x1d2>
    3bde:	00 64       	ori	r16, 0x40	; 64
    3be0:	c5 01       	movw	r24, r10
    3be2:	69 2d       	mov	r22, r9
    3be4:	a7 01       	movw	r20, r14
    3be6:	20 2f       	mov	r18, r16
    3be8:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <conv_int>
    3bec:	88 23       	and	r24, r24
    3bee:	29 f4       	brne	.+10     	; 0x3bfa <vfscanf+0x1ec>
    3bf0:	f5 01       	movw	r30, r10
    3bf2:	83 81       	ldd	r24, Z+3	; 0x03
    3bf4:	80 73       	andi	r24, 0x30	; 48
    3bf6:	79 f4       	brne	.+30     	; 0x3c16 <vfscanf+0x208>
    3bf8:	13 c0       	rjmp	.+38     	; 0x3c20 <vfscanf+0x212>
    3bfa:	00 ff       	sbrs	r16, 0
    3bfc:	83 94       	inc	r8
    3bfe:	f5 01       	movw	r30, r10
    3c00:	f3 80       	ldd	r15, Z+3	; 0x03
    3c02:	f6 01       	movw	r30, r12
    3c04:	f3 fc       	sbrc	r15, 3
    3c06:	15 91       	lpm	r17, Z+
    3c08:	f3 fe       	sbrs	r15, 3
    3c0a:	11 91       	ld	r17, Z+
    3c0c:	6f 01       	movw	r12, r30
    3c0e:	11 23       	and	r17, r17
    3c10:	09 f0       	breq	.+2      	; 0x3c14 <vfscanf+0x206>
    3c12:	0b cf       	rjmp	.-490    	; 0x3a2a <vfscanf+0x1c>
    3c14:	05 c0       	rjmp	.+10     	; 0x3c20 <vfscanf+0x212>
    3c16:	88 20       	and	r8, r8
    3c18:	19 f4       	brne	.+6      	; 0x3c20 <vfscanf+0x212>
    3c1a:	2f ef       	ldi	r18, 0xFF	; 255
    3c1c:	3f ef       	ldi	r19, 0xFF	; 255
    3c1e:	02 c0       	rjmp	.+4      	; 0x3c24 <vfscanf+0x216>
    3c20:	28 2d       	mov	r18, r8
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	c9 01       	movw	r24, r18
    3c26:	cd b7       	in	r28, 0x3d	; 61
    3c28:	de b7       	in	r29, 0x3e	; 62
    3c2a:	ee e0       	ldi	r30, 0x0E	; 14
    3c2c:	0c 94 c9 18 	jmp	0x3192	; 0x3192 <__epilogue_restores__+0x8>

00003c30 <__eerd_word_m32>:
    3c30:	a8 e1       	ldi	r26, 0x18	; 24
    3c32:	b0 e0       	ldi	r27, 0x00	; 0
    3c34:	42 e0       	ldi	r20, 0x02	; 2
    3c36:	50 e0       	ldi	r21, 0x00	; 0
    3c38:	0c 94 34 1f 	jmp	0x3e68	; 0x3e68 <__eerd_blraw_m32>

00003c3c <__eewr_word_m32>:
    3c3c:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <__eewr_byte_m32>
    3c40:	27 2f       	mov	r18, r23
    3c42:	0c 94 43 1f 	jmp	0x3e86	; 0x3e86 <__eewr_r18_m32>

00003c46 <isspace>:
    3c46:	91 11       	cpse	r25, r1
    3c48:	2a c1       	rjmp	.+596    	; 0x3e9e <__ctype_isfalse>
    3c4a:	80 32       	cpi	r24, 0x20	; 32
    3c4c:	19 f0       	breq	.+6      	; 0x3c54 <isspace+0xe>
    3c4e:	89 50       	subi	r24, 0x09	; 9
    3c50:	85 50       	subi	r24, 0x05	; 5
    3c52:	d0 f7       	brcc	.-12     	; 0x3c48 <isspace+0x2>
    3c54:	08 95       	ret

00003c56 <strchr_P>:
    3c56:	fc 01       	movw	r30, r24
    3c58:	05 90       	lpm	r0, Z+
    3c5a:	06 16       	cp	r0, r22
    3c5c:	21 f0       	breq	.+8      	; 0x3c66 <strchr_P+0x10>
    3c5e:	00 20       	and	r0, r0
    3c60:	d9 f7       	brne	.-10     	; 0x3c58 <strchr_P+0x2>
    3c62:	c0 01       	movw	r24, r0
    3c64:	08 95       	ret
    3c66:	31 97       	sbiw	r30, 0x01	; 1
    3c68:	cf 01       	movw	r24, r30
    3c6a:	08 95       	ret

00003c6c <strnlen_P>:
    3c6c:	fc 01       	movw	r30, r24
    3c6e:	05 90       	lpm	r0, Z+
    3c70:	61 50       	subi	r22, 0x01	; 1
    3c72:	70 40       	sbci	r23, 0x00	; 0
    3c74:	01 10       	cpse	r0, r1
    3c76:	d8 f7       	brcc	.-10     	; 0x3c6e <strnlen_P+0x2>
    3c78:	80 95       	com	r24
    3c7a:	90 95       	com	r25
    3c7c:	8e 0f       	add	r24, r30
    3c7e:	9f 1f       	adc	r25, r31
    3c80:	08 95       	ret

00003c82 <strnlen>:
    3c82:	fc 01       	movw	r30, r24
    3c84:	61 50       	subi	r22, 0x01	; 1
    3c86:	70 40       	sbci	r23, 0x00	; 0
    3c88:	01 90       	ld	r0, Z+
    3c8a:	01 10       	cpse	r0, r1
    3c8c:	d8 f7       	brcc	.-10     	; 0x3c84 <strnlen+0x2>
    3c8e:	80 95       	com	r24
    3c90:	90 95       	com	r25
    3c92:	8e 0f       	add	r24, r30
    3c94:	9f 1f       	adc	r25, r31
    3c96:	08 95       	ret

00003c98 <fgetc>:
    3c98:	cf 93       	push	r28
    3c9a:	df 93       	push	r29
    3c9c:	ec 01       	movw	r28, r24
    3c9e:	4b 81       	ldd	r20, Y+3	; 0x03
    3ca0:	40 ff       	sbrs	r20, 0
    3ca2:	1a c0       	rjmp	.+52     	; 0x3cd8 <fgetc+0x40>
    3ca4:	46 ff       	sbrs	r20, 6
    3ca6:	0a c0       	rjmp	.+20     	; 0x3cbc <fgetc+0x24>
    3ca8:	4f 7b       	andi	r20, 0xBF	; 191
    3caa:	4b 83       	std	Y+3, r20	; 0x03
    3cac:	8e 81       	ldd	r24, Y+6	; 0x06
    3cae:	9f 81       	ldd	r25, Y+7	; 0x07
    3cb0:	01 96       	adiw	r24, 0x01	; 1
    3cb2:	9f 83       	std	Y+7, r25	; 0x07
    3cb4:	8e 83       	std	Y+6, r24	; 0x06
    3cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb8:	28 2f       	mov	r18, r24
    3cba:	2b c0       	rjmp	.+86     	; 0x3d12 <fgetc+0x7a>
    3cbc:	42 ff       	sbrs	r20, 2
    3cbe:	13 c0       	rjmp	.+38     	; 0x3ce6 <fgetc+0x4e>
    3cc0:	e8 81       	ld	r30, Y
    3cc2:	f9 81       	ldd	r31, Y+1	; 0x01
    3cc4:	80 81       	ld	r24, Z
    3cc6:	28 2f       	mov	r18, r24
    3cc8:	33 27       	eor	r19, r19
    3cca:	27 fd       	sbrc	r18, 7
    3ccc:	30 95       	com	r19
    3cce:	21 15       	cp	r18, r1
    3cd0:	31 05       	cpc	r19, r1
    3cd2:	29 f4       	brne	.+10     	; 0x3cde <fgetc+0x46>
    3cd4:	40 62       	ori	r20, 0x20	; 32
    3cd6:	4b 83       	std	Y+3, r20	; 0x03
    3cd8:	2f ef       	ldi	r18, 0xFF	; 255
    3cda:	3f ef       	ldi	r19, 0xFF	; 255
    3cdc:	1b c0       	rjmp	.+54     	; 0x3d14 <fgetc+0x7c>
    3cde:	31 96       	adiw	r30, 0x01	; 1
    3ce0:	f9 83       	std	Y+1, r31	; 0x01
    3ce2:	e8 83       	st	Y, r30
    3ce4:	11 c0       	rjmp	.+34     	; 0x3d08 <fgetc+0x70>
    3ce6:	ea 85       	ldd	r30, Y+10	; 0x0a
    3ce8:	fb 85       	ldd	r31, Y+11	; 0x0b
    3cea:	ce 01       	movw	r24, r28
    3cec:	09 95       	icall
    3cee:	9c 01       	movw	r18, r24
    3cf0:	97 ff       	sbrs	r25, 7
    3cf2:	0a c0       	rjmp	.+20     	; 0x3d08 <fgetc+0x70>
    3cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    3cf6:	2f 5f       	subi	r18, 0xFF	; 255
    3cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cfa:	11 f0       	breq	.+4      	; 0x3d00 <fgetc+0x68>
    3cfc:	80 e2       	ldi	r24, 0x20	; 32
    3cfe:	01 c0       	rjmp	.+2      	; 0x3d02 <fgetc+0x6a>
    3d00:	80 e1       	ldi	r24, 0x10	; 16
    3d02:	89 2b       	or	r24, r25
    3d04:	8b 83       	std	Y+3, r24	; 0x03
    3d06:	e8 cf       	rjmp	.-48     	; 0x3cd8 <fgetc+0x40>
    3d08:	8e 81       	ldd	r24, Y+6	; 0x06
    3d0a:	9f 81       	ldd	r25, Y+7	; 0x07
    3d0c:	01 96       	adiw	r24, 0x01	; 1
    3d0e:	9f 83       	std	Y+7, r25	; 0x07
    3d10:	8e 83       	std	Y+6, r24	; 0x06
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	c9 01       	movw	r24, r18
    3d16:	df 91       	pop	r29
    3d18:	cf 91       	pop	r28
    3d1a:	08 95       	ret

00003d1c <fputc>:
    3d1c:	0f 93       	push	r16
    3d1e:	1f 93       	push	r17
    3d20:	cf 93       	push	r28
    3d22:	df 93       	push	r29
    3d24:	8c 01       	movw	r16, r24
    3d26:	eb 01       	movw	r28, r22
    3d28:	8b 81       	ldd	r24, Y+3	; 0x03
    3d2a:	81 ff       	sbrs	r24, 1
    3d2c:	1b c0       	rjmp	.+54     	; 0x3d64 <fputc+0x48>
    3d2e:	82 ff       	sbrs	r24, 2
    3d30:	0d c0       	rjmp	.+26     	; 0x3d4c <fputc+0x30>
    3d32:	2e 81       	ldd	r18, Y+6	; 0x06
    3d34:	3f 81       	ldd	r19, Y+7	; 0x07
    3d36:	8c 81       	ldd	r24, Y+4	; 0x04
    3d38:	9d 81       	ldd	r25, Y+5	; 0x05
    3d3a:	28 17       	cp	r18, r24
    3d3c:	39 07       	cpc	r19, r25
    3d3e:	64 f4       	brge	.+24     	; 0x3d58 <fputc+0x3c>
    3d40:	e8 81       	ld	r30, Y
    3d42:	f9 81       	ldd	r31, Y+1	; 0x01
    3d44:	01 93       	st	Z+, r16
    3d46:	f9 83       	std	Y+1, r31	; 0x01
    3d48:	e8 83       	st	Y, r30
    3d4a:	06 c0       	rjmp	.+12     	; 0x3d58 <fputc+0x3c>
    3d4c:	e8 85       	ldd	r30, Y+8	; 0x08
    3d4e:	f9 85       	ldd	r31, Y+9	; 0x09
    3d50:	80 2f       	mov	r24, r16
    3d52:	09 95       	icall
    3d54:	89 2b       	or	r24, r25
    3d56:	31 f4       	brne	.+12     	; 0x3d64 <fputc+0x48>
    3d58:	8e 81       	ldd	r24, Y+6	; 0x06
    3d5a:	9f 81       	ldd	r25, Y+7	; 0x07
    3d5c:	01 96       	adiw	r24, 0x01	; 1
    3d5e:	9f 83       	std	Y+7, r25	; 0x07
    3d60:	8e 83       	std	Y+6, r24	; 0x06
    3d62:	02 c0       	rjmp	.+4      	; 0x3d68 <fputc+0x4c>
    3d64:	0f ef       	ldi	r16, 0xFF	; 255
    3d66:	1f ef       	ldi	r17, 0xFF	; 255
    3d68:	c8 01       	movw	r24, r16
    3d6a:	df 91       	pop	r29
    3d6c:	cf 91       	pop	r28
    3d6e:	1f 91       	pop	r17
    3d70:	0f 91       	pop	r16
    3d72:	08 95       	ret

00003d74 <ungetc>:
    3d74:	9c 01       	movw	r18, r24
    3d76:	fb 01       	movw	r30, r22
    3d78:	83 81       	ldd	r24, Z+3	; 0x03
    3d7a:	80 ff       	sbrs	r24, 0
    3d7c:	11 c0       	rjmp	.+34     	; 0x3da0 <ungetc+0x2c>
    3d7e:	86 fd       	sbrc	r24, 6
    3d80:	0f c0       	rjmp	.+30     	; 0x3da0 <ungetc+0x2c>
    3d82:	9f ef       	ldi	r25, 0xFF	; 255
    3d84:	2f 3f       	cpi	r18, 0xFF	; 255
    3d86:	39 07       	cpc	r19, r25
    3d88:	59 f0       	breq	.+22     	; 0x3da0 <ungetc+0x2c>
    3d8a:	22 83       	std	Z+2, r18	; 0x02
    3d8c:	80 64       	ori	r24, 0x40	; 64
    3d8e:	8f 7d       	andi	r24, 0xDF	; 223
    3d90:	83 83       	std	Z+3, r24	; 0x03
    3d92:	86 81       	ldd	r24, Z+6	; 0x06
    3d94:	97 81       	ldd	r25, Z+7	; 0x07
    3d96:	01 97       	sbiw	r24, 0x01	; 1
    3d98:	97 83       	std	Z+7, r25	; 0x07
    3d9a:	86 83       	std	Z+6, r24	; 0x06
    3d9c:	30 e0       	ldi	r19, 0x00	; 0
    3d9e:	02 c0       	rjmp	.+4      	; 0x3da4 <ungetc+0x30>
    3da0:	2f ef       	ldi	r18, 0xFF	; 255
    3da2:	3f ef       	ldi	r19, 0xFF	; 255
    3da4:	c9 01       	movw	r24, r18
    3da6:	08 95       	ret

00003da8 <__ultoa_invert>:
    3da8:	fa 01       	movw	r30, r20
    3daa:	aa 27       	eor	r26, r26
    3dac:	28 30       	cpi	r18, 0x08	; 8
    3dae:	51 f1       	breq	.+84     	; 0x3e04 <__ultoa_invert+0x5c>
    3db0:	20 31       	cpi	r18, 0x10	; 16
    3db2:	81 f1       	breq	.+96     	; 0x3e14 <__ultoa_invert+0x6c>
    3db4:	e8 94       	clt
    3db6:	6f 93       	push	r22
    3db8:	6e 7f       	andi	r22, 0xFE	; 254
    3dba:	6e 5f       	subi	r22, 0xFE	; 254
    3dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    3dbe:	8f 4f       	sbci	r24, 0xFF	; 255
    3dc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3dc2:	af 4f       	sbci	r26, 0xFF	; 255
    3dc4:	b1 e0       	ldi	r27, 0x01	; 1
    3dc6:	3e d0       	rcall	.+124    	; 0x3e44 <__ultoa_invert+0x9c>
    3dc8:	b4 e0       	ldi	r27, 0x04	; 4
    3dca:	3c d0       	rcall	.+120    	; 0x3e44 <__ultoa_invert+0x9c>
    3dcc:	67 0f       	add	r22, r23
    3dce:	78 1f       	adc	r23, r24
    3dd0:	89 1f       	adc	r24, r25
    3dd2:	9a 1f       	adc	r25, r26
    3dd4:	a1 1d       	adc	r26, r1
    3dd6:	68 0f       	add	r22, r24
    3dd8:	79 1f       	adc	r23, r25
    3dda:	8a 1f       	adc	r24, r26
    3ddc:	91 1d       	adc	r25, r1
    3dde:	a1 1d       	adc	r26, r1
    3de0:	6a 0f       	add	r22, r26
    3de2:	71 1d       	adc	r23, r1
    3de4:	81 1d       	adc	r24, r1
    3de6:	91 1d       	adc	r25, r1
    3de8:	a1 1d       	adc	r26, r1
    3dea:	20 d0       	rcall	.+64     	; 0x3e2c <__ultoa_invert+0x84>
    3dec:	09 f4       	brne	.+2      	; 0x3df0 <__ultoa_invert+0x48>
    3dee:	68 94       	set
    3df0:	3f 91       	pop	r19
    3df2:	2a e0       	ldi	r18, 0x0A	; 10
    3df4:	26 9f       	mul	r18, r22
    3df6:	11 24       	eor	r1, r1
    3df8:	30 19       	sub	r19, r0
    3dfa:	30 5d       	subi	r19, 0xD0	; 208
    3dfc:	31 93       	st	Z+, r19
    3dfe:	de f6       	brtc	.-74     	; 0x3db6 <__ultoa_invert+0xe>
    3e00:	cf 01       	movw	r24, r30
    3e02:	08 95       	ret
    3e04:	46 2f       	mov	r20, r22
    3e06:	47 70       	andi	r20, 0x07	; 7
    3e08:	40 5d       	subi	r20, 0xD0	; 208
    3e0a:	41 93       	st	Z+, r20
    3e0c:	b3 e0       	ldi	r27, 0x03	; 3
    3e0e:	0f d0       	rcall	.+30     	; 0x3e2e <__ultoa_invert+0x86>
    3e10:	c9 f7       	brne	.-14     	; 0x3e04 <__ultoa_invert+0x5c>
    3e12:	f6 cf       	rjmp	.-20     	; 0x3e00 <__ultoa_invert+0x58>
    3e14:	46 2f       	mov	r20, r22
    3e16:	4f 70       	andi	r20, 0x0F	; 15
    3e18:	40 5d       	subi	r20, 0xD0	; 208
    3e1a:	4a 33       	cpi	r20, 0x3A	; 58
    3e1c:	18 f0       	brcs	.+6      	; 0x3e24 <__ultoa_invert+0x7c>
    3e1e:	49 5d       	subi	r20, 0xD9	; 217
    3e20:	31 fd       	sbrc	r19, 1
    3e22:	40 52       	subi	r20, 0x20	; 32
    3e24:	41 93       	st	Z+, r20
    3e26:	02 d0       	rcall	.+4      	; 0x3e2c <__ultoa_invert+0x84>
    3e28:	a9 f7       	brne	.-22     	; 0x3e14 <__ultoa_invert+0x6c>
    3e2a:	ea cf       	rjmp	.-44     	; 0x3e00 <__ultoa_invert+0x58>
    3e2c:	b4 e0       	ldi	r27, 0x04	; 4
    3e2e:	a6 95       	lsr	r26
    3e30:	97 95       	ror	r25
    3e32:	87 95       	ror	r24
    3e34:	77 95       	ror	r23
    3e36:	67 95       	ror	r22
    3e38:	ba 95       	dec	r27
    3e3a:	c9 f7       	brne	.-14     	; 0x3e2e <__ultoa_invert+0x86>
    3e3c:	00 97       	sbiw	r24, 0x00	; 0
    3e3e:	61 05       	cpc	r22, r1
    3e40:	71 05       	cpc	r23, r1
    3e42:	08 95       	ret
    3e44:	9b 01       	movw	r18, r22
    3e46:	ac 01       	movw	r20, r24
    3e48:	0a 2e       	mov	r0, r26
    3e4a:	06 94       	lsr	r0
    3e4c:	57 95       	ror	r21
    3e4e:	47 95       	ror	r20
    3e50:	37 95       	ror	r19
    3e52:	27 95       	ror	r18
    3e54:	ba 95       	dec	r27
    3e56:	c9 f7       	brne	.-14     	; 0x3e4a <__ultoa_invert+0xa2>
    3e58:	62 0f       	add	r22, r18
    3e5a:	73 1f       	adc	r23, r19
    3e5c:	84 1f       	adc	r24, r20
    3e5e:	95 1f       	adc	r25, r21
    3e60:	a0 1d       	adc	r26, r0
    3e62:	08 95       	ret

00003e64 <__eerd_block_m32>:
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22

00003e68 <__eerd_blraw_m32>:
    3e68:	fc 01       	movw	r30, r24
    3e6a:	e1 99       	sbic	0x1c, 1	; 28
    3e6c:	fe cf       	rjmp	.-4      	; 0x3e6a <__eerd_blraw_m32+0x2>
    3e6e:	06 c0       	rjmp	.+12     	; 0x3e7c <__eerd_blraw_m32+0x14>
    3e70:	ff bb       	out	0x1f, r31	; 31
    3e72:	ee bb       	out	0x1e, r30	; 30
    3e74:	e0 9a       	sbi	0x1c, 0	; 28
    3e76:	31 96       	adiw	r30, 0x01	; 1
    3e78:	0d b2       	in	r0, 0x1d	; 29
    3e7a:	0d 92       	st	X+, r0
    3e7c:	41 50       	subi	r20, 0x01	; 1
    3e7e:	50 40       	sbci	r21, 0x00	; 0
    3e80:	b8 f7       	brcc	.-18     	; 0x3e70 <__eerd_blraw_m32+0x8>
    3e82:	08 95       	ret

00003e84 <__eewr_byte_m32>:
    3e84:	26 2f       	mov	r18, r22

00003e86 <__eewr_r18_m32>:
    3e86:	e1 99       	sbic	0x1c, 1	; 28
    3e88:	fe cf       	rjmp	.-4      	; 0x3e86 <__eewr_r18_m32>
    3e8a:	9f bb       	out	0x1f, r25	; 31
    3e8c:	8e bb       	out	0x1e, r24	; 30
    3e8e:	2d bb       	out	0x1d, r18	; 29
    3e90:	0f b6       	in	r0, 0x3f	; 63
    3e92:	f8 94       	cli
    3e94:	e2 9a       	sbi	0x1c, 2	; 28
    3e96:	e1 9a       	sbi	0x1c, 1	; 28
    3e98:	0f be       	out	0x3f, r0	; 63
    3e9a:	01 96       	adiw	r24, 0x01	; 1
    3e9c:	08 95       	ret

00003e9e <__ctype_isfalse>:
    3e9e:	99 27       	eor	r25, r25
    3ea0:	88 27       	eor	r24, r24

00003ea2 <__ctype_istrue>:
    3ea2:	08 95       	ret

00003ea4 <__mulsi3>:
    3ea4:	62 9f       	mul	r22, r18
    3ea6:	d0 01       	movw	r26, r0
    3ea8:	73 9f       	mul	r23, r19
    3eaa:	f0 01       	movw	r30, r0
    3eac:	82 9f       	mul	r24, r18
    3eae:	e0 0d       	add	r30, r0
    3eb0:	f1 1d       	adc	r31, r1
    3eb2:	64 9f       	mul	r22, r20
    3eb4:	e0 0d       	add	r30, r0
    3eb6:	f1 1d       	adc	r31, r1
    3eb8:	92 9f       	mul	r25, r18
    3eba:	f0 0d       	add	r31, r0
    3ebc:	83 9f       	mul	r24, r19
    3ebe:	f0 0d       	add	r31, r0
    3ec0:	74 9f       	mul	r23, r20
    3ec2:	f0 0d       	add	r31, r0
    3ec4:	65 9f       	mul	r22, r21
    3ec6:	f0 0d       	add	r31, r0
    3ec8:	99 27       	eor	r25, r25
    3eca:	72 9f       	mul	r23, r18
    3ecc:	b0 0d       	add	r27, r0
    3ece:	e1 1d       	adc	r30, r1
    3ed0:	f9 1f       	adc	r31, r25
    3ed2:	63 9f       	mul	r22, r19
    3ed4:	b0 0d       	add	r27, r0
    3ed6:	e1 1d       	adc	r30, r1
    3ed8:	f9 1f       	adc	r31, r25
    3eda:	bd 01       	movw	r22, r26
    3edc:	cf 01       	movw	r24, r30
    3ede:	11 24       	eor	r1, r1
    3ee0:	08 95       	ret

00003ee2 <__divmodsi4>:
    3ee2:	97 fb       	bst	r25, 7
    3ee4:	09 2e       	mov	r0, r25
    3ee6:	05 26       	eor	r0, r21
    3ee8:	0e d0       	rcall	.+28     	; 0x3f06 <__divmodsi4_neg1>
    3eea:	57 fd       	sbrc	r21, 7
    3eec:	04 d0       	rcall	.+8      	; 0x3ef6 <__divmodsi4_neg2>
    3eee:	0f d9       	rcall	.-3554   	; 0x310e <__udivmodsi4>
    3ef0:	0a d0       	rcall	.+20     	; 0x3f06 <__divmodsi4_neg1>
    3ef2:	00 1c       	adc	r0, r0
    3ef4:	38 f4       	brcc	.+14     	; 0x3f04 <__divmodsi4_exit>

00003ef6 <__divmodsi4_neg2>:
    3ef6:	50 95       	com	r21
    3ef8:	40 95       	com	r20
    3efa:	30 95       	com	r19
    3efc:	21 95       	neg	r18
    3efe:	3f 4f       	sbci	r19, 0xFF	; 255
    3f00:	4f 4f       	sbci	r20, 0xFF	; 255
    3f02:	5f 4f       	sbci	r21, 0xFF	; 255

00003f04 <__divmodsi4_exit>:
    3f04:	08 95       	ret

00003f06 <__divmodsi4_neg1>:
    3f06:	f6 f7       	brtc	.-4      	; 0x3f04 <__divmodsi4_exit>
    3f08:	90 95       	com	r25
    3f0a:	80 95       	com	r24
    3f0c:	70 95       	com	r23
    3f0e:	61 95       	neg	r22
    3f10:	7f 4f       	sbci	r23, 0xFF	; 255
    3f12:	8f 4f       	sbci	r24, 0xFF	; 255
    3f14:	9f 4f       	sbci	r25, 0xFF	; 255
    3f16:	08 95       	ret

00003f18 <_exit>:
    3f18:	f8 94       	cli

00003f1a <__stop_program>:
    3f1a:	ff cf       	rjmp	.-2      	; 0x3f1a <__stop_program>
